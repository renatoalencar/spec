// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Lib = require("../util/lib.bs.js");
var Char = require("rescript/lib/js/char.js");
var List = require("rescript/lib/js/list.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");

var Utf8 = /* @__PURE__ */Caml_exceptions.create("Utf8.Utf8");

function con(n) {
  return 128 | n & 63;
}

function encode$p(param) {
  if (!param) {
    return /* [] */0;
  }
  var n = param.hd;
  if (n < 0) {
    throw {
          RE_EXN_ID: Utf8,
          Error: new Error()
        };
  }
  var ns = param.tl;
  if (n < 128) {
    return {
            hd: n,
            tl: encode$p(ns)
          };
  }
  if (n < 2048) {
    return {
            hd: 192 | (n >>> 6),
            tl: {
              hd: con(n),
              tl: encode$p(ns)
            }
          };
  }
  if (n < 65536) {
    return {
            hd: 224 | (n >>> 12),
            tl: {
              hd: con((n >>> 6)),
              tl: {
                hd: con(n),
                tl: encode$p(ns)
              }
            }
          };
  }
  if (n < 1114112) {
    return {
            hd: 240 | (n >>> 18),
            tl: {
              hd: con((n >>> 12)),
              tl: {
                hd: con((n >>> 6)),
                tl: {
                  hd: con(n),
                  tl: encode$p(ns)
                }
              }
            }
          };
  }
  throw {
        RE_EXN_ID: Utf8,
        Error: new Error()
      };
}

function encode(ns) {
  return Lib.$$String.implode(List.map(Char.chr, encode$p(ns)));
}

function con$1(b) {
  if ((b & 192) === 128) {
    return b & 63;
  }
  throw {
        RE_EXN_ID: Utf8,
        Error: new Error()
      };
}

function code(min, n) {
  if (n < min || 55296 <= n && n < 57344 || n >= 1114112) {
    throw {
          RE_EXN_ID: Utf8,
          Error: new Error()
        };
  }
  return n;
}

function decode$p(param) {
  if (!param) {
    return /* [] */0;
  }
  var bs = param.tl;
  var b1 = param.hd;
  if (b1 < 128) {
    return {
            hd: code(0, b1),
            tl: decode$p(bs)
          };
  }
  if (b1 < 192) {
    throw {
          RE_EXN_ID: Utf8,
          Error: new Error()
        };
  }
  if (bs) {
    var bs$1 = bs.tl;
    var b2 = bs.hd;
    if (b1 < 224) {
      return {
              hd: code(128, ((b1 & 31) << 6) + con$1(b2) | 0),
              tl: decode$p(bs$1)
            };
    }
    if (bs$1) {
      var bs$2 = bs$1.tl;
      var b3 = bs$1.hd;
      if (b1 < 240) {
        return {
                hd: code(2048, (((b1 & 15) << 12) + (con$1(b2) << 6) | 0) + con$1(b3) | 0),
                tl: decode$p(bs$2)
              };
      }
      if (bs$2) {
        if (b1 < 248) {
          return {
                  hd: code(65536, ((((b1 & 7) << 18) + (con$1(b2) << 12) | 0) + (con$1(b3) << 6) | 0) + con$1(bs$2.hd) | 0),
                  tl: decode$p(bs$2.tl)
                };
        }
        throw {
              RE_EXN_ID: Utf8,
              Error: new Error()
            };
      }
      throw {
            RE_EXN_ID: Utf8,
            Error: new Error()
          };
    }
    throw {
          RE_EXN_ID: Utf8,
          Error: new Error()
        };
  }
  throw {
        RE_EXN_ID: Utf8,
        Error: new Error()
      };
}

function decode(s) {
  return decode$p(List.map((function (prim) {
                    return prim;
                  }), Lib.$$String.explode(s)));
}

exports.Utf8 = Utf8;
exports.decode = decode;
exports.encode = encode;
/* No side effect */
