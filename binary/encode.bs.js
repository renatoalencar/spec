// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var F32 = require("../exec/f32.bs.js");
var F64 = require("../exec/f64.bs.js");
var Lib = require("../util/lib.bs.js");
var Caml = require("rescript/lib/js/caml.js");
var Char = require("rescript/lib/js/char.js");
var Free = require("../syntax/free.bs.js");
var List = require("rescript/lib/js/list.js");
var Utf8 = require("./utf8.bs.js");
var V128 = require("../exec/v128.bs.js");
var Bytes = require("rescript/lib/js/bytes.js");
var Curry = require("rescript/lib/js/curry.js");
var $$Error = require("../util/error.bs.js");
var $$Buffer = require("rescript/lib/js/buffer.js");
var Source = require("../util/source.bs.js");
var $$String = require("rescript/lib/js/string.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Caml_bytes = require("rescript/lib/js/caml_bytes.js");
var Caml_int64 = require("rescript/lib/js/caml_int64.js");
var I64_convert = require("../exec/i64_convert.bs.js");

var Code = $$Error.Make({});

function stream(param) {
  return {
          buf: $$Buffer.create(8192),
          patches: {
            contents: /* [] */0
          }
        };
}

function patch(s, pos, b) {
  s.patches.contents = {
    hd: [
      pos,
      b
    ],
    tl: s.patches.contents
  };
  
}

function to_string(s) {
  var bs = $$Buffer.to_bytes(s.buf);
  List.iter((function (param) {
          return Caml_bytes.set(bs, param[0], param[1]);
        }), s.patches.contents);
  return Bytes.to_string(bs);
}

function encode(m) {
  var stream$1 = stream(undefined);
  var u8 = function (i) {
    var b = Char.chr(i & 255);
    return $$Buffer.add_char(stream$1.buf, b);
  };
  var u16 = function (i) {
    u8(i & 255);
    return u8((i >>> 8));
  };
  var u32 = function (i) {
    u16(i & 65535);
    return u16((i >> 16));
  };
  var vu64 = function (_i) {
    while(true) {
      var i = _i;
      var b = Caml_int64.to_int32(Caml_int64.and_(i, [
                0,
                127
              ]));
      if (Caml.i64_le(Caml_int64.zero, i) && Caml.i64_lt(i, [
              0,
              128
            ])) {
        return u8(b);
      }
      u8(b | 128);
      _i = Caml_int64.lsr_(i, 7);
      continue ;
    };
  };
  var vs64 = function (_i) {
    while(true) {
      var i = _i;
      var b = Caml_int64.to_int32(Caml_int64.and_(i, [
                0,
                127
              ]));
      if (Caml.i64_le([
              -1,
              4294967232
            ], i) && Caml.i64_lt(i, [
              0,
              64
            ])) {
        return u8(b);
      }
      u8(b | 128);
      _i = Caml_int64.asr_(i, 7);
      continue ;
    };
  };
  var vu32 = function (i) {
    return vu64(Caml_int64.and_(Caml_int64.of_int32(i), [
                    0,
                    4294967295
                  ]));
  };
  var len = function (i) {
    if (i !== i) {
      Curry._2(Code.error, Source.no_region, "cannot encode length with more than 32 bit");
    }
    return vu32(i);
  };
  var bool = function (b) {
    var i = b ? 1 : 0;
    return vu64(Caml_int64.and_(Caml_int64.of_int32(i), Caml_int64.one));
  };
  var string = function (bs) {
    len(bs.length);
    return $$Buffer.add_string(stream$1.buf, bs);
  };
  var vec = function (f, xs) {
    len(List.length(xs));
    return List.iter(f, xs);
  };
  var gap32 = function (param) {
    var p = $$Buffer.length(stream$1.buf);
    u32(0);
    u8(0);
    return p;
  };
  var patch_gap32 = function (p, n) {
    if (n > 268435455) {
      throw {
            RE_EXN_ID: "Assert_failure",
            _1: [
              "encode.ml",
              83,
              4
            ],
            Error: new Error()
          };
    }
    patch(stream$1, p, Char.chr((n | 128) & 255));
    patch(stream$1, p + 1 | 0, Char.chr(((n >>> 7) | 128) & 255));
    patch(stream$1, p + 2 | 0, Char.chr(((n >>> 14) | 128) & 255));
    patch(stream$1, p + 3 | 0, Char.chr(((n >>> 21) | 128) & 255));
    return patch(stream$1, p + 4 | 0, Char.chr((n >>> 28) & 255));
  };
  var ref_type = function (param) {
    if (param) {
      return vs64([
                  -1,
                  4294967279
                ]);
    } else {
      return vs64([
                  -1,
                  4294967280
                ]);
    }
  };
  var value_type = function (t) {
    switch (t.TAG | 0) {
      case /* NumType */0 :
          var param = t._0;
          switch (param) {
            case /* I32Type */0 :
                return vs64(Caml_int64.neg_one);
            case /* I64Type */1 :
                return vs64([
                            -1,
                            4294967294
                          ]);
            case /* F32Type */2 :
                return vs64([
                            -1,
                            4294967293
                          ]);
            case /* F64Type */3 :
                return vs64([
                            -1,
                            4294967292
                          ]);
            
          }
      case /* VecType */1 :
          return vs64([
                      -1,
                      4294967291
                    ]);
      case /* RefType */2 :
          return ref_type(t._0);
      
    }
  };
  var limits = function (vu, param) {
    var max = param.max;
    bool(max !== undefined);
    Curry._1(vu, param.min);
    return Lib.$$Option.app(vu, max);
  };
  var table_type = function (param) {
    ref_type(param._1);
    return limits(vu32, param._0);
  };
  var memory_type = function (lim) {
    return limits(vu32, lim._0);
  };
  var global_type = function (param) {
    value_type(param._0);
    var param$1 = param._1;
    if (param$1) {
      return u8(1);
    } else {
      return u8(0);
    }
  };
  var memop = function (param) {
    vu32(param.align);
    return vu32(param.offset);
  };
  var $$var = function (x) {
    return vu32(x.it);
  };
  var block_type = function (x) {
    if (x.TAG === /* VarBlockType */0) {
      return vs64(I64_convert.extend_i32_s(x._0.it));
    }
    var t = x._0;
    if (t !== undefined) {
      return value_type(t);
    } else {
      return vs64([
                  -1,
                  4294967232
                ]);
    }
  };
  var instr = function (e) {
    var x = e.it;
    if (typeof x === "number") {
      switch (x) {
        case /* Unreachable */0 :
            return u8(0);
        case /* Nop */1 :
            return u8(1);
        case /* Drop */2 :
            return u8(26);
        case /* Return */3 :
            return u8(15);
        case /* MemorySize */4 :
            u8(63);
            return u8(0);
        case /* MemoryGrow */5 :
            u8(64);
            return u8(0);
        case /* MemoryFill */6 :
            u8(252);
            vu32(11);
            return u8(0);
        case /* MemoryCopy */7 :
            u8(252);
            vu32(10);
            u8(0);
            return u8(0);
        case /* RefIsNull */8 :
            return u8(209);
        
      }
    } else {
      switch (x.TAG | 0) {
        case /* Select */0 :
            var ts = x._0;
            if (ts !== undefined) {
              u8(28);
              return vec(value_type, ts);
            } else {
              return u8(27);
            }
        case /* Block */1 :
            u8(2);
            block_type(x._0);
            List.iter(instr, x._1);
            return u8(11);
        case /* Loop */2 :
            u8(3);
            block_type(x._0);
            List.iter(instr, x._1);
            return u8(11);
        case /* If */3 :
            var es2 = x._2;
            u8(4);
            block_type(x._0);
            List.iter(instr, x._1);
            if (es2 !== /* [] */0) {
              u8(5);
            }
            List.iter(instr, es2);
            return u8(11);
        case /* Br */4 :
            u8(12);
            return vu32(x._0.it);
        case /* BrIf */5 :
            u8(13);
            return vu32(x._0.it);
        case /* BrTable */6 :
            u8(14);
            vec($$var, x._0);
            return vu32(x._1.it);
        case /* Call */7 :
            u8(16);
            return vu32(x._0.it);
        case /* CallIndirect */8 :
            u8(17);
            vu32(x._1.it);
            return vu32(x._0.it);
        case /* LocalGet */9 :
            u8(32);
            return vu32(x._0.it);
        case /* LocalSet */10 :
            u8(33);
            return vu32(x._0.it);
        case /* LocalTee */11 :
            u8(34);
            return vu32(x._0.it);
        case /* GlobalGet */12 :
            u8(35);
            return vu32(x._0.it);
        case /* GlobalSet */13 :
            u8(36);
            return vu32(x._0.it);
        case /* TableGet */14 :
            u8(37);
            return vu32(x._0.it);
        case /* TableSet */15 :
            u8(38);
            return vu32(x._0.it);
        case /* TableSize */16 :
            u8(252);
            vu32(16);
            return vu32(x._0.it);
        case /* TableGrow */17 :
            u8(252);
            vu32(15);
            return vu32(x._0.it);
        case /* TableFill */18 :
            u8(252);
            vu32(17);
            return vu32(x._0.it);
        case /* TableCopy */19 :
            u8(252);
            vu32(14);
            vu32(x._0.it);
            return vu32(x._1.it);
        case /* TableInit */20 :
            u8(252);
            vu32(12);
            vu32(x._1.it);
            return vu32(x._0.it);
        case /* ElemDrop */21 :
            u8(252);
            vu32(13);
            return vu32(x._0.it);
        case /* Load */22 :
            var mo = x._0;
            var exit = 0;
            switch (mo.ty) {
              case /* I32Type */0 :
                  var match = mo.pack;
                  if (match !== undefined) {
                    switch (match[0]) {
                      case /* Pack8 */0 :
                          if (match[1]) {
                            u8(45);
                            return memop(mo);
                          } else {
                            u8(44);
                            return memop(mo);
                          }
                      case /* Pack16 */1 :
                          if (match[1]) {
                            u8(47);
                            return memop(mo);
                          } else {
                            u8(46);
                            return memop(mo);
                          }
                      case /* Pack32 */2 :
                          throw {
                                RE_EXN_ID: "Assert_failure",
                                _1: [
                                  "encode.ml",
                                  204,
                                  6
                                ],
                                Error: new Error()
                              };
                      case /* Pack64 */3 :
                          exit = 2;
                          break;
                      
                    }
                  } else {
                    u8(40);
                    return memop(mo);
                  }
                  break;
              case /* I64Type */1 :
                  var match$1 = mo.pack;
                  if (match$1 !== undefined) {
                    switch (match$1[0]) {
                      case /* Pack8 */0 :
                          if (match$1[1]) {
                            u8(49);
                            return memop(mo);
                          } else {
                            u8(48);
                            return memop(mo);
                          }
                      case /* Pack16 */1 :
                          if (match$1[1]) {
                            u8(51);
                            return memop(mo);
                          } else {
                            u8(50);
                            return memop(mo);
                          }
                      case /* Pack32 */2 :
                          if (match$1[1]) {
                            u8(53);
                            return memop(mo);
                          } else {
                            u8(52);
                            return memop(mo);
                          }
                      case /* Pack64 */3 :
                          exit = 2;
                          break;
                      
                    }
                  } else {
                    u8(41);
                    return memop(mo);
                  }
                  break;
              case /* F32Type */2 :
                  if (mo.pack !== undefined) {
                    exit = 1;
                  } else {
                    u8(42);
                    return memop(mo);
                  }
                  break;
              case /* F64Type */3 :
                  if (mo.pack !== undefined) {
                    exit = 1;
                  } else {
                    u8(43);
                    return memop(mo);
                  }
                  break;
              
            }
            switch (exit) {
              case 1 :
                  throw {
                        RE_EXN_ID: "Assert_failure",
                        _1: [
                          "encode.ml",
                          218,
                          6
                        ],
                        Error: new Error()
                      };
              case 2 :
                  throw {
                        RE_EXN_ID: "Assert_failure",
                        _1: [
                          "encode.ml",
                          220,
                          6
                        ],
                        Error: new Error()
                      };
              
            }
            break;
        case /* Store */23 :
            var mo$1 = x._0;
            var exit$1 = 0;
            switch (mo$1.ty) {
              case /* I32Type */0 :
                  var match$2 = mo$1.pack;
                  if (match$2 !== undefined) {
                    switch (match$2) {
                      case /* Pack8 */0 :
                          u8(58);
                          return memop(mo$1);
                      case /* Pack16 */1 :
                          u8(59);
                          return memop(mo$1);
                      case /* Pack32 */2 :
                          throw {
                                RE_EXN_ID: "Assert_failure",
                                _1: [
                                  "encode.ml",
                                  228,
                                  53
                                ],
                                Error: new Error()
                              };
                      case /* Pack64 */3 :
                          exit$1 = 2;
                          break;
                      
                    }
                  } else {
                    u8(54);
                    return memop(mo$1);
                  }
                  break;
              case /* I64Type */1 :
                  var match$3 = mo$1.pack;
                  if (match$3 !== undefined) {
                    switch (match$3) {
                      case /* Pack8 */0 :
                          u8(60);
                          return memop(mo$1);
                      case /* Pack16 */1 :
                          u8(61);
                          return memop(mo$1);
                      case /* Pack32 */2 :
                          u8(62);
                          return memop(mo$1);
                      case /* Pack64 */3 :
                          exit$1 = 2;
                          break;
                      
                    }
                  } else {
                    u8(55);
                    return memop(mo$1);
                  }
                  break;
              case /* F32Type */2 :
                  if (mo$1.pack !== undefined) {
                    exit$1 = 1;
                  } else {
                    u8(56);
                    return memop(mo$1);
                  }
                  break;
              case /* F64Type */3 :
                  if (mo$1.pack !== undefined) {
                    exit$1 = 1;
                  } else {
                    u8(57);
                    return memop(mo$1);
                  }
                  break;
              
            }
            switch (exit$1) {
              case 1 :
                  throw {
                        RE_EXN_ID: "Assert_failure",
                        _1: [
                          "encode.ml",
                          232,
                          58
                        ],
                        Error: new Error()
                      };
              case 2 :
                  throw {
                        RE_EXN_ID: "Assert_failure",
                        _1: [
                          "encode.ml",
                          233,
                          65
                        ],
                        Error: new Error()
                      };
              
            }
            break;
        case /* VecLoad */24 :
            var mo$2 = x._0;
            var match$4 = mo$2.pack;
            if (match$4 !== undefined) {
              switch (match$4[0]) {
                case /* Pack8 */0 :
                    if (match$4[1] === 0) {
                      u8(253);
                      vu32(7);
                      return memop(mo$2);
                    }
                    break;
                case /* Pack16 */1 :
                    if (match$4[1] === 0) {
                      u8(253);
                      vu32(8);
                      return memop(mo$2);
                    }
                    break;
                case /* Pack32 */2 :
                    var match$5 = match$4[1];
                    if (typeof match$5 === "number") {
                      if (match$5 !== 0) {
                        u8(253);
                        vu32(92);
                        return memop(mo$2);
                      } else {
                        u8(253);
                        vu32(9);
                        return memop(mo$2);
                      }
                    }
                    break;
                case /* Pack64 */3 :
                    var match$6 = match$4[1];
                    if (typeof match$6 === "number") {
                      if (match$6 !== 0) {
                        u8(253);
                        vu32(93);
                        return memop(mo$2);
                      } else {
                        u8(253);
                        vu32(10);
                        return memop(mo$2);
                      }
                    }
                    switch (match$6._0) {
                      case /* Pack8x8 */0 :
                          if (match$6._1) {
                            u8(253);
                            vu32(2);
                            return memop(mo$2);
                          } else {
                            u8(253);
                            vu32(1);
                            return memop(mo$2);
                          }
                      case /* Pack16x4 */1 :
                          if (match$6._1) {
                            u8(253);
                            vu32(4);
                            return memop(mo$2);
                          } else {
                            u8(253);
                            vu32(3);
                            return memop(mo$2);
                          }
                      case /* Pack32x2 */2 :
                          if (match$6._1) {
                            u8(253);
                            vu32(6);
                            return memop(mo$2);
                          } else {
                            u8(253);
                            vu32(5);
                            return memop(mo$2);
                          }
                      
                    }
                
              }
            } else {
              u8(253);
              vu32(0);
              return memop(mo$2);
            }
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "encode.ml",
                    261,
                    19
                  ],
                  Error: new Error()
                };
        case /* VecStore */25 :
            u8(253);
            vu32(11);
            return memop(x._0);
        case /* VecLoadLane */26 :
            var match$7 = x._0;
            var mo$3 = match$7[0];
            switch (mo$3.pack) {
              case /* Pack8 */0 :
                  u8(253);
                  vu32(84);
                  memop(mo$3);
                  return u8(match$7[1]);
              case /* Pack16 */1 :
                  u8(253);
                  vu32(85);
                  memop(mo$3);
                  return u8(match$7[1]);
              case /* Pack32 */2 :
                  u8(253);
                  vu32(86);
                  memop(mo$3);
                  return u8(match$7[1]);
              case /* Pack64 */3 :
                  u8(253);
                  vu32(87);
                  memop(mo$3);
                  return u8(match$7[1]);
              
            }
        case /* VecStoreLane */27 :
            var match$8 = x._0;
            var mo$4 = match$8[0];
            switch (mo$4.pack) {
              case /* Pack8 */0 :
                  u8(253);
                  vu32(88);
                  memop(mo$4);
                  return u8(match$8[1]);
              case /* Pack16 */1 :
                  u8(253);
                  vu32(89);
                  memop(mo$4);
                  return u8(match$8[1]);
              case /* Pack32 */2 :
                  u8(253);
                  vu32(90);
                  memop(mo$4);
                  return u8(match$8[1]);
              case /* Pack64 */3 :
                  u8(253);
                  vu32(91);
                  memop(mo$4);
                  return u8(match$8[1]);
              
            }
        case /* MemoryInit */28 :
            u8(252);
            vu32(8);
            vu32(x._0.it);
            return u8(0);
        case /* DataDrop */29 :
            u8(252);
            vu32(9);
            return vu32(x._0.it);
        case /* RefNull */30 :
            u8(208);
            return ref_type(x._0);
        case /* RefFunc */31 :
            u8(210);
            return vu32(x._0.it);
        case /* Const */32 :
            var c = x._0.it;
            switch (c.TAG | 0) {
              case /* I32 */0 :
                  u8(65);
                  return vs64(Caml_int64.of_int32(c._0));
              case /* I64 */1 :
                  u8(66);
                  return vs64(c._0);
              case /* F32 */2 :
                  u8(67);
                  return u32(Curry._1(F32.to_bits, c._0));
              case /* F64 */3 :
                  u8(68);
                  var i = Curry._1(F64.to_bits, c._0);
                  u32(Caml_int64.to_int32(Caml_int64.and_(i, [
                                0,
                                4294967295
                              ])));
                  return u32(Caml_int64.to_int32(Caml_int64.asr_(i, 32)));
              
            }
        case /* Test */33 :
            switch (x._0.TAG | 0) {
              case /* I32 */0 :
                  return u8(69);
              case /* I64 */1 :
                  return u8(80);
              case /* F32 */2 :
              case /* F64 */3 :
                  throw {
                        RE_EXN_ID: "Assert_failure",
                        _1: [
                          "encode.ml",
                          301,
                          30
                        ],
                        Error: new Error()
                      };
              
            }
        case /* Compare */34 :
            var match$9 = x._0;
            switch (match$9.TAG | 0) {
              case /* I32 */0 :
                  switch (match$9._0) {
                    case /* Eq */0 :
                        return u8(70);
                    case /* Ne */1 :
                        return u8(71);
                    case /* LtS */2 :
                        return u8(72);
                    case /* LtU */3 :
                        return u8(73);
                    case /* GtS */4 :
                        return u8(74);
                    case /* GtU */5 :
                        return u8(75);
                    case /* LeS */6 :
                        return u8(76);
                    case /* LeU */7 :
                        return u8(77);
                    case /* GeS */8 :
                        return u8(78);
                    case /* GeU */9 :
                        return u8(79);
                    
                  }
              case /* I64 */1 :
                  switch (match$9._0) {
                    case /* Eq */0 :
                        return u8(81);
                    case /* Ne */1 :
                        return u8(82);
                    case /* LtS */2 :
                        return u8(83);
                    case /* LtU */3 :
                        return u8(84);
                    case /* GtS */4 :
                        return u8(85);
                    case /* GtU */5 :
                        return u8(86);
                    case /* LeS */6 :
                        return u8(87);
                    case /* LeU */7 :
                        return u8(88);
                    case /* GeS */8 :
                        return u8(89);
                    case /* GeU */9 :
                        return u8(90);
                    
                  }
              case /* F32 */2 :
                  switch (match$9._0) {
                    case /* Eq */0 :
                        return u8(91);
                    case /* Ne */1 :
                        return u8(92);
                    case /* Lt */2 :
                        return u8(93);
                    case /* Gt */3 :
                        return u8(94);
                    case /* Le */4 :
                        return u8(95);
                    case /* Ge */5 :
                        return u8(96);
                    
                  }
              case /* F64 */3 :
                  switch (match$9._0) {
                    case /* Eq */0 :
                        return u8(97);
                    case /* Ne */1 :
                        return u8(98);
                    case /* Lt */2 :
                        return u8(99);
                    case /* Gt */3 :
                        return u8(100);
                    case /* Le */4 :
                        return u8(101);
                    case /* Ge */5 :
                        return u8(102);
                    
                  }
              
            }
        case /* Unary */35 :
            var match$10 = x._0;
            switch (match$10.TAG | 0) {
              case /* I32 */0 :
                  var match$11 = match$10._0;
                  if (typeof match$11 === "number") {
                    switch (match$11) {
                      case /* Clz */0 :
                          return u8(103);
                      case /* Ctz */1 :
                          return u8(104);
                      case /* Popcnt */2 :
                          return u8(105);
                      
                    }
                  } else {
                    var match$12 = match$11._0;
                    if (match$12 === 1) {
                      return u8(193);
                    }
                    if (match$12 !== 0) {
                      throw {
                            RE_EXN_ID: "Assert_failure",
                            _1: [
                              "encode.ml",
                              344,
                              55
                            ],
                            Error: new Error()
                          };
                    }
                    return u8(192);
                  }
              case /* I64 */1 :
                  var match$13 = match$10._0;
                  if (typeof match$13 === "number") {
                    switch (match$13) {
                      case /* Clz */0 :
                          return u8(121);
                      case /* Ctz */1 :
                          return u8(122);
                      case /* Popcnt */2 :
                          return u8(123);
                      
                    }
                  } else {
                    switch (match$13._0) {
                      case /* Pack8 */0 :
                          return u8(194);
                      case /* Pack16 */1 :
                          return u8(195);
                      case /* Pack32 */2 :
                          return u8(196);
                      case /* Pack64 */3 :
                          throw {
                                RE_EXN_ID: "Assert_failure",
                                _1: [
                                  "encode.ml",
                                  352,
                                  44
                                ],
                                Error: new Error()
                              };
                      
                    }
                  }
              case /* F32 */2 :
                  switch (match$10._0) {
                    case /* Neg */0 :
                        return u8(140);
                    case /* Abs */1 :
                        return u8(139);
                    case /* Ceil */2 :
                        return u8(141);
                    case /* Floor */3 :
                        return u8(142);
                    case /* Trunc */4 :
                        return u8(143);
                    case /* Nearest */5 :
                        return u8(144);
                    case /* Sqrt */6 :
                        return u8(145);
                    
                  }
              case /* F64 */3 :
                  switch (match$10._0) {
                    case /* Neg */0 :
                        return u8(154);
                    case /* Abs */1 :
                        return u8(153);
                    case /* Ceil */2 :
                        return u8(155);
                    case /* Floor */3 :
                        return u8(156);
                    case /* Trunc */4 :
                        return u8(157);
                    case /* Nearest */5 :
                        return u8(158);
                    case /* Sqrt */6 :
                        return u8(159);
                    
                  }
              
            }
        case /* Binary */36 :
            var match$14 = x._0;
            switch (match$14.TAG | 0) {
              case /* I32 */0 :
                  switch (match$14._0) {
                    case /* Add */0 :
                        return u8(106);
                    case /* Sub */1 :
                        return u8(107);
                    case /* Mul */2 :
                        return u8(108);
                    case /* DivS */3 :
                        return u8(109);
                    case /* DivU */4 :
                        return u8(110);
                    case /* RemS */5 :
                        return u8(111);
                    case /* RemU */6 :
                        return u8(112);
                    case /* And */7 :
                        return u8(113);
                    case /* Or */8 :
                        return u8(114);
                    case /* Xor */9 :
                        return u8(115);
                    case /* Shl */10 :
                        return u8(116);
                    case /* ShrS */11 :
                        return u8(117);
                    case /* ShrU */12 :
                        return u8(118);
                    case /* Rotl */13 :
                        return u8(119);
                    case /* Rotr */14 :
                        return u8(120);
                    
                  }
              case /* I64 */1 :
                  switch (match$14._0) {
                    case /* Add */0 :
                        return u8(124);
                    case /* Sub */1 :
                        return u8(125);
                    case /* Mul */2 :
                        return u8(126);
                    case /* DivS */3 :
                        return u8(127);
                    case /* DivU */4 :
                        return u8(128);
                    case /* RemS */5 :
                        return u8(129);
                    case /* RemU */6 :
                        return u8(130);
                    case /* And */7 :
                        return u8(131);
                    case /* Or */8 :
                        return u8(132);
                    case /* Xor */9 :
                        return u8(133);
                    case /* Shl */10 :
                        return u8(134);
                    case /* ShrS */11 :
                        return u8(135);
                    case /* ShrU */12 :
                        return u8(136);
                    case /* Rotl */13 :
                        return u8(137);
                    case /* Rotr */14 :
                        return u8(138);
                    
                  }
              case /* F32 */2 :
                  switch (match$14._0) {
                    case /* Add */0 :
                        return u8(146);
                    case /* Sub */1 :
                        return u8(147);
                    case /* Mul */2 :
                        return u8(148);
                    case /* Div */3 :
                        return u8(149);
                    case /* Min */4 :
                        return u8(150);
                    case /* Max */5 :
                        return u8(151);
                    case /* CopySign */6 :
                        return u8(152);
                    
                  }
              case /* F64 */3 :
                  switch (match$14._0) {
                    case /* Add */0 :
                        return u8(160);
                    case /* Sub */1 :
                        return u8(161);
                    case /* Mul */2 :
                        return u8(162);
                    case /* Div */3 :
                        return u8(163);
                    case /* Min */4 :
                        return u8(164);
                    case /* Max */5 :
                        return u8(165);
                    case /* CopySign */6 :
                        return u8(166);
                    
                  }
              
            }
        case /* Convert */37 :
            var match$15 = x._0;
            switch (match$15.TAG | 0) {
              case /* I32 */0 :
                  switch (match$15._0) {
                    case /* ExtendSI32 */0 :
                        throw {
                              RE_EXN_ID: "Assert_failure",
                              _1: [
                                "encode.ml",
                                418,
                                40
                              ],
                              Error: new Error()
                            };
                    case /* ExtendUI32 */1 :
                        throw {
                              RE_EXN_ID: "Assert_failure",
                              _1: [
                                "encode.ml",
                                419,
                                40
                              ],
                              Error: new Error()
                            };
                    case /* WrapI64 */2 :
                        return u8(167);
                    case /* TruncSF32 */3 :
                        return u8(168);
                    case /* TruncUF32 */4 :
                        return u8(169);
                    case /* TruncSF64 */5 :
                        return u8(170);
                    case /* TruncUF64 */6 :
                        return u8(171);
                    case /* TruncSatSF32 */7 :
                        u8(252);
                        return vu32(0);
                    case /* TruncSatUF32 */8 :
                        u8(252);
                        return vu32(1);
                    case /* TruncSatSF64 */9 :
                        u8(252);
                        return vu32(2);
                    case /* TruncSatUF64 */10 :
                        u8(252);
                        return vu32(3);
                    case /* ReinterpretFloat */11 :
                        return u8(188);
                    
                  }
              case /* I64 */1 :
                  switch (match$15._0) {
                    case /* ExtendSI32 */0 :
                        return u8(172);
                    case /* ExtendUI32 */1 :
                        return u8(173);
                    case /* WrapI64 */2 :
                        throw {
                              RE_EXN_ID: "Assert_failure",
                              _1: [
                                "encode.ml",
                                433,
                                37
                              ],
                              Error: new Error()
                            };
                    case /* TruncSF32 */3 :
                        return u8(174);
                    case /* TruncUF32 */4 :
                        return u8(175);
                    case /* TruncSF64 */5 :
                        return u8(176);
                    case /* TruncUF64 */6 :
                        return u8(177);
                    case /* TruncSatSF32 */7 :
                        u8(252);
                        return vu32(4);
                    case /* TruncSatUF32 */8 :
                        u8(252);
                        return vu32(5);
                    case /* TruncSatSF64 */9 :
                        u8(252);
                        return vu32(6);
                    case /* TruncSatUF64 */10 :
                        u8(252);
                        return vu32(7);
                    case /* ReinterpretFloat */11 :
                        return u8(189);
                    
                  }
              case /* F32 */2 :
                  switch (match$15._0) {
                    case /* ConvertSI32 */0 :
                        return u8(178);
                    case /* ConvertUI32 */1 :
                        return u8(179);
                    case /* ConvertSI64 */2 :
                        return u8(180);
                    case /* ConvertUI64 */3 :
                        return u8(181);
                    case /* PromoteF32 */4 :
                        throw {
                              RE_EXN_ID: "Assert_failure",
                              _1: [
                                "encode.ml",
                                448,
                                40
                              ],
                              Error: new Error()
                            };
                    case /* DemoteF64 */5 :
                        return u8(182);
                    case /* ReinterpretInt */6 :
                        return u8(190);
                    
                  }
              case /* F64 */3 :
                  switch (match$15._0) {
                    case /* ConvertSI32 */0 :
                        return u8(183);
                    case /* ConvertUI32 */1 :
                        return u8(184);
                    case /* ConvertSI64 */2 :
                        return u8(185);
                    case /* ConvertUI64 */3 :
                        return u8(186);
                    case /* PromoteF32 */4 :
                        return u8(187);
                    case /* DemoteF64 */5 :
                        throw {
                              RE_EXN_ID: "Assert_failure",
                              _1: [
                                "encode.ml",
                                457,
                                39
                              ],
                              Error: new Error()
                            };
                    case /* ReinterpretInt */6 :
                        return u8(191);
                    
                  }
              
            }
        case /* VecConst */38 :
            u8(253);
            vu32(12);
            var v = x._0.it._0;
            return $$String.iter((function (param) {
                          return $$Buffer.add_char(stream$1.buf, param);
                        }), V128.to_bits(v));
        case /* VecTest */39 :
            switch (x._0._0.TAG | 0) {
              case /* I8x16 */0 :
                  u8(253);
                  return vu32(99);
              case /* I16x8 */1 :
                  u8(253);
                  return vu32(131);
              case /* I32x4 */2 :
                  u8(253);
                  return vu32(163);
              case /* I64x2 */3 :
                  u8(253);
                  return vu32(195);
              case /* F32x4 */4 :
              case /* F64x2 */5 :
                  throw {
                        RE_EXN_ID: "Assert_failure",
                        _1: [
                          "encode.ml",
                          466,
                          26
                        ],
                        Error: new Error()
                      };
              
            }
        case /* VecCompare */40 :
            var match$16 = x._0._0;
            switch (match$16.TAG | 0) {
              case /* I8x16 */0 :
                  switch (match$16._0) {
                    case /* Eq */0 :
                        u8(253);
                        return vu32(35);
                    case /* Ne */1 :
                        u8(253);
                        return vu32(36);
                    case /* LtS */2 :
                        u8(253);
                        return vu32(37);
                    case /* LtU */3 :
                        u8(253);
                        return vu32(38);
                    case /* LeS */4 :
                        u8(253);
                        return vu32(41);
                    case /* LeU */5 :
                        u8(253);
                        return vu32(42);
                    case /* GtS */6 :
                        u8(253);
                        return vu32(39);
                    case /* GtU */7 :
                        u8(253);
                        return vu32(40);
                    case /* GeS */8 :
                        u8(253);
                        return vu32(43);
                    case /* GeU */9 :
                        u8(253);
                        return vu32(44);
                    
                  }
              case /* I16x8 */1 :
                  switch (match$16._0) {
                    case /* Eq */0 :
                        u8(253);
                        return vu32(45);
                    case /* Ne */1 :
                        u8(253);
                        return vu32(46);
                    case /* LtS */2 :
                        u8(253);
                        return vu32(47);
                    case /* LtU */3 :
                        u8(253);
                        return vu32(48);
                    case /* LeS */4 :
                        u8(253);
                        return vu32(51);
                    case /* LeU */5 :
                        u8(253);
                        return vu32(52);
                    case /* GtS */6 :
                        u8(253);
                        return vu32(49);
                    case /* GtU */7 :
                        u8(253);
                        return vu32(50);
                    case /* GeS */8 :
                        u8(253);
                        return vu32(53);
                    case /* GeU */9 :
                        u8(253);
                        return vu32(54);
                    
                  }
              case /* I32x4 */2 :
                  switch (match$16._0) {
                    case /* Eq */0 :
                        u8(253);
                        return vu32(55);
                    case /* Ne */1 :
                        u8(253);
                        return vu32(56);
                    case /* LtS */2 :
                        u8(253);
                        return vu32(57);
                    case /* LtU */3 :
                        u8(253);
                        return vu32(58);
                    case /* LeS */4 :
                        u8(253);
                        return vu32(61);
                    case /* LeU */5 :
                        u8(253);
                        return vu32(62);
                    case /* GtS */6 :
                        u8(253);
                        return vu32(59);
                    case /* GtU */7 :
                        u8(253);
                        return vu32(60);
                    case /* GeS */8 :
                        u8(253);
                        return vu32(63);
                    case /* GeU */9 :
                        u8(253);
                        return vu32(64);
                    
                  }
              case /* I64x2 */3 :
                  switch (match$16._0) {
                    case /* Eq */0 :
                        u8(253);
                        return vu32(214);
                    case /* Ne */1 :
                        u8(253);
                        return vu32(215);
                    case /* LtS */2 :
                        u8(253);
                        return vu32(216);
                    case /* LtU */3 :
                        throw {
                              RE_EXN_ID: "Assert_failure",
                              _1: [
                                "encode.ml",
                                528,
                                46
                              ],
                              Error: new Error()
                            };
                    case /* LeS */4 :
                        u8(253);
                        return vu32(218);
                    case /* LeU */5 :
                        throw {
                              RE_EXN_ID: "Assert_failure",
                              _1: [
                                "encode.ml",
                                532,
                                46
                              ],
                              Error: new Error()
                            };
                    case /* GtS */6 :
                        u8(253);
                        return vu32(217);
                    case /* GtU */7 :
                        throw {
                              RE_EXN_ID: "Assert_failure",
                              _1: [
                                "encode.ml",
                                530,
                                46
                              ],
                              Error: new Error()
                            };
                    case /* GeS */8 :
                        u8(253);
                        return vu32(219);
                    case /* GeU */9 :
                        throw {
                              RE_EXN_ID: "Assert_failure",
                              _1: [
                                "encode.ml",
                                534,
                                46
                              ],
                              Error: new Error()
                            };
                    
                  }
              case /* F32x4 */4 :
                  switch (match$16._0) {
                    case /* Eq */0 :
                        u8(253);
                        return vu32(65);
                    case /* Ne */1 :
                        u8(253);
                        return vu32(66);
                    case /* Lt */2 :
                        u8(253);
                        return vu32(67);
                    case /* Le */3 :
                        u8(253);
                        return vu32(69);
                    case /* Gt */4 :
                        u8(253);
                        return vu32(68);
                    case /* Ge */5 :
                        u8(253);
                        return vu32(70);
                    
                  }
              case /* F64x2 */5 :
                  switch (match$16._0) {
                    case /* Eq */0 :
                        u8(253);
                        return vu32(71);
                    case /* Ne */1 :
                        u8(253);
                        return vu32(72);
                    case /* Lt */2 :
                        u8(253);
                        return vu32(73);
                    case /* Le */3 :
                        u8(253);
                        return vu32(75);
                    case /* Gt */4 :
                        u8(253);
                        return vu32(74);
                    case /* Ge */5 :
                        u8(253);
                        return vu32(76);
                    
                  }
              
            }
        case /* VecUnary */41 :
            var match$17 = x._0._0;
            switch (match$17.TAG | 0) {
              case /* I8x16 */0 :
                  switch (match$17._0) {
                    case /* Abs */0 :
                        u8(253);
                        return vu32(96);
                    case /* Neg */1 :
                        u8(253);
                        return vu32(97);
                    case /* Popcnt */2 :
                        u8(253);
                        return vu32(98);
                    
                  }
              case /* I16x8 */1 :
                  switch (match$17._0) {
                    case /* Abs */0 :
                        u8(253);
                        return vu32(128);
                    case /* Neg */1 :
                        u8(253);
                        return vu32(129);
                    case /* Popcnt */2 :
                        throw {
                              RE_EXN_ID: "Assert_failure",
                              _1: [
                                "encode.ml",
                                473,
                                47
                              ],
                              Error: new Error()
                            };
                    
                  }
              case /* I32x4 */2 :
                  switch (match$17._0) {
                    case /* Abs */0 :
                        u8(253);
                        return vu32(160);
                    case /* Neg */1 :
                        u8(253);
                        return vu32(161);
                    case /* Popcnt */2 :
                        throw {
                              RE_EXN_ID: "Assert_failure",
                              _1: [
                                "encode.ml",
                                476,
                                47
                              ],
                              Error: new Error()
                            };
                    
                  }
              case /* I64x2 */3 :
                  switch (match$17._0) {
                    case /* Abs */0 :
                        u8(253);
                        return vu32(192);
                    case /* Neg */1 :
                        u8(253);
                        return vu32(193);
                    case /* Popcnt */2 :
                        throw {
                              RE_EXN_ID: "Assert_failure",
                              _1: [
                                "encode.ml",
                                479,
                                47
                              ],
                              Error: new Error()
                            };
                    
                  }
              case /* F32x4 */4 :
                  switch (match$17._0) {
                    case /* Abs */0 :
                        u8(253);
                        return vu32(224);
                    case /* Neg */1 :
                        u8(253);
                        return vu32(225);
                    case /* Sqrt */2 :
                        u8(253);
                        return vu32(227);
                    case /* Ceil */3 :
                        u8(253);
                        return vu32(103);
                    case /* Floor */4 :
                        u8(253);
                        return vu32(104);
                    case /* Trunc */5 :
                        u8(253);
                        return vu32(105);
                    case /* Nearest */6 :
                        u8(253);
                        return vu32(106);
                    
                  }
              case /* F64x2 */5 :
                  switch (match$17._0) {
                    case /* Abs */0 :
                        u8(253);
                        return vu32(236);
                    case /* Neg */1 :
                        u8(253);
                        return vu32(237);
                    case /* Sqrt */2 :
                        u8(253);
                        return vu32(239);
                    case /* Ceil */3 :
                        u8(253);
                        return vu32(116);
                    case /* Floor */4 :
                        u8(253);
                        return vu32(117);
                    case /* Trunc */5 :
                        u8(253);
                        return vu32(122);
                    case /* Nearest */6 :
                        u8(253);
                        return vu32(148);
                    
                  }
              
            }
        case /* VecBinary */42 :
            var match$18 = x._0._0;
            switch (match$18.TAG | 0) {
              case /* I8x16 */0 :
                  var is = match$18._0;
                  if (typeof is === "number") {
                    switch (is) {
                      case /* Add */0 :
                          u8(253);
                          return vu32(110);
                      case /* Sub */1 :
                          u8(253);
                          return vu32(113);
                      case /* MinS */3 :
                          u8(253);
                          return vu32(118);
                      case /* MinU */4 :
                          u8(253);
                          return vu32(119);
                      case /* MaxS */5 :
                          u8(253);
                          return vu32(120);
                      case /* MaxU */6 :
                          u8(253);
                          return vu32(121);
                      case /* AvgrU */7 :
                          u8(253);
                          return vu32(123);
                      case /* AddSatS */8 :
                          u8(253);
                          return vu32(111);
                      case /* AddSatU */9 :
                          u8(253);
                          return vu32(112);
                      case /* SubSatS */10 :
                          u8(253);
                          return vu32(114);
                      case /* SubSatU */11 :
                          u8(253);
                          return vu32(115);
                      case /* Mul */2 :
                      case /* DotS */12 :
                      case /* Q15MulRSatS */13 :
                      case /* ExtMulLowS */14 :
                      case /* ExtMulHighS */15 :
                      case /* ExtMulLowU */16 :
                      case /* ExtMulHighU */17 :
                          break;
                      case /* Swizzle */18 :
                          u8(253);
                          return vu32(14);
                      case /* NarrowS */19 :
                          u8(253);
                          return vu32(101);
                      case /* NarrowU */20 :
                          u8(253);
                          return vu32(102);
                      
                    }
                  } else {
                    u8(253);
                    vu32(13);
                    return List.iter(u8, is._0);
                  }
                  break;
              case /* I16x8 */1 :
                  var match$19 = match$18._0;
                  if (typeof match$19 === "number") {
                    switch (match$19) {
                      case /* Add */0 :
                          u8(253);
                          return vu32(142);
                      case /* Sub */1 :
                          u8(253);
                          return vu32(145);
                      case /* Mul */2 :
                          u8(253);
                          return vu32(149);
                      case /* MinS */3 :
                          u8(253);
                          return vu32(150);
                      case /* MinU */4 :
                          u8(253);
                          return vu32(151);
                      case /* MaxS */5 :
                          u8(253);
                          return vu32(152);
                      case /* MaxU */6 :
                          u8(253);
                          return vu32(153);
                      case /* AvgrU */7 :
                          u8(253);
                          return vu32(155);
                      case /* AddSatS */8 :
                          u8(253);
                          return vu32(143);
                      case /* AddSatU */9 :
                          u8(253);
                          return vu32(144);
                      case /* SubSatS */10 :
                          u8(253);
                          return vu32(146);
                      case /* SubSatU */11 :
                          u8(253);
                          return vu32(147);
                      case /* Q15MulRSatS */13 :
                          u8(253);
                          return vu32(130);
                      case /* ExtMulLowS */14 :
                          u8(253);
                          return vu32(156);
                      case /* ExtMulHighS */15 :
                          u8(253);
                          return vu32(157);
                      case /* ExtMulLowU */16 :
                          u8(253);
                          return vu32(158);
                      case /* ExtMulHighU */17 :
                          u8(253);
                          return vu32(159);
                      case /* DotS */12 :
                      case /* Swizzle */18 :
                          break;
                      case /* NarrowS */19 :
                          u8(253);
                          return vu32(133);
                      case /* NarrowU */20 :
                          u8(253);
                          return vu32(134);
                      
                    }
                  }
                  break;
              case /* I32x4 */2 :
                  var match$20 = match$18._0;
                  if (typeof match$20 === "number") {
                    switch (match$20) {
                      case /* Add */0 :
                          u8(253);
                          return vu32(174);
                      case /* Sub */1 :
                          u8(253);
                          return vu32(177);
                      case /* Mul */2 :
                          u8(253);
                          return vu32(181);
                      case /* MinS */3 :
                          u8(253);
                          return vu32(182);
                      case /* MinU */4 :
                          u8(253);
                          return vu32(183);
                      case /* MaxS */5 :
                          u8(253);
                          return vu32(184);
                      case /* MaxU */6 :
                          u8(253);
                          return vu32(185);
                      case /* DotS */12 :
                          u8(253);
                          return vu32(186);
                      case /* ExtMulLowS */14 :
                          u8(253);
                          return vu32(188);
                      case /* ExtMulHighS */15 :
                          u8(253);
                          return vu32(189);
                      case /* ExtMulLowU */16 :
                          u8(253);
                          return vu32(190);
                      case /* ExtMulHighU */17 :
                          u8(253);
                          return vu32(191);
                      case /* AvgrU */7 :
                      case /* AddSatS */8 :
                      case /* AddSatU */9 :
                      case /* SubSatS */10 :
                      case /* SubSatU */11 :
                      case /* Q15MulRSatS */13 :
                      case /* Swizzle */18 :
                      case /* NarrowS */19 :
                      case /* NarrowU */20 :
                          break;
                      
                    }
                  }
                  break;
              case /* I64x2 */3 :
                  var match$21 = match$18._0;
                  if (typeof match$21 === "number") {
                    switch (match$21) {
                      case /* Add */0 :
                          u8(253);
                          return vu32(206);
                      case /* Sub */1 :
                          u8(253);
                          return vu32(209);
                      case /* Mul */2 :
                          u8(253);
                          return vu32(213);
                      case /* ExtMulLowS */14 :
                          u8(253);
                          return vu32(220);
                      case /* ExtMulHighS */15 :
                          u8(253);
                          return vu32(221);
                      case /* ExtMulLowU */16 :
                          u8(253);
                          return vu32(222);
                      case /* ExtMulHighU */17 :
                          u8(253);
                          return vu32(223);
                      case /* MinS */3 :
                      case /* MinU */4 :
                      case /* MaxS */5 :
                      case /* MaxU */6 :
                      case /* AvgrU */7 :
                      case /* AddSatS */8 :
                      case /* AddSatU */9 :
                      case /* SubSatS */10 :
                      case /* SubSatU */11 :
                      case /* DotS */12 :
                      case /* Q15MulRSatS */13 :
                      case /* Swizzle */18 :
                      case /* NarrowS */19 :
                      case /* NarrowU */20 :
                          break;
                      
                    }
                  }
                  break;
              case /* F32x4 */4 :
                  switch (match$18._0) {
                    case /* Add */0 :
                        u8(253);
                        return vu32(228);
                    case /* Sub */1 :
                        u8(253);
                        return vu32(229);
                    case /* Mul */2 :
                        u8(253);
                        return vu32(230);
                    case /* Div */3 :
                        u8(253);
                        return vu32(231);
                    case /* Min */4 :
                        u8(253);
                        return vu32(232);
                    case /* Max */5 :
                        u8(253);
                        return vu32(233);
                    case /* Pmin */6 :
                        u8(253);
                        return vu32(234);
                    case /* Pmax */7 :
                        u8(253);
                        return vu32(235);
                    
                  }
              case /* F64x2 */5 :
                  switch (match$18._0) {
                    case /* Add */0 :
                        u8(253);
                        return vu32(240);
                    case /* Sub */1 :
                        u8(253);
                        return vu32(241);
                    case /* Mul */2 :
                        u8(253);
                        return vu32(242);
                    case /* Div */3 :
                        u8(253);
                        return vu32(243);
                    case /* Min */4 :
                        u8(253);
                        return vu32(244);
                    case /* Max */5 :
                        u8(253);
                        return vu32(245);
                    case /* Pmin */6 :
                        u8(253);
                        return vu32(246);
                    case /* Pmax */7 :
                        u8(253);
                        return vu32(247);
                    
                  }
              
            }
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "encode.ml",
                    617,
                    28
                  ],
                  Error: new Error()
                };
        case /* VecConvert */43 :
            var match$22 = x._0._0;
            switch (match$22.TAG | 0) {
              case /* I8x16 */0 :
                  throw {
                        RE_EXN_ID: "Assert_failure",
                        _1: [
                          "encode.ml",
                          619,
                          37
                        ],
                        Error: new Error()
                      };
              case /* I16x8 */1 :
                  switch (match$22._0) {
                    case /* ExtendLowS */0 :
                        u8(253);
                        return vu32(135);
                    case /* ExtendLowU */1 :
                        u8(253);
                        return vu32(137);
                    case /* ExtendHighS */2 :
                        u8(253);
                        return vu32(136);
                    case /* ExtendHighU */3 :
                        u8(253);
                        return vu32(138);
                    case /* ExtAddPairwiseS */4 :
                        u8(253);
                        return vu32(124);
                    case /* ExtAddPairwiseU */5 :
                        u8(253);
                        return vu32(125);
                    case /* TruncSatSF32x4 */6 :
                    case /* TruncSatUF32x4 */7 :
                    case /* TruncSatSZeroF64x2 */8 :
                    case /* TruncSatUZeroF64x2 */9 :
                        break;
                    
                  }
                  throw {
                        RE_EXN_ID: "Assert_failure",
                        _1: [
                          "encode.ml",
                          626,
                          37
                        ],
                        Error: new Error()
                      };
              case /* I32x4 */2 :
                  switch (match$22._0) {
                    case /* ExtendLowS */0 :
                        u8(253);
                        return vu32(167);
                    case /* ExtendLowU */1 :
                        u8(253);
                        return vu32(169);
                    case /* ExtendHighS */2 :
                        u8(253);
                        return vu32(168);
                    case /* ExtendHighU */3 :
                        u8(253);
                        return vu32(170);
                    case /* ExtAddPairwiseS */4 :
                        u8(253);
                        return vu32(126);
                    case /* ExtAddPairwiseU */5 :
                        u8(253);
                        return vu32(127);
                    case /* TruncSatSF32x4 */6 :
                        u8(253);
                        return vu32(248);
                    case /* TruncSatUF32x4 */7 :
                        u8(253);
                        return vu32(249);
                    case /* TruncSatSZeroF64x2 */8 :
                        u8(253);
                        return vu32(252);
                    case /* TruncSatUZeroF64x2 */9 :
                        u8(253);
                        return vu32(253);
                    
                  }
              case /* I64x2 */3 :
                  switch (match$22._0) {
                    case /* ExtendLowS */0 :
                        u8(253);
                        return vu32(199);
                    case /* ExtendLowU */1 :
                        u8(253);
                        return vu32(201);
                    case /* ExtendHighS */2 :
                        u8(253);
                        return vu32(200);
                    case /* ExtendHighU */3 :
                        u8(253);
                        return vu32(202);
                    case /* ExtAddPairwiseS */4 :
                    case /* ExtAddPairwiseU */5 :
                    case /* TruncSatSF32x4 */6 :
                    case /* TruncSatUF32x4 */7 :
                    case /* TruncSatSZeroF64x2 */8 :
                    case /* TruncSatUZeroF64x2 */9 :
                        break;
                    
                  }
                  throw {
                        RE_EXN_ID: "Assert_failure",
                        _1: [
                          "encode.ml",
                          641,
                          37
                        ],
                        Error: new Error()
                      };
              case /* F32x4 */4 :
                  switch (match$22._0) {
                    case /* DemoteZeroF64x2 */0 :
                        u8(253);
                        return vu32(94);
                    case /* PromoteLowF32x4 */1 :
                        throw {
                              RE_EXN_ID: "Assert_failure",
                              _1: [
                                "encode.ml",
                                643,
                                58
                              ],
                              Error: new Error()
                            };
                    case /* ConvertSI32x4 */2 :
                        u8(253);
                        return vu32(250);
                    case /* ConvertUI32x4 */3 :
                        u8(253);
                        return vu32(251);
                    
                  }
              case /* F64x2 */5 :
                  switch (match$22._0) {
                    case /* DemoteZeroF64x2 */0 :
                        throw {
                              RE_EXN_ID: "Assert_failure",
                              _1: [
                                "encode.ml",
                                646,
                                58
                              ],
                              Error: new Error()
                            };
                    case /* PromoteLowF32x4 */1 :
                        u8(253);
                        return vu32(95);
                    case /* ConvertSI32x4 */2 :
                        u8(253);
                        return vu32(254);
                    case /* ConvertUI32x4 */3 :
                        u8(253);
                        return vu32(255);
                    
                  }
              
            }
            break;
        case /* VecShift */44 :
            var match$23 = x._0._0;
            switch (match$23.TAG | 0) {
              case /* I8x16 */0 :
                  switch (match$23._0) {
                    case /* Shl */0 :
                        u8(253);
                        return vu32(107);
                    case /* ShrS */1 :
                        u8(253);
                        return vu32(108);
                    case /* ShrU */2 :
                        u8(253);
                        return vu32(109);
                    
                  }
              case /* I16x8 */1 :
                  switch (match$23._0) {
                    case /* Shl */0 :
                        u8(253);
                        return vu32(139);
                    case /* ShrS */1 :
                        u8(253);
                        return vu32(140);
                    case /* ShrU */2 :
                        u8(253);
                        return vu32(141);
                    
                  }
              case /* I32x4 */2 :
                  switch (match$23._0) {
                    case /* Shl */0 :
                        u8(253);
                        return vu32(171);
                    case /* ShrS */1 :
                        u8(253);
                        return vu32(172);
                    case /* ShrU */2 :
                        u8(253);
                        return vu32(173);
                    
                  }
              case /* I64x2 */3 :
                  switch (match$23._0) {
                    case /* Shl */0 :
                        u8(253);
                        return vu32(203);
                    case /* ShrS */1 :
                        u8(253);
                        return vu32(204);
                    case /* ShrU */2 :
                        u8(253);
                        return vu32(205);
                    
                  }
              case /* F32x4 */4 :
              case /* F64x2 */5 :
                  throw {
                        RE_EXN_ID: "Assert_failure",
                        _1: [
                          "encode.ml",
                          663,
                          27
                        ],
                        Error: new Error()
                      };
              
            }
        case /* VecBitmask */45 :
            switch (x._0._0.TAG | 0) {
              case /* I8x16 */0 :
                  u8(253);
                  return vu32(100);
              case /* I16x8 */1 :
                  u8(253);
                  return vu32(132);
              case /* I32x4 */2 :
                  u8(253);
                  return vu32(164);
              case /* I64x2 */3 :
                  u8(253);
                  return vu32(196);
              case /* F32x4 */4 :
              case /* F64x2 */5 :
                  throw {
                        RE_EXN_ID: "Assert_failure",
                        _1: [
                          "encode.ml",
                          669,
                          29
                        ],
                        Error: new Error()
                      };
              
            }
        case /* VecTestBits */46 :
            u8(253);
            return vu32(83);
        case /* VecUnaryBits */47 :
            u8(253);
            return vu32(77);
        case /* VecBinaryBits */48 :
            switch (x._0._0) {
              case /* And */0 :
                  u8(253);
                  return vu32(78);
              case /* Or */1 :
                  u8(253);
                  return vu32(80);
              case /* Xor */2 :
                  u8(253);
                  return vu32(81);
              case /* AndNot */3 :
                  u8(253);
                  return vu32(79);
              
            }
        case /* VecTernaryBits */49 :
            u8(253);
            return vu32(82);
        case /* VecSplat */50 :
            switch (x._0._0.TAG | 0) {
              case /* I8x16 */0 :
                  u8(253);
                  return vu32(15);
              case /* I16x8 */1 :
                  u8(253);
                  return vu32(16);
              case /* I32x4 */2 :
                  u8(253);
                  return vu32(17);
              case /* I64x2 */3 :
                  u8(253);
                  return vu32(18);
              case /* F32x4 */4 :
                  u8(253);
                  return vu32(19);
              case /* F64x2 */5 :
                  u8(253);
                  return vu32(20);
              
            }
        case /* VecExtract */51 :
            var match$24 = x._0._0;
            switch (match$24.TAG | 0) {
              case /* I8x16 */0 :
                  var match$25 = match$24._0;
                  var i$1 = match$25._0;
                  if (match$25._1) {
                    u8(253);
                    vu32(22);
                    return u8(i$1);
                  } else {
                    u8(253);
                    vu32(21);
                    return u8(i$1);
                  }
              case /* I16x8 */1 :
                  var match$26 = match$24._0;
                  var i$2 = match$26._0;
                  if (match$26._1) {
                    u8(253);
                    vu32(25);
                    return u8(i$2);
                  } else {
                    u8(253);
                    vu32(24);
                    return u8(i$2);
                  }
              case /* I32x4 */2 :
                  u8(253);
                  vu32(27);
                  return u8(match$24._0._0);
              case /* I64x2 */3 :
                  u8(253);
                  vu32(29);
                  return u8(match$24._0._0);
              case /* F32x4 */4 :
                  u8(253);
                  vu32(31);
                  return u8(match$24._0._0);
              case /* F64x2 */5 :
                  u8(253);
                  vu32(33);
                  return u8(match$24._0._0);
              
            }
        case /* VecReplace */52 :
            var match$27 = x._0._0;
            switch (match$27.TAG | 0) {
              case /* I8x16 */0 :
                  u8(253);
                  vu32(23);
                  return u8(match$27._0._0);
              case /* I16x8 */1 :
                  u8(253);
                  vu32(26);
                  return u8(match$27._0._0);
              case /* I32x4 */2 :
                  u8(253);
                  vu32(28);
                  return u8(match$27._0._0);
              case /* I64x2 */3 :
                  u8(253);
                  vu32(30);
                  return u8(match$27._0._0);
              case /* F32x4 */4 :
                  u8(253);
                  vu32(32);
                  return u8(match$27._0._0);
              case /* F64x2 */5 :
                  u8(253);
                  vu32(34);
                  return u8(match$27._0._0);
              
            }
        
      }
    }
  };
  var $$const = function (c) {
    List.iter(instr, c.it);
    return u8(11);
  };
  var section = function (id, f, x, needed) {
    if (!needed) {
      return ;
    }
    u8(id);
    var g = gap32(undefined);
    var p = $$Buffer.length(stream$1.buf);
    Curry._1(f, x);
    return patch_gap32(g, $$Buffer.length(stream$1.buf) - p | 0);
  };
  var type_ = function (t) {
    var param = t.it;
    vs64([
          -1,
          4294967264
        ]);
    vec(value_type, param._0);
    return vec(value_type, param._1);
  };
  var type_section = function (ts) {
    return section(1, (function (param) {
                  return vec(type_, param);
                }), ts, ts !== /* [] */0);
  };
  var $$import = function (im) {
    var match = im.it;
    string(Utf8.encode(match.module_name));
    string(Utf8.encode(match.item_name));
    var d = match.idesc;
    var x = d.it;
    switch (x.TAG | 0) {
      case /* FuncImport */0 :
          u8(0);
          return vu32(x._0.it);
      case /* TableImport */1 :
          u8(1);
          return table_type(x._0);
      case /* MemoryImport */2 :
          u8(2);
          return memory_type(x._0);
      case /* GlobalImport */3 :
          u8(3);
          return global_type(x._0);
      
    }
  };
  var import_section = function (ims) {
    return section(2, (function (param) {
                  return vec($$import, param);
                }), ims, ims !== /* [] */0);
  };
  var func = function (f) {
    return vu32(f.it.ftype.it);
  };
  var func_section = function (fs) {
    return section(3, (function (param) {
                  return vec(func, param);
                }), fs, fs !== /* [] */0);
  };
  var table = function (tab) {
    var match = tab.it;
    return table_type(match.ttype);
  };
  var table_section = function (tabs) {
    return section(4, (function (param) {
                  return vec(table, param);
                }), tabs, tabs !== /* [] */0);
  };
  var memory = function (mem) {
    var match = mem.it;
    return memory_type(match.mtype);
  };
  var memory_section = function (mems) {
    return section(5, (function (param) {
                  return vec(memory, param);
                }), mems, mems !== /* [] */0);
  };
  var $$global = function (g) {
    var match = g.it;
    global_type(match.gtype);
    return $$const(match.ginit);
  };
  var global_section = function (gs) {
    return section(6, (function (param) {
                  return vec($$global, param);
                }), gs, gs !== /* [] */0);
  };
  var $$export = function (ex) {
    var match = ex.it;
    string(Utf8.encode(match.name));
    var d = match.edesc;
    var x = d.it;
    switch (x.TAG | 0) {
      case /* FuncExport */0 :
          u8(0);
          return vu32(x._0.it);
      case /* TableExport */1 :
          u8(1);
          return vu32(x._0.it);
      case /* MemoryExport */2 :
          u8(2);
          return vu32(x._0.it);
      case /* GlobalExport */3 :
          u8(3);
          return vu32(x._0.it);
      
    }
  };
  var export_section = function (exs) {
    return section(7, (function (param) {
                  return vec($$export, param);
                }), exs, exs !== /* [] */0);
  };
  var start = function (st) {
    var match = st.it;
    return vu32(match.sfunc.it);
  };
  var start_section = function (xo) {
    return section(8, (function (param) {
                  return Lib.$$Option.app(start, param);
                }), xo, xo !== undefined);
  };
  var compress = function (ts) {
    var combine = function (t, ts) {
      if (!ts) {
        return {
                hd: [
                  t,
                  1
                ],
                tl: ts
              };
      }
      var match = ts.hd;
      if (Caml_obj.caml_equal(t, match[0])) {
        return {
                hd: [
                  t,
                  match[1] + 1 | 0
                ],
                tl: ts.tl
              };
      } else {
        return {
                hd: [
                  t,
                  1
                ],
                tl: ts
              };
      }
    };
    return List.fold_right(combine, ts, /* [] */0);
  };
  var local = function (param) {
    len(param[1]);
    return value_type(param[0]);
  };
  var code = function (f) {
    var match = f.it;
    var g = gap32(undefined);
    var p = $$Buffer.length(stream$1.buf);
    vec(local, compress(match.locals));
    List.iter(instr, match.body);
    u8(11);
    return patch_gap32(g, $$Buffer.length(stream$1.buf) - p | 0);
  };
  var code_section = function (fs) {
    return section(10, (function (param) {
                  return vec(code, param);
                }), fs, fs !== /* [] */0);
  };
  var elem_kind = function (param) {
    if (param) {
      throw {
            RE_EXN_ID: "Assert_failure",
            _1: [
              "encode.ml",
              818,
              11
            ],
            Error: new Error()
          };
    }
    return u8(0);
  };
  var is_elem_index = function (e) {
    var match = e.it;
    if (!match) {
      return false;
    }
    var tmp = match.hd.it;
    if (typeof tmp === "number" || !(tmp.TAG === /* RefFunc */31 && !match.tl)) {
      return false;
    } else {
      return true;
    }
  };
  var elem_index = function (e) {
    var match = e.it;
    if (match) {
      var x = match.hd.it;
      if (typeof x !== "number" && x.TAG === /* RefFunc */31 && !match.tl) {
        return vu32(x._0.it);
      }
      
    }
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "encode.ml",
            828,
            11
          ],
          Error: new Error()
        };
  };
  var elem = function (seg) {
    var match = seg.it;
    var emode = match.emode;
    var einit = match.einit;
    var etype = match.etype;
    if ((
        etype ? false : true
      ) && List.for_all(is_elem_index, einit)) {
      var match$1 = emode.it;
      if (typeof match$1 === "number") {
        if (match$1 !== 0) {
          vu32(3);
          elem_kind(etype);
          return vec(elem_index, einit);
        } else {
          vu32(1);
          elem_kind(etype);
          return vec(elem_index, einit);
        }
      }
      var offset = match$1.offset;
      var index = match$1.index;
      if (index.it === 0 && etype === /* FuncRefType */0) {
        vu32(0);
        $$const(offset);
        return vec(elem_index, einit);
      } else {
        vu32(2);
        vu32(index.it);
        $$const(offset);
        elem_kind(etype);
        return vec(elem_index, einit);
      }
    }
    var match$2 = emode.it;
    if (typeof match$2 === "number") {
      if (match$2 !== 0) {
        vu32(7);
        ref_type(etype);
        return vec($$const, einit);
      } else {
        vu32(5);
        ref_type(etype);
        return vec($$const, einit);
      }
    }
    var offset$1 = match$2.offset;
    var index$1 = match$2.index;
    if (index$1.it === 0 && etype === /* FuncRefType */0) {
      vu32(4);
      $$const(offset$1);
      return vec($$const, einit);
    } else {
      vu32(6);
      vu32(index$1.it);
      $$const(offset$1);
      ref_type(etype);
      return vec($$const, einit);
    }
  };
  var elem_section = function (elems) {
    return section(9, (function (param) {
                  return vec(elem, param);
                }), elems, elems !== /* [] */0);
  };
  var data = function (seg) {
    var match = seg.it;
    var dinit = match.dinit;
    var match$1 = match.dmode.it;
    if (typeof match$1 === "number") {
      if (match$1 !== 0) {
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "encode.ml",
                868,
                6
              ],
              Error: new Error()
            };
      }
      vu32(1);
      return string(dinit);
    }
    var offset = match$1.offset;
    var index = match$1.index;
    if (index.it === 0) {
      vu32(0);
      $$const(offset);
      return string(dinit);
    } else {
      vu32(2);
      vu32(index.it);
      $$const(offset);
      return string(dinit);
    }
  };
  var data_count_section = function (datas, m) {
    return section(12, len, List.length(datas), Caml_obj.caml_notequal(Free.module_(m).datas, Free.$$Set.empty));
  };
  var module_ = function (m) {
    u32(1836278016);
    u32(1);
    type_section(m.it.types);
    import_section(m.it.imports);
    func_section(m.it.funcs);
    table_section(m.it.tables);
    memory_section(m.it.memories);
    global_section(m.it.globals);
    export_section(m.it.exports);
    start_section(m.it.start);
    elem_section(m.it.elems);
    data_count_section(m.it.datas, m);
    code_section(m.it.funcs);
    var datas = m.it.datas;
    return section(11, (function (param) {
                  return vec(data, param);
                }), datas, datas !== /* [] */0);
  };
  module_(m);
  return to_string(stream$1);
}

function encode_custom(name, content) {
  var stream$1 = stream(undefined);
  var u8 = function (i) {
    var b = Char.chr(i & 255);
    return $$Buffer.add_char(stream$1.buf, b);
  };
  var u16 = function (i) {
    u8(i & 255);
    return u8((i >>> 8));
  };
  var u32 = function (i) {
    u16(i & 65535);
    return u16((i >> 16));
  };
  var vs64 = function (_i) {
    while(true) {
      var i = _i;
      var b = Caml_int64.to_int32(Caml_int64.and_(i, [
                0,
                127
              ]));
      if (Caml.i64_le([
              -1,
              4294967232
            ], i) && Caml.i64_lt(i, [
              0,
              64
            ])) {
        return u8(b);
      }
      u8(b | 128);
      _i = Caml_int64.asr_(i, 7);
      continue ;
    };
  };
  var vu32 = function (i) {
    var _i = Caml_int64.and_(Caml_int64.of_int32(i), [
          0,
          4294967295
        ]);
    while(true) {
      var i$1 = _i;
      var b = Caml_int64.to_int32(Caml_int64.and_(i$1, [
                0,
                127
              ]));
      if (Caml.i64_le(Caml_int64.zero, i$1) && Caml.i64_lt(i$1, [
              0,
              128
            ])) {
        return u8(b);
      }
      u8(b | 128);
      _i = Caml_int64.lsr_(i$1, 7);
      continue ;
    };
  };
  var len = function (i) {
    if (i !== i) {
      Curry._2(Code.error, Source.no_region, "cannot encode length with more than 32 bit");
    }
    return vu32(i);
  };
  var string = function (bs) {
    len(bs.length);
    return $$Buffer.add_string(stream$1.buf, bs);
  };
  var vec = function (f, xs) {
    len(List.length(xs));
    return List.iter(f, xs);
  };
  var gap32 = function (param) {
    var p = $$Buffer.length(stream$1.buf);
    u32(0);
    u8(0);
    return p;
  };
  var ref_type = function (param) {
    if (param) {
      return vs64([
                  -1,
                  4294967279
                ]);
    } else {
      return vs64([
                  -1,
                  4294967280
                ]);
    }
  };
  var value_type = function (t) {
    switch (t.TAG | 0) {
      case /* NumType */0 :
          var param = t._0;
          switch (param) {
            case /* I32Type */0 :
                return vs64(Caml_int64.neg_one);
            case /* I64Type */1 :
                return vs64([
                            -1,
                            4294967294
                          ]);
            case /* F32Type */2 :
                return vs64([
                            -1,
                            4294967293
                          ]);
            case /* F64Type */3 :
                return vs64([
                            -1,
                            4294967292
                          ]);
            
          }
      case /* VecType */1 :
          return vs64([
                      -1,
                      4294967291
                    ]);
      case /* RefType */2 :
          return ref_type(t._0);
      
    }
  };
  var memop = function (param) {
    vu32(param.align);
    return vu32(param.offset);
  };
  var $$var = function (x) {
    return vu32(x.it);
  };
  var block_type = function (x) {
    if (x.TAG === /* VarBlockType */0) {
      return vs64(I64_convert.extend_i32_s(x._0.it));
    }
    var t = x._0;
    if (t !== undefined) {
      return value_type(t);
    } else {
      return vs64([
                  -1,
                  4294967232
                ]);
    }
  };
  var instr = function (e) {
    var x = e.it;
    if (typeof x === "number") {
      switch (x) {
        case /* Unreachable */0 :
            return u8(0);
        case /* Nop */1 :
            return u8(1);
        case /* Drop */2 :
            return u8(26);
        case /* Return */3 :
            return u8(15);
        case /* MemorySize */4 :
            u8(63);
            return u8(0);
        case /* MemoryGrow */5 :
            u8(64);
            return u8(0);
        case /* MemoryFill */6 :
            u8(252);
            vu32(11);
            return u8(0);
        case /* MemoryCopy */7 :
            u8(252);
            vu32(10);
            u8(0);
            return u8(0);
        case /* RefIsNull */8 :
            return u8(209);
        
      }
    } else {
      switch (x.TAG | 0) {
        case /* Select */0 :
            var ts = x._0;
            if (ts !== undefined) {
              u8(28);
              return vec(value_type, ts);
            } else {
              return u8(27);
            }
        case /* Block */1 :
            u8(2);
            block_type(x._0);
            List.iter(instr, x._1);
            return u8(11);
        case /* Loop */2 :
            u8(3);
            block_type(x._0);
            List.iter(instr, x._1);
            return u8(11);
        case /* If */3 :
            var es2 = x._2;
            u8(4);
            block_type(x._0);
            List.iter(instr, x._1);
            if (es2 !== /* [] */0) {
              u8(5);
            }
            List.iter(instr, es2);
            return u8(11);
        case /* Br */4 :
            u8(12);
            return vu32(x._0.it);
        case /* BrIf */5 :
            u8(13);
            return vu32(x._0.it);
        case /* BrTable */6 :
            u8(14);
            vec($$var, x._0);
            return vu32(x._1.it);
        case /* Call */7 :
            u8(16);
            return vu32(x._0.it);
        case /* CallIndirect */8 :
            u8(17);
            vu32(x._1.it);
            return vu32(x._0.it);
        case /* LocalGet */9 :
            u8(32);
            return vu32(x._0.it);
        case /* LocalSet */10 :
            u8(33);
            return vu32(x._0.it);
        case /* LocalTee */11 :
            u8(34);
            return vu32(x._0.it);
        case /* GlobalGet */12 :
            u8(35);
            return vu32(x._0.it);
        case /* GlobalSet */13 :
            u8(36);
            return vu32(x._0.it);
        case /* TableGet */14 :
            u8(37);
            return vu32(x._0.it);
        case /* TableSet */15 :
            u8(38);
            return vu32(x._0.it);
        case /* TableSize */16 :
            u8(252);
            vu32(16);
            return vu32(x._0.it);
        case /* TableGrow */17 :
            u8(252);
            vu32(15);
            return vu32(x._0.it);
        case /* TableFill */18 :
            u8(252);
            vu32(17);
            return vu32(x._0.it);
        case /* TableCopy */19 :
            u8(252);
            vu32(14);
            vu32(x._0.it);
            return vu32(x._1.it);
        case /* TableInit */20 :
            u8(252);
            vu32(12);
            vu32(x._1.it);
            return vu32(x._0.it);
        case /* ElemDrop */21 :
            u8(252);
            vu32(13);
            return vu32(x._0.it);
        case /* Load */22 :
            var mo = x._0;
            var exit = 0;
            switch (mo.ty) {
              case /* I32Type */0 :
                  var match = mo.pack;
                  if (match !== undefined) {
                    switch (match[0]) {
                      case /* Pack8 */0 :
                          if (match[1]) {
                            u8(45);
                            return memop(mo);
                          } else {
                            u8(44);
                            return memop(mo);
                          }
                      case /* Pack16 */1 :
                          if (match[1]) {
                            u8(47);
                            return memop(mo);
                          } else {
                            u8(46);
                            return memop(mo);
                          }
                      case /* Pack32 */2 :
                          throw {
                                RE_EXN_ID: "Assert_failure",
                                _1: [
                                  "encode.ml",
                                  204,
                                  6
                                ],
                                Error: new Error()
                              };
                      case /* Pack64 */3 :
                          exit = 2;
                          break;
                      
                    }
                  } else {
                    u8(40);
                    return memop(mo);
                  }
                  break;
              case /* I64Type */1 :
                  var match$1 = mo.pack;
                  if (match$1 !== undefined) {
                    switch (match$1[0]) {
                      case /* Pack8 */0 :
                          if (match$1[1]) {
                            u8(49);
                            return memop(mo);
                          } else {
                            u8(48);
                            return memop(mo);
                          }
                      case /* Pack16 */1 :
                          if (match$1[1]) {
                            u8(51);
                            return memop(mo);
                          } else {
                            u8(50);
                            return memop(mo);
                          }
                      case /* Pack32 */2 :
                          if (match$1[1]) {
                            u8(53);
                            return memop(mo);
                          } else {
                            u8(52);
                            return memop(mo);
                          }
                      case /* Pack64 */3 :
                          exit = 2;
                          break;
                      
                    }
                  } else {
                    u8(41);
                    return memop(mo);
                  }
                  break;
              case /* F32Type */2 :
                  if (mo.pack !== undefined) {
                    exit = 1;
                  } else {
                    u8(42);
                    return memop(mo);
                  }
                  break;
              case /* F64Type */3 :
                  if (mo.pack !== undefined) {
                    exit = 1;
                  } else {
                    u8(43);
                    return memop(mo);
                  }
                  break;
              
            }
            switch (exit) {
              case 1 :
                  throw {
                        RE_EXN_ID: "Assert_failure",
                        _1: [
                          "encode.ml",
                          218,
                          6
                        ],
                        Error: new Error()
                      };
              case 2 :
                  throw {
                        RE_EXN_ID: "Assert_failure",
                        _1: [
                          "encode.ml",
                          220,
                          6
                        ],
                        Error: new Error()
                      };
              
            }
            break;
        case /* Store */23 :
            var mo$1 = x._0;
            var exit$1 = 0;
            switch (mo$1.ty) {
              case /* I32Type */0 :
                  var match$2 = mo$1.pack;
                  if (match$2 !== undefined) {
                    switch (match$2) {
                      case /* Pack8 */0 :
                          u8(58);
                          return memop(mo$1);
                      case /* Pack16 */1 :
                          u8(59);
                          return memop(mo$1);
                      case /* Pack32 */2 :
                          throw {
                                RE_EXN_ID: "Assert_failure",
                                _1: [
                                  "encode.ml",
                                  228,
                                  53
                                ],
                                Error: new Error()
                              };
                      case /* Pack64 */3 :
                          exit$1 = 2;
                          break;
                      
                    }
                  } else {
                    u8(54);
                    return memop(mo$1);
                  }
                  break;
              case /* I64Type */1 :
                  var match$3 = mo$1.pack;
                  if (match$3 !== undefined) {
                    switch (match$3) {
                      case /* Pack8 */0 :
                          u8(60);
                          return memop(mo$1);
                      case /* Pack16 */1 :
                          u8(61);
                          return memop(mo$1);
                      case /* Pack32 */2 :
                          u8(62);
                          return memop(mo$1);
                      case /* Pack64 */3 :
                          exit$1 = 2;
                          break;
                      
                    }
                  } else {
                    u8(55);
                    return memop(mo$1);
                  }
                  break;
              case /* F32Type */2 :
                  if (mo$1.pack !== undefined) {
                    exit$1 = 1;
                  } else {
                    u8(56);
                    return memop(mo$1);
                  }
                  break;
              case /* F64Type */3 :
                  if (mo$1.pack !== undefined) {
                    exit$1 = 1;
                  } else {
                    u8(57);
                    return memop(mo$1);
                  }
                  break;
              
            }
            switch (exit$1) {
              case 1 :
                  throw {
                        RE_EXN_ID: "Assert_failure",
                        _1: [
                          "encode.ml",
                          232,
                          58
                        ],
                        Error: new Error()
                      };
              case 2 :
                  throw {
                        RE_EXN_ID: "Assert_failure",
                        _1: [
                          "encode.ml",
                          233,
                          65
                        ],
                        Error: new Error()
                      };
              
            }
            break;
        case /* VecLoad */24 :
            var mo$2 = x._0;
            var match$4 = mo$2.pack;
            if (match$4 !== undefined) {
              switch (match$4[0]) {
                case /* Pack8 */0 :
                    if (match$4[1] === 0) {
                      u8(253);
                      vu32(7);
                      return memop(mo$2);
                    }
                    break;
                case /* Pack16 */1 :
                    if (match$4[1] === 0) {
                      u8(253);
                      vu32(8);
                      return memop(mo$2);
                    }
                    break;
                case /* Pack32 */2 :
                    var match$5 = match$4[1];
                    if (typeof match$5 === "number") {
                      if (match$5 !== 0) {
                        u8(253);
                        vu32(92);
                        return memop(mo$2);
                      } else {
                        u8(253);
                        vu32(9);
                        return memop(mo$2);
                      }
                    }
                    break;
                case /* Pack64 */3 :
                    var match$6 = match$4[1];
                    if (typeof match$6 === "number") {
                      if (match$6 !== 0) {
                        u8(253);
                        vu32(93);
                        return memop(mo$2);
                      } else {
                        u8(253);
                        vu32(10);
                        return memop(mo$2);
                      }
                    }
                    switch (match$6._0) {
                      case /* Pack8x8 */0 :
                          if (match$6._1) {
                            u8(253);
                            vu32(2);
                            return memop(mo$2);
                          } else {
                            u8(253);
                            vu32(1);
                            return memop(mo$2);
                          }
                      case /* Pack16x4 */1 :
                          if (match$6._1) {
                            u8(253);
                            vu32(4);
                            return memop(mo$2);
                          } else {
                            u8(253);
                            vu32(3);
                            return memop(mo$2);
                          }
                      case /* Pack32x2 */2 :
                          if (match$6._1) {
                            u8(253);
                            vu32(6);
                            return memop(mo$2);
                          } else {
                            u8(253);
                            vu32(5);
                            return memop(mo$2);
                          }
                      
                    }
                
              }
            } else {
              u8(253);
              vu32(0);
              return memop(mo$2);
            }
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "encode.ml",
                    261,
                    19
                  ],
                  Error: new Error()
                };
        case /* VecStore */25 :
            u8(253);
            vu32(11);
            return memop(x._0);
        case /* VecLoadLane */26 :
            var match$7 = x._0;
            var mo$3 = match$7[0];
            switch (mo$3.pack) {
              case /* Pack8 */0 :
                  u8(253);
                  vu32(84);
                  memop(mo$3);
                  return u8(match$7[1]);
              case /* Pack16 */1 :
                  u8(253);
                  vu32(85);
                  memop(mo$3);
                  return u8(match$7[1]);
              case /* Pack32 */2 :
                  u8(253);
                  vu32(86);
                  memop(mo$3);
                  return u8(match$7[1]);
              case /* Pack64 */3 :
                  u8(253);
                  vu32(87);
                  memop(mo$3);
                  return u8(match$7[1]);
              
            }
        case /* VecStoreLane */27 :
            var match$8 = x._0;
            var mo$4 = match$8[0];
            switch (mo$4.pack) {
              case /* Pack8 */0 :
                  u8(253);
                  vu32(88);
                  memop(mo$4);
                  return u8(match$8[1]);
              case /* Pack16 */1 :
                  u8(253);
                  vu32(89);
                  memop(mo$4);
                  return u8(match$8[1]);
              case /* Pack32 */2 :
                  u8(253);
                  vu32(90);
                  memop(mo$4);
                  return u8(match$8[1]);
              case /* Pack64 */3 :
                  u8(253);
                  vu32(91);
                  memop(mo$4);
                  return u8(match$8[1]);
              
            }
        case /* MemoryInit */28 :
            u8(252);
            vu32(8);
            vu32(x._0.it);
            return u8(0);
        case /* DataDrop */29 :
            u8(252);
            vu32(9);
            return vu32(x._0.it);
        case /* RefNull */30 :
            u8(208);
            return ref_type(x._0);
        case /* RefFunc */31 :
            u8(210);
            return vu32(x._0.it);
        case /* Const */32 :
            var c = x._0.it;
            switch (c.TAG | 0) {
              case /* I32 */0 :
                  u8(65);
                  return vs64(Caml_int64.of_int32(c._0));
              case /* I64 */1 :
                  u8(66);
                  return vs64(c._0);
              case /* F32 */2 :
                  u8(67);
                  return u32(Curry._1(F32.to_bits, c._0));
              case /* F64 */3 :
                  u8(68);
                  var i = Curry._1(F64.to_bits, c._0);
                  u32(Caml_int64.to_int32(Caml_int64.and_(i, [
                                0,
                                4294967295
                              ])));
                  return u32(Caml_int64.to_int32(Caml_int64.asr_(i, 32)));
              
            }
        case /* Test */33 :
            switch (x._0.TAG | 0) {
              case /* I32 */0 :
                  return u8(69);
              case /* I64 */1 :
                  return u8(80);
              case /* F32 */2 :
              case /* F64 */3 :
                  throw {
                        RE_EXN_ID: "Assert_failure",
                        _1: [
                          "encode.ml",
                          301,
                          30
                        ],
                        Error: new Error()
                      };
              
            }
        case /* Compare */34 :
            var match$9 = x._0;
            switch (match$9.TAG | 0) {
              case /* I32 */0 :
                  switch (match$9._0) {
                    case /* Eq */0 :
                        return u8(70);
                    case /* Ne */1 :
                        return u8(71);
                    case /* LtS */2 :
                        return u8(72);
                    case /* LtU */3 :
                        return u8(73);
                    case /* GtS */4 :
                        return u8(74);
                    case /* GtU */5 :
                        return u8(75);
                    case /* LeS */6 :
                        return u8(76);
                    case /* LeU */7 :
                        return u8(77);
                    case /* GeS */8 :
                        return u8(78);
                    case /* GeU */9 :
                        return u8(79);
                    
                  }
              case /* I64 */1 :
                  switch (match$9._0) {
                    case /* Eq */0 :
                        return u8(81);
                    case /* Ne */1 :
                        return u8(82);
                    case /* LtS */2 :
                        return u8(83);
                    case /* LtU */3 :
                        return u8(84);
                    case /* GtS */4 :
                        return u8(85);
                    case /* GtU */5 :
                        return u8(86);
                    case /* LeS */6 :
                        return u8(87);
                    case /* LeU */7 :
                        return u8(88);
                    case /* GeS */8 :
                        return u8(89);
                    case /* GeU */9 :
                        return u8(90);
                    
                  }
              case /* F32 */2 :
                  switch (match$9._0) {
                    case /* Eq */0 :
                        return u8(91);
                    case /* Ne */1 :
                        return u8(92);
                    case /* Lt */2 :
                        return u8(93);
                    case /* Gt */3 :
                        return u8(94);
                    case /* Le */4 :
                        return u8(95);
                    case /* Ge */5 :
                        return u8(96);
                    
                  }
              case /* F64 */3 :
                  switch (match$9._0) {
                    case /* Eq */0 :
                        return u8(97);
                    case /* Ne */1 :
                        return u8(98);
                    case /* Lt */2 :
                        return u8(99);
                    case /* Gt */3 :
                        return u8(100);
                    case /* Le */4 :
                        return u8(101);
                    case /* Ge */5 :
                        return u8(102);
                    
                  }
              
            }
        case /* Unary */35 :
            var match$10 = x._0;
            switch (match$10.TAG | 0) {
              case /* I32 */0 :
                  var match$11 = match$10._0;
                  if (typeof match$11 === "number") {
                    switch (match$11) {
                      case /* Clz */0 :
                          return u8(103);
                      case /* Ctz */1 :
                          return u8(104);
                      case /* Popcnt */2 :
                          return u8(105);
                      
                    }
                  } else {
                    var match$12 = match$11._0;
                    if (match$12 === 1) {
                      return u8(193);
                    }
                    if (match$12 !== 0) {
                      throw {
                            RE_EXN_ID: "Assert_failure",
                            _1: [
                              "encode.ml",
                              344,
                              55
                            ],
                            Error: new Error()
                          };
                    }
                    return u8(192);
                  }
              case /* I64 */1 :
                  var match$13 = match$10._0;
                  if (typeof match$13 === "number") {
                    switch (match$13) {
                      case /* Clz */0 :
                          return u8(121);
                      case /* Ctz */1 :
                          return u8(122);
                      case /* Popcnt */2 :
                          return u8(123);
                      
                    }
                  } else {
                    switch (match$13._0) {
                      case /* Pack8 */0 :
                          return u8(194);
                      case /* Pack16 */1 :
                          return u8(195);
                      case /* Pack32 */2 :
                          return u8(196);
                      case /* Pack64 */3 :
                          throw {
                                RE_EXN_ID: "Assert_failure",
                                _1: [
                                  "encode.ml",
                                  352,
                                  44
                                ],
                                Error: new Error()
                              };
                      
                    }
                  }
              case /* F32 */2 :
                  switch (match$10._0) {
                    case /* Neg */0 :
                        return u8(140);
                    case /* Abs */1 :
                        return u8(139);
                    case /* Ceil */2 :
                        return u8(141);
                    case /* Floor */3 :
                        return u8(142);
                    case /* Trunc */4 :
                        return u8(143);
                    case /* Nearest */5 :
                        return u8(144);
                    case /* Sqrt */6 :
                        return u8(145);
                    
                  }
              case /* F64 */3 :
                  switch (match$10._0) {
                    case /* Neg */0 :
                        return u8(154);
                    case /* Abs */1 :
                        return u8(153);
                    case /* Ceil */2 :
                        return u8(155);
                    case /* Floor */3 :
                        return u8(156);
                    case /* Trunc */4 :
                        return u8(157);
                    case /* Nearest */5 :
                        return u8(158);
                    case /* Sqrt */6 :
                        return u8(159);
                    
                  }
              
            }
        case /* Binary */36 :
            var match$14 = x._0;
            switch (match$14.TAG | 0) {
              case /* I32 */0 :
                  switch (match$14._0) {
                    case /* Add */0 :
                        return u8(106);
                    case /* Sub */1 :
                        return u8(107);
                    case /* Mul */2 :
                        return u8(108);
                    case /* DivS */3 :
                        return u8(109);
                    case /* DivU */4 :
                        return u8(110);
                    case /* RemS */5 :
                        return u8(111);
                    case /* RemU */6 :
                        return u8(112);
                    case /* And */7 :
                        return u8(113);
                    case /* Or */8 :
                        return u8(114);
                    case /* Xor */9 :
                        return u8(115);
                    case /* Shl */10 :
                        return u8(116);
                    case /* ShrS */11 :
                        return u8(117);
                    case /* ShrU */12 :
                        return u8(118);
                    case /* Rotl */13 :
                        return u8(119);
                    case /* Rotr */14 :
                        return u8(120);
                    
                  }
              case /* I64 */1 :
                  switch (match$14._0) {
                    case /* Add */0 :
                        return u8(124);
                    case /* Sub */1 :
                        return u8(125);
                    case /* Mul */2 :
                        return u8(126);
                    case /* DivS */3 :
                        return u8(127);
                    case /* DivU */4 :
                        return u8(128);
                    case /* RemS */5 :
                        return u8(129);
                    case /* RemU */6 :
                        return u8(130);
                    case /* And */7 :
                        return u8(131);
                    case /* Or */8 :
                        return u8(132);
                    case /* Xor */9 :
                        return u8(133);
                    case /* Shl */10 :
                        return u8(134);
                    case /* ShrS */11 :
                        return u8(135);
                    case /* ShrU */12 :
                        return u8(136);
                    case /* Rotl */13 :
                        return u8(137);
                    case /* Rotr */14 :
                        return u8(138);
                    
                  }
              case /* F32 */2 :
                  switch (match$14._0) {
                    case /* Add */0 :
                        return u8(146);
                    case /* Sub */1 :
                        return u8(147);
                    case /* Mul */2 :
                        return u8(148);
                    case /* Div */3 :
                        return u8(149);
                    case /* Min */4 :
                        return u8(150);
                    case /* Max */5 :
                        return u8(151);
                    case /* CopySign */6 :
                        return u8(152);
                    
                  }
              case /* F64 */3 :
                  switch (match$14._0) {
                    case /* Add */0 :
                        return u8(160);
                    case /* Sub */1 :
                        return u8(161);
                    case /* Mul */2 :
                        return u8(162);
                    case /* Div */3 :
                        return u8(163);
                    case /* Min */4 :
                        return u8(164);
                    case /* Max */5 :
                        return u8(165);
                    case /* CopySign */6 :
                        return u8(166);
                    
                  }
              
            }
        case /* Convert */37 :
            var match$15 = x._0;
            switch (match$15.TAG | 0) {
              case /* I32 */0 :
                  switch (match$15._0) {
                    case /* ExtendSI32 */0 :
                        throw {
                              RE_EXN_ID: "Assert_failure",
                              _1: [
                                "encode.ml",
                                418,
                                40
                              ],
                              Error: new Error()
                            };
                    case /* ExtendUI32 */1 :
                        throw {
                              RE_EXN_ID: "Assert_failure",
                              _1: [
                                "encode.ml",
                                419,
                                40
                              ],
                              Error: new Error()
                            };
                    case /* WrapI64 */2 :
                        return u8(167);
                    case /* TruncSF32 */3 :
                        return u8(168);
                    case /* TruncUF32 */4 :
                        return u8(169);
                    case /* TruncSF64 */5 :
                        return u8(170);
                    case /* TruncUF64 */6 :
                        return u8(171);
                    case /* TruncSatSF32 */7 :
                        u8(252);
                        return vu32(0);
                    case /* TruncSatUF32 */8 :
                        u8(252);
                        return vu32(1);
                    case /* TruncSatSF64 */9 :
                        u8(252);
                        return vu32(2);
                    case /* TruncSatUF64 */10 :
                        u8(252);
                        return vu32(3);
                    case /* ReinterpretFloat */11 :
                        return u8(188);
                    
                  }
              case /* I64 */1 :
                  switch (match$15._0) {
                    case /* ExtendSI32 */0 :
                        return u8(172);
                    case /* ExtendUI32 */1 :
                        return u8(173);
                    case /* WrapI64 */2 :
                        throw {
                              RE_EXN_ID: "Assert_failure",
                              _1: [
                                "encode.ml",
                                433,
                                37
                              ],
                              Error: new Error()
                            };
                    case /* TruncSF32 */3 :
                        return u8(174);
                    case /* TruncUF32 */4 :
                        return u8(175);
                    case /* TruncSF64 */5 :
                        return u8(176);
                    case /* TruncUF64 */6 :
                        return u8(177);
                    case /* TruncSatSF32 */7 :
                        u8(252);
                        return vu32(4);
                    case /* TruncSatUF32 */8 :
                        u8(252);
                        return vu32(5);
                    case /* TruncSatSF64 */9 :
                        u8(252);
                        return vu32(6);
                    case /* TruncSatUF64 */10 :
                        u8(252);
                        return vu32(7);
                    case /* ReinterpretFloat */11 :
                        return u8(189);
                    
                  }
              case /* F32 */2 :
                  switch (match$15._0) {
                    case /* ConvertSI32 */0 :
                        return u8(178);
                    case /* ConvertUI32 */1 :
                        return u8(179);
                    case /* ConvertSI64 */2 :
                        return u8(180);
                    case /* ConvertUI64 */3 :
                        return u8(181);
                    case /* PromoteF32 */4 :
                        throw {
                              RE_EXN_ID: "Assert_failure",
                              _1: [
                                "encode.ml",
                                448,
                                40
                              ],
                              Error: new Error()
                            };
                    case /* DemoteF64 */5 :
                        return u8(182);
                    case /* ReinterpretInt */6 :
                        return u8(190);
                    
                  }
              case /* F64 */3 :
                  switch (match$15._0) {
                    case /* ConvertSI32 */0 :
                        return u8(183);
                    case /* ConvertUI32 */1 :
                        return u8(184);
                    case /* ConvertSI64 */2 :
                        return u8(185);
                    case /* ConvertUI64 */3 :
                        return u8(186);
                    case /* PromoteF32 */4 :
                        return u8(187);
                    case /* DemoteF64 */5 :
                        throw {
                              RE_EXN_ID: "Assert_failure",
                              _1: [
                                "encode.ml",
                                457,
                                39
                              ],
                              Error: new Error()
                            };
                    case /* ReinterpretInt */6 :
                        return u8(191);
                    
                  }
              
            }
        case /* VecConst */38 :
            u8(253);
            vu32(12);
            var v = x._0.it._0;
            return $$String.iter((function (param) {
                          return $$Buffer.add_char(stream$1.buf, param);
                        }), V128.to_bits(v));
        case /* VecTest */39 :
            switch (x._0._0.TAG | 0) {
              case /* I8x16 */0 :
                  u8(253);
                  return vu32(99);
              case /* I16x8 */1 :
                  u8(253);
                  return vu32(131);
              case /* I32x4 */2 :
                  u8(253);
                  return vu32(163);
              case /* I64x2 */3 :
                  u8(253);
                  return vu32(195);
              case /* F32x4 */4 :
              case /* F64x2 */5 :
                  throw {
                        RE_EXN_ID: "Assert_failure",
                        _1: [
                          "encode.ml",
                          466,
                          26
                        ],
                        Error: new Error()
                      };
              
            }
        case /* VecCompare */40 :
            var match$16 = x._0._0;
            switch (match$16.TAG | 0) {
              case /* I8x16 */0 :
                  switch (match$16._0) {
                    case /* Eq */0 :
                        u8(253);
                        return vu32(35);
                    case /* Ne */1 :
                        u8(253);
                        return vu32(36);
                    case /* LtS */2 :
                        u8(253);
                        return vu32(37);
                    case /* LtU */3 :
                        u8(253);
                        return vu32(38);
                    case /* LeS */4 :
                        u8(253);
                        return vu32(41);
                    case /* LeU */5 :
                        u8(253);
                        return vu32(42);
                    case /* GtS */6 :
                        u8(253);
                        return vu32(39);
                    case /* GtU */7 :
                        u8(253);
                        return vu32(40);
                    case /* GeS */8 :
                        u8(253);
                        return vu32(43);
                    case /* GeU */9 :
                        u8(253);
                        return vu32(44);
                    
                  }
              case /* I16x8 */1 :
                  switch (match$16._0) {
                    case /* Eq */0 :
                        u8(253);
                        return vu32(45);
                    case /* Ne */1 :
                        u8(253);
                        return vu32(46);
                    case /* LtS */2 :
                        u8(253);
                        return vu32(47);
                    case /* LtU */3 :
                        u8(253);
                        return vu32(48);
                    case /* LeS */4 :
                        u8(253);
                        return vu32(51);
                    case /* LeU */5 :
                        u8(253);
                        return vu32(52);
                    case /* GtS */6 :
                        u8(253);
                        return vu32(49);
                    case /* GtU */7 :
                        u8(253);
                        return vu32(50);
                    case /* GeS */8 :
                        u8(253);
                        return vu32(53);
                    case /* GeU */9 :
                        u8(253);
                        return vu32(54);
                    
                  }
              case /* I32x4 */2 :
                  switch (match$16._0) {
                    case /* Eq */0 :
                        u8(253);
                        return vu32(55);
                    case /* Ne */1 :
                        u8(253);
                        return vu32(56);
                    case /* LtS */2 :
                        u8(253);
                        return vu32(57);
                    case /* LtU */3 :
                        u8(253);
                        return vu32(58);
                    case /* LeS */4 :
                        u8(253);
                        return vu32(61);
                    case /* LeU */5 :
                        u8(253);
                        return vu32(62);
                    case /* GtS */6 :
                        u8(253);
                        return vu32(59);
                    case /* GtU */7 :
                        u8(253);
                        return vu32(60);
                    case /* GeS */8 :
                        u8(253);
                        return vu32(63);
                    case /* GeU */9 :
                        u8(253);
                        return vu32(64);
                    
                  }
              case /* I64x2 */3 :
                  switch (match$16._0) {
                    case /* Eq */0 :
                        u8(253);
                        return vu32(214);
                    case /* Ne */1 :
                        u8(253);
                        return vu32(215);
                    case /* LtS */2 :
                        u8(253);
                        return vu32(216);
                    case /* LtU */3 :
                        throw {
                              RE_EXN_ID: "Assert_failure",
                              _1: [
                                "encode.ml",
                                528,
                                46
                              ],
                              Error: new Error()
                            };
                    case /* LeS */4 :
                        u8(253);
                        return vu32(218);
                    case /* LeU */5 :
                        throw {
                              RE_EXN_ID: "Assert_failure",
                              _1: [
                                "encode.ml",
                                532,
                                46
                              ],
                              Error: new Error()
                            };
                    case /* GtS */6 :
                        u8(253);
                        return vu32(217);
                    case /* GtU */7 :
                        throw {
                              RE_EXN_ID: "Assert_failure",
                              _1: [
                                "encode.ml",
                                530,
                                46
                              ],
                              Error: new Error()
                            };
                    case /* GeS */8 :
                        u8(253);
                        return vu32(219);
                    case /* GeU */9 :
                        throw {
                              RE_EXN_ID: "Assert_failure",
                              _1: [
                                "encode.ml",
                                534,
                                46
                              ],
                              Error: new Error()
                            };
                    
                  }
              case /* F32x4 */4 :
                  switch (match$16._0) {
                    case /* Eq */0 :
                        u8(253);
                        return vu32(65);
                    case /* Ne */1 :
                        u8(253);
                        return vu32(66);
                    case /* Lt */2 :
                        u8(253);
                        return vu32(67);
                    case /* Le */3 :
                        u8(253);
                        return vu32(69);
                    case /* Gt */4 :
                        u8(253);
                        return vu32(68);
                    case /* Ge */5 :
                        u8(253);
                        return vu32(70);
                    
                  }
              case /* F64x2 */5 :
                  switch (match$16._0) {
                    case /* Eq */0 :
                        u8(253);
                        return vu32(71);
                    case /* Ne */1 :
                        u8(253);
                        return vu32(72);
                    case /* Lt */2 :
                        u8(253);
                        return vu32(73);
                    case /* Le */3 :
                        u8(253);
                        return vu32(75);
                    case /* Gt */4 :
                        u8(253);
                        return vu32(74);
                    case /* Ge */5 :
                        u8(253);
                        return vu32(76);
                    
                  }
              
            }
        case /* VecUnary */41 :
            var match$17 = x._0._0;
            switch (match$17.TAG | 0) {
              case /* I8x16 */0 :
                  switch (match$17._0) {
                    case /* Abs */0 :
                        u8(253);
                        return vu32(96);
                    case /* Neg */1 :
                        u8(253);
                        return vu32(97);
                    case /* Popcnt */2 :
                        u8(253);
                        return vu32(98);
                    
                  }
              case /* I16x8 */1 :
                  switch (match$17._0) {
                    case /* Abs */0 :
                        u8(253);
                        return vu32(128);
                    case /* Neg */1 :
                        u8(253);
                        return vu32(129);
                    case /* Popcnt */2 :
                        throw {
                              RE_EXN_ID: "Assert_failure",
                              _1: [
                                "encode.ml",
                                473,
                                47
                              ],
                              Error: new Error()
                            };
                    
                  }
              case /* I32x4 */2 :
                  switch (match$17._0) {
                    case /* Abs */0 :
                        u8(253);
                        return vu32(160);
                    case /* Neg */1 :
                        u8(253);
                        return vu32(161);
                    case /* Popcnt */2 :
                        throw {
                              RE_EXN_ID: "Assert_failure",
                              _1: [
                                "encode.ml",
                                476,
                                47
                              ],
                              Error: new Error()
                            };
                    
                  }
              case /* I64x2 */3 :
                  switch (match$17._0) {
                    case /* Abs */0 :
                        u8(253);
                        return vu32(192);
                    case /* Neg */1 :
                        u8(253);
                        return vu32(193);
                    case /* Popcnt */2 :
                        throw {
                              RE_EXN_ID: "Assert_failure",
                              _1: [
                                "encode.ml",
                                479,
                                47
                              ],
                              Error: new Error()
                            };
                    
                  }
              case /* F32x4 */4 :
                  switch (match$17._0) {
                    case /* Abs */0 :
                        u8(253);
                        return vu32(224);
                    case /* Neg */1 :
                        u8(253);
                        return vu32(225);
                    case /* Sqrt */2 :
                        u8(253);
                        return vu32(227);
                    case /* Ceil */3 :
                        u8(253);
                        return vu32(103);
                    case /* Floor */4 :
                        u8(253);
                        return vu32(104);
                    case /* Trunc */5 :
                        u8(253);
                        return vu32(105);
                    case /* Nearest */6 :
                        u8(253);
                        return vu32(106);
                    
                  }
              case /* F64x2 */5 :
                  switch (match$17._0) {
                    case /* Abs */0 :
                        u8(253);
                        return vu32(236);
                    case /* Neg */1 :
                        u8(253);
                        return vu32(237);
                    case /* Sqrt */2 :
                        u8(253);
                        return vu32(239);
                    case /* Ceil */3 :
                        u8(253);
                        return vu32(116);
                    case /* Floor */4 :
                        u8(253);
                        return vu32(117);
                    case /* Trunc */5 :
                        u8(253);
                        return vu32(122);
                    case /* Nearest */6 :
                        u8(253);
                        return vu32(148);
                    
                  }
              
            }
        case /* VecBinary */42 :
            var match$18 = x._0._0;
            switch (match$18.TAG | 0) {
              case /* I8x16 */0 :
                  var is = match$18._0;
                  if (typeof is === "number") {
                    switch (is) {
                      case /* Add */0 :
                          u8(253);
                          return vu32(110);
                      case /* Sub */1 :
                          u8(253);
                          return vu32(113);
                      case /* MinS */3 :
                          u8(253);
                          return vu32(118);
                      case /* MinU */4 :
                          u8(253);
                          return vu32(119);
                      case /* MaxS */5 :
                          u8(253);
                          return vu32(120);
                      case /* MaxU */6 :
                          u8(253);
                          return vu32(121);
                      case /* AvgrU */7 :
                          u8(253);
                          return vu32(123);
                      case /* AddSatS */8 :
                          u8(253);
                          return vu32(111);
                      case /* AddSatU */9 :
                          u8(253);
                          return vu32(112);
                      case /* SubSatS */10 :
                          u8(253);
                          return vu32(114);
                      case /* SubSatU */11 :
                          u8(253);
                          return vu32(115);
                      case /* Mul */2 :
                      case /* DotS */12 :
                      case /* Q15MulRSatS */13 :
                      case /* ExtMulLowS */14 :
                      case /* ExtMulHighS */15 :
                      case /* ExtMulLowU */16 :
                      case /* ExtMulHighU */17 :
                          break;
                      case /* Swizzle */18 :
                          u8(253);
                          return vu32(14);
                      case /* NarrowS */19 :
                          u8(253);
                          return vu32(101);
                      case /* NarrowU */20 :
                          u8(253);
                          return vu32(102);
                      
                    }
                  } else {
                    u8(253);
                    vu32(13);
                    return List.iter(u8, is._0);
                  }
                  break;
              case /* I16x8 */1 :
                  var match$19 = match$18._0;
                  if (typeof match$19 === "number") {
                    switch (match$19) {
                      case /* Add */0 :
                          u8(253);
                          return vu32(142);
                      case /* Sub */1 :
                          u8(253);
                          return vu32(145);
                      case /* Mul */2 :
                          u8(253);
                          return vu32(149);
                      case /* MinS */3 :
                          u8(253);
                          return vu32(150);
                      case /* MinU */4 :
                          u8(253);
                          return vu32(151);
                      case /* MaxS */5 :
                          u8(253);
                          return vu32(152);
                      case /* MaxU */6 :
                          u8(253);
                          return vu32(153);
                      case /* AvgrU */7 :
                          u8(253);
                          return vu32(155);
                      case /* AddSatS */8 :
                          u8(253);
                          return vu32(143);
                      case /* AddSatU */9 :
                          u8(253);
                          return vu32(144);
                      case /* SubSatS */10 :
                          u8(253);
                          return vu32(146);
                      case /* SubSatU */11 :
                          u8(253);
                          return vu32(147);
                      case /* Q15MulRSatS */13 :
                          u8(253);
                          return vu32(130);
                      case /* ExtMulLowS */14 :
                          u8(253);
                          return vu32(156);
                      case /* ExtMulHighS */15 :
                          u8(253);
                          return vu32(157);
                      case /* ExtMulLowU */16 :
                          u8(253);
                          return vu32(158);
                      case /* ExtMulHighU */17 :
                          u8(253);
                          return vu32(159);
                      case /* DotS */12 :
                      case /* Swizzle */18 :
                          break;
                      case /* NarrowS */19 :
                          u8(253);
                          return vu32(133);
                      case /* NarrowU */20 :
                          u8(253);
                          return vu32(134);
                      
                    }
                  }
                  break;
              case /* I32x4 */2 :
                  var match$20 = match$18._0;
                  if (typeof match$20 === "number") {
                    switch (match$20) {
                      case /* Add */0 :
                          u8(253);
                          return vu32(174);
                      case /* Sub */1 :
                          u8(253);
                          return vu32(177);
                      case /* Mul */2 :
                          u8(253);
                          return vu32(181);
                      case /* MinS */3 :
                          u8(253);
                          return vu32(182);
                      case /* MinU */4 :
                          u8(253);
                          return vu32(183);
                      case /* MaxS */5 :
                          u8(253);
                          return vu32(184);
                      case /* MaxU */6 :
                          u8(253);
                          return vu32(185);
                      case /* DotS */12 :
                          u8(253);
                          return vu32(186);
                      case /* ExtMulLowS */14 :
                          u8(253);
                          return vu32(188);
                      case /* ExtMulHighS */15 :
                          u8(253);
                          return vu32(189);
                      case /* ExtMulLowU */16 :
                          u8(253);
                          return vu32(190);
                      case /* ExtMulHighU */17 :
                          u8(253);
                          return vu32(191);
                      case /* AvgrU */7 :
                      case /* AddSatS */8 :
                      case /* AddSatU */9 :
                      case /* SubSatS */10 :
                      case /* SubSatU */11 :
                      case /* Q15MulRSatS */13 :
                      case /* Swizzle */18 :
                      case /* NarrowS */19 :
                      case /* NarrowU */20 :
                          break;
                      
                    }
                  }
                  break;
              case /* I64x2 */3 :
                  var match$21 = match$18._0;
                  if (typeof match$21 === "number") {
                    switch (match$21) {
                      case /* Add */0 :
                          u8(253);
                          return vu32(206);
                      case /* Sub */1 :
                          u8(253);
                          return vu32(209);
                      case /* Mul */2 :
                          u8(253);
                          return vu32(213);
                      case /* ExtMulLowS */14 :
                          u8(253);
                          return vu32(220);
                      case /* ExtMulHighS */15 :
                          u8(253);
                          return vu32(221);
                      case /* ExtMulLowU */16 :
                          u8(253);
                          return vu32(222);
                      case /* ExtMulHighU */17 :
                          u8(253);
                          return vu32(223);
                      case /* MinS */3 :
                      case /* MinU */4 :
                      case /* MaxS */5 :
                      case /* MaxU */6 :
                      case /* AvgrU */7 :
                      case /* AddSatS */8 :
                      case /* AddSatU */9 :
                      case /* SubSatS */10 :
                      case /* SubSatU */11 :
                      case /* DotS */12 :
                      case /* Q15MulRSatS */13 :
                      case /* Swizzle */18 :
                      case /* NarrowS */19 :
                      case /* NarrowU */20 :
                          break;
                      
                    }
                  }
                  break;
              case /* F32x4 */4 :
                  switch (match$18._0) {
                    case /* Add */0 :
                        u8(253);
                        return vu32(228);
                    case /* Sub */1 :
                        u8(253);
                        return vu32(229);
                    case /* Mul */2 :
                        u8(253);
                        return vu32(230);
                    case /* Div */3 :
                        u8(253);
                        return vu32(231);
                    case /* Min */4 :
                        u8(253);
                        return vu32(232);
                    case /* Max */5 :
                        u8(253);
                        return vu32(233);
                    case /* Pmin */6 :
                        u8(253);
                        return vu32(234);
                    case /* Pmax */7 :
                        u8(253);
                        return vu32(235);
                    
                  }
              case /* F64x2 */5 :
                  switch (match$18._0) {
                    case /* Add */0 :
                        u8(253);
                        return vu32(240);
                    case /* Sub */1 :
                        u8(253);
                        return vu32(241);
                    case /* Mul */2 :
                        u8(253);
                        return vu32(242);
                    case /* Div */3 :
                        u8(253);
                        return vu32(243);
                    case /* Min */4 :
                        u8(253);
                        return vu32(244);
                    case /* Max */5 :
                        u8(253);
                        return vu32(245);
                    case /* Pmin */6 :
                        u8(253);
                        return vu32(246);
                    case /* Pmax */7 :
                        u8(253);
                        return vu32(247);
                    
                  }
              
            }
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "encode.ml",
                    617,
                    28
                  ],
                  Error: new Error()
                };
        case /* VecConvert */43 :
            var match$22 = x._0._0;
            switch (match$22.TAG | 0) {
              case /* I8x16 */0 :
                  throw {
                        RE_EXN_ID: "Assert_failure",
                        _1: [
                          "encode.ml",
                          619,
                          37
                        ],
                        Error: new Error()
                      };
              case /* I16x8 */1 :
                  switch (match$22._0) {
                    case /* ExtendLowS */0 :
                        u8(253);
                        return vu32(135);
                    case /* ExtendLowU */1 :
                        u8(253);
                        return vu32(137);
                    case /* ExtendHighS */2 :
                        u8(253);
                        return vu32(136);
                    case /* ExtendHighU */3 :
                        u8(253);
                        return vu32(138);
                    case /* ExtAddPairwiseS */4 :
                        u8(253);
                        return vu32(124);
                    case /* ExtAddPairwiseU */5 :
                        u8(253);
                        return vu32(125);
                    case /* TruncSatSF32x4 */6 :
                    case /* TruncSatUF32x4 */7 :
                    case /* TruncSatSZeroF64x2 */8 :
                    case /* TruncSatUZeroF64x2 */9 :
                        break;
                    
                  }
                  throw {
                        RE_EXN_ID: "Assert_failure",
                        _1: [
                          "encode.ml",
                          626,
                          37
                        ],
                        Error: new Error()
                      };
              case /* I32x4 */2 :
                  switch (match$22._0) {
                    case /* ExtendLowS */0 :
                        u8(253);
                        return vu32(167);
                    case /* ExtendLowU */1 :
                        u8(253);
                        return vu32(169);
                    case /* ExtendHighS */2 :
                        u8(253);
                        return vu32(168);
                    case /* ExtendHighU */3 :
                        u8(253);
                        return vu32(170);
                    case /* ExtAddPairwiseS */4 :
                        u8(253);
                        return vu32(126);
                    case /* ExtAddPairwiseU */5 :
                        u8(253);
                        return vu32(127);
                    case /* TruncSatSF32x4 */6 :
                        u8(253);
                        return vu32(248);
                    case /* TruncSatUF32x4 */7 :
                        u8(253);
                        return vu32(249);
                    case /* TruncSatSZeroF64x2 */8 :
                        u8(253);
                        return vu32(252);
                    case /* TruncSatUZeroF64x2 */9 :
                        u8(253);
                        return vu32(253);
                    
                  }
              case /* I64x2 */3 :
                  switch (match$22._0) {
                    case /* ExtendLowS */0 :
                        u8(253);
                        return vu32(199);
                    case /* ExtendLowU */1 :
                        u8(253);
                        return vu32(201);
                    case /* ExtendHighS */2 :
                        u8(253);
                        return vu32(200);
                    case /* ExtendHighU */3 :
                        u8(253);
                        return vu32(202);
                    case /* ExtAddPairwiseS */4 :
                    case /* ExtAddPairwiseU */5 :
                    case /* TruncSatSF32x4 */6 :
                    case /* TruncSatUF32x4 */7 :
                    case /* TruncSatSZeroF64x2 */8 :
                    case /* TruncSatUZeroF64x2 */9 :
                        break;
                    
                  }
                  throw {
                        RE_EXN_ID: "Assert_failure",
                        _1: [
                          "encode.ml",
                          641,
                          37
                        ],
                        Error: new Error()
                      };
              case /* F32x4 */4 :
                  switch (match$22._0) {
                    case /* DemoteZeroF64x2 */0 :
                        u8(253);
                        return vu32(94);
                    case /* PromoteLowF32x4 */1 :
                        throw {
                              RE_EXN_ID: "Assert_failure",
                              _1: [
                                "encode.ml",
                                643,
                                58
                              ],
                              Error: new Error()
                            };
                    case /* ConvertSI32x4 */2 :
                        u8(253);
                        return vu32(250);
                    case /* ConvertUI32x4 */3 :
                        u8(253);
                        return vu32(251);
                    
                  }
              case /* F64x2 */5 :
                  switch (match$22._0) {
                    case /* DemoteZeroF64x2 */0 :
                        throw {
                              RE_EXN_ID: "Assert_failure",
                              _1: [
                                "encode.ml",
                                646,
                                58
                              ],
                              Error: new Error()
                            };
                    case /* PromoteLowF32x4 */1 :
                        u8(253);
                        return vu32(95);
                    case /* ConvertSI32x4 */2 :
                        u8(253);
                        return vu32(254);
                    case /* ConvertUI32x4 */3 :
                        u8(253);
                        return vu32(255);
                    
                  }
              
            }
            break;
        case /* VecShift */44 :
            var match$23 = x._0._0;
            switch (match$23.TAG | 0) {
              case /* I8x16 */0 :
                  switch (match$23._0) {
                    case /* Shl */0 :
                        u8(253);
                        return vu32(107);
                    case /* ShrS */1 :
                        u8(253);
                        return vu32(108);
                    case /* ShrU */2 :
                        u8(253);
                        return vu32(109);
                    
                  }
              case /* I16x8 */1 :
                  switch (match$23._0) {
                    case /* Shl */0 :
                        u8(253);
                        return vu32(139);
                    case /* ShrS */1 :
                        u8(253);
                        return vu32(140);
                    case /* ShrU */2 :
                        u8(253);
                        return vu32(141);
                    
                  }
              case /* I32x4 */2 :
                  switch (match$23._0) {
                    case /* Shl */0 :
                        u8(253);
                        return vu32(171);
                    case /* ShrS */1 :
                        u8(253);
                        return vu32(172);
                    case /* ShrU */2 :
                        u8(253);
                        return vu32(173);
                    
                  }
              case /* I64x2 */3 :
                  switch (match$23._0) {
                    case /* Shl */0 :
                        u8(253);
                        return vu32(203);
                    case /* ShrS */1 :
                        u8(253);
                        return vu32(204);
                    case /* ShrU */2 :
                        u8(253);
                        return vu32(205);
                    
                  }
              case /* F32x4 */4 :
              case /* F64x2 */5 :
                  throw {
                        RE_EXN_ID: "Assert_failure",
                        _1: [
                          "encode.ml",
                          663,
                          27
                        ],
                        Error: new Error()
                      };
              
            }
        case /* VecBitmask */45 :
            switch (x._0._0.TAG | 0) {
              case /* I8x16 */0 :
                  u8(253);
                  return vu32(100);
              case /* I16x8 */1 :
                  u8(253);
                  return vu32(132);
              case /* I32x4 */2 :
                  u8(253);
                  return vu32(164);
              case /* I64x2 */3 :
                  u8(253);
                  return vu32(196);
              case /* F32x4 */4 :
              case /* F64x2 */5 :
                  throw {
                        RE_EXN_ID: "Assert_failure",
                        _1: [
                          "encode.ml",
                          669,
                          29
                        ],
                        Error: new Error()
                      };
              
            }
        case /* VecTestBits */46 :
            u8(253);
            return vu32(83);
        case /* VecUnaryBits */47 :
            u8(253);
            return vu32(77);
        case /* VecBinaryBits */48 :
            switch (x._0._0) {
              case /* And */0 :
                  u8(253);
                  return vu32(78);
              case /* Or */1 :
                  u8(253);
                  return vu32(80);
              case /* Xor */2 :
                  u8(253);
                  return vu32(81);
              case /* AndNot */3 :
                  u8(253);
                  return vu32(79);
              
            }
        case /* VecTernaryBits */49 :
            u8(253);
            return vu32(82);
        case /* VecSplat */50 :
            switch (x._0._0.TAG | 0) {
              case /* I8x16 */0 :
                  u8(253);
                  return vu32(15);
              case /* I16x8 */1 :
                  u8(253);
                  return vu32(16);
              case /* I32x4 */2 :
                  u8(253);
                  return vu32(17);
              case /* I64x2 */3 :
                  u8(253);
                  return vu32(18);
              case /* F32x4 */4 :
                  u8(253);
                  return vu32(19);
              case /* F64x2 */5 :
                  u8(253);
                  return vu32(20);
              
            }
        case /* VecExtract */51 :
            var match$24 = x._0._0;
            switch (match$24.TAG | 0) {
              case /* I8x16 */0 :
                  var match$25 = match$24._0;
                  var i$1 = match$25._0;
                  if (match$25._1) {
                    u8(253);
                    vu32(22);
                    return u8(i$1);
                  } else {
                    u8(253);
                    vu32(21);
                    return u8(i$1);
                  }
              case /* I16x8 */1 :
                  var match$26 = match$24._0;
                  var i$2 = match$26._0;
                  if (match$26._1) {
                    u8(253);
                    vu32(25);
                    return u8(i$2);
                  } else {
                    u8(253);
                    vu32(24);
                    return u8(i$2);
                  }
              case /* I32x4 */2 :
                  u8(253);
                  vu32(27);
                  return u8(match$24._0._0);
              case /* I64x2 */3 :
                  u8(253);
                  vu32(29);
                  return u8(match$24._0._0);
              case /* F32x4 */4 :
                  u8(253);
                  vu32(31);
                  return u8(match$24._0._0);
              case /* F64x2 */5 :
                  u8(253);
                  vu32(33);
                  return u8(match$24._0._0);
              
            }
        case /* VecReplace */52 :
            var match$27 = x._0._0;
            switch (match$27.TAG | 0) {
              case /* I8x16 */0 :
                  u8(253);
                  vu32(23);
                  return u8(match$27._0._0);
              case /* I16x8 */1 :
                  u8(253);
                  vu32(26);
                  return u8(match$27._0._0);
              case /* I32x4 */2 :
                  u8(253);
                  vu32(28);
                  return u8(match$27._0._0);
              case /* I64x2 */3 :
                  u8(253);
                  vu32(30);
                  return u8(match$27._0._0);
              case /* F32x4 */4 :
                  u8(253);
                  vu32(32);
                  return u8(match$27._0._0);
              case /* F64x2 */5 :
                  u8(253);
                  vu32(34);
                  return u8(match$27._0._0);
              
            }
        
      }
    }
  };
  var custom = function (param) {
    string(Utf8.encode(param[0]));
    return $$Buffer.add_string(stream$1.buf, param[1]);
  };
  var custom_section = function (n, bs) {
    var id = 0;
    var x = [
      n,
      bs
    ];
    var needed = true;
    if (!needed) {
      return ;
    }
    u8(id);
    var g = gap32(undefined);
    var p = $$Buffer.length(stream$1.buf);
    Curry._1(custom, x);
    var n$1 = $$Buffer.length(stream$1.buf) - p | 0;
    if (n$1 > 268435455) {
      throw {
            RE_EXN_ID: "Assert_failure",
            _1: [
              "encode.ml",
              83,
              4
            ],
            Error: new Error()
          };
    }
    patch(stream$1, g, Char.chr((n$1 | 128) & 255));
    patch(stream$1, g + 1 | 0, Char.chr(((n$1 >>> 7) | 128) & 255));
    patch(stream$1, g + 2 | 0, Char.chr(((n$1 >>> 14) | 128) & 255));
    patch(stream$1, g + 3 | 0, Char.chr(((n$1 >>> 21) | 128) & 255));
    return patch(stream$1, g + 4 | 0, Char.chr((n$1 >>> 28) & 255));
  };
  custom_section(name, content);
  return to_string(stream$1);
}

var Code$1 = Code.$$Error;

var version = 1;

exports.Code = Code$1;
exports.version = version;
exports.encode = encode;
exports.encode_custom = encode_custom;
/* Code Not a pure module */
