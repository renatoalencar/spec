// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Int32 = require("rescript/lib/js/int32.js");
var Values = require("../syntax/values.bs.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");

var ExternRef = /* @__PURE__ */Caml_exceptions.create("Script.ExternRef");

var Syntax = /* @__PURE__ */Caml_exceptions.create("Script.Syntax");

var type_of_ref$p = Values.type_of_ref$p.contents;

Values.type_of_ref$p.contents = (function (r) {
    if (r.RE_EXN_ID === ExternRef) {
      return /* ExternRefType */1;
    } else {
      return Curry._1(type_of_ref$p, r);
    }
  });

var string_of_ref$p = Values.string_of_ref$p.contents;

Values.string_of_ref$p.contents = (function (n) {
    if (n.RE_EXN_ID === ExternRef) {
      return "ref " + Int32.to_string(n._1);
    } else {
      return Curry._1(string_of_ref$p, n);
    }
  });

var eq_ref$p = Values.eq_ref$p.contents;

Values.eq_ref$p.contents = (function (r1, r2) {
    if (r1.RE_EXN_ID === ExternRef && r2.RE_EXN_ID === ExternRef) {
      return r1._1 === r2._1;
    } else {
      return Curry._2(eq_ref$p, r1, r2);
    }
  });

exports.ExternRef = ExternRef;
exports.Syntax = Syntax;
/*  Not a pure module */
