// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Ast from "../syntax/ast.mjs";
import * as $$Map from "rescript/lib/es6/map.js";
import * as List from "rescript/lib/es6/list.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as $$Error from "../util/error.mjs";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

var Unknown = $$Error.Make({});

var compare = Caml_obj.caml_compare;

var Registry = $$Map.Make({
      compare: compare
    });

var registry = {
  contents: Registry.empty
};

function register(name, lookup) {
  registry.contents = Curry._3(Registry.add, name, lookup, registry.contents);
  
}

function link(m) {
  return List.map((function (param) {
                var match = param.it;
                var item_name = match.item_name;
                var module_name = match.module_name;
                var t = Ast.import_type(m, param);
                try {
                  return Curry._4(Registry.find, module_name, registry.contents, item_name, t);
                }
                catch (raw_exn){
                  var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                  if (exn.RE_EXN_ID === "Not_found") {
                    return Curry._2(Unknown.error, param.at, "unknown import \"" + (Ast.string_of_name(module_name) + ("\".\"" + (Ast.string_of_name(item_name) + "\""))));
                  }
                  throw exn;
                }
              }), m.it.imports);
}

var Unknown$1 = Unknown.$$Error;

export {
  Unknown$1 as Unknown,
  link ,
  register ,
  
}
/* Unknown Not a pure module */
