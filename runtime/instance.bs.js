// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Func from "./func.bs.js";
import * as List from "rescript/lib/es6/list.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Table from "./table.bs.js";
import * as Global from "./global.bs.js";
import * as Memory from "./memory.bs.js";
import * as Values from "../syntax/values.bs.js";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

var FuncRef = /* @__PURE__ */Caml_exceptions.create("Instance.FuncRef");

var type_of_ref$p = Values.type_of_ref$p.contents;

Values.type_of_ref$p.contents = (function (r) {
    if (r.RE_EXN_ID === FuncRef) {
      return /* FuncRefType */0;
    } else {
      return Curry._1(type_of_ref$p, r);
    }
  });

var string_of_ref$p = Values.string_of_ref$p.contents;

Values.string_of_ref$p.contents = (function (r) {
    if (r.RE_EXN_ID === FuncRef) {
      return "func";
    } else {
      return Curry._1(string_of_ref$p, r);
    }
  });

var eq_ref$p = Values.eq_ref$p.contents;

Values.eq_ref$p.contents = (function (r1, r2) {
    if (r1.RE_EXN_ID === FuncRef && r2.RE_EXN_ID === FuncRef) {
      return r1._1 === r2._1;
    } else {
      return Curry._2(eq_ref$p, r1, r2);
    }
  });

function extern_type_of(func) {
  switch (func.TAG | 0) {
    case /* ExternFunc */0 :
        return {
                TAG: /* ExternFuncType */0,
                _0: Func.type_of(func._0)
              };
    case /* ExternTable */1 :
        return {
                TAG: /* ExternTableType */1,
                _0: Table.type_of(func._0)
              };
    case /* ExternMemory */2 :
        return {
                TAG: /* ExternMemoryType */2,
                _0: Memory.type_of(func._0)
              };
    case /* ExternGlobal */3 :
        return {
                TAG: /* ExternGlobalType */3,
                _0: Global.type_of(func._0)
              };
    
  }
}

function $$export(inst, name) {
  try {
    return List.assoc(name, inst.exports);
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === "Not_found") {
      return ;
    }
    throw exn;
  }
}

var empty_module_inst = {
  types: /* [] */0,
  funcs: /* [] */0,
  tables: /* [] */0,
  memories: /* [] */0,
  globals: /* [] */0,
  exports: /* [] */0,
  elems: /* [] */0,
  datas: /* [] */0
};

export {
  FuncRef ,
  empty_module_inst ,
  extern_type_of ,
  $$export ,
  
}
/*  Not a pure module */
