// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");

var Type = /* @__PURE__ */Caml_exceptions.create("Memory.Type");

var Bounds = /* @__PURE__ */Caml_exceptions.create("Memory.Bounds");

var SizeOverflow = /* @__PURE__ */Caml_exceptions.create("Memory.SizeOverflow");

var SizeLimit = /* @__PURE__ */Caml_exceptions.create("Memory.SizeLimit");

var OutOfMemory = /* @__PURE__ */Caml_exceptions.create("Memory.OutOfMemory");

function alloc(param) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "memory.ml",
          20,
          14
        ],
        Error: new Error()
      };
}

function grow(param) {
  return alloc;
}

function load_byte(param) {
  return alloc;
}

function store_byte(param, param$1) {
  return alloc;
}

function load_bytes(param, param$1) {
  return alloc;
}

function store_bytes(param, param$1) {
  return alloc;
}

function load_num(param, param$1) {
  return alloc;
}

function store_num(param, param$1) {
  return alloc;
}

function load_num_packed(param, param$1) {
  return alloc;
}

function store_num_packed(param, param$1) {
  return alloc;
}

function load_vec(param, param$1, param$2) {
  return alloc;
}

function store_vec(param, param$1, param$2) {
  return alloc;
}

function load_vec_packed(param, param$1, param$2, param$3, param$4) {
  return alloc;
}

var page_size = [
  0,
  65535
];

var type_of = alloc;

var size = alloc;

var bound = alloc;

exports.Type = Type;
exports.Bounds = Bounds;
exports.SizeOverflow = SizeOverflow;
exports.SizeLimit = SizeLimit;
exports.OutOfMemory = OutOfMemory;
exports.page_size = page_size;
exports.alloc = alloc;
exports.type_of = type_of;
exports.size = size;
exports.bound = bound;
exports.grow = grow;
exports.load_byte = load_byte;
exports.store_byte = store_byte;
exports.load_bytes = load_bytes;
exports.store_bytes = store_bytes;
exports.load_num = load_num;
exports.store_num = store_num;
exports.load_num_packed = load_num_packed;
exports.store_num_packed = store_num_packed;
exports.load_vec = load_vec;
exports.store_vec = store_vec;
exports.load_vec_packed = load_vec_packed;
/* No side effect */
