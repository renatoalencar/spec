// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var F32 = require("./f32.bs.js");
var F64 = require("./f64.bs.js");
var I64 = require("./i64.bs.js");
var Caml = require("rescript/lib/js/caml.js");
var Curry = require("rescript/lib/js/curry.js");
var Int32 = require("rescript/lib/js/int32.js");
var Int64 = require("rescript/lib/js/int64.js");
var Caml_int64 = require("rescript/lib/js/caml_int64.js");
var I32_convert = require("./i32_convert.bs.js");

function demote_f64(x) {
  var xf = Curry._1(F64.to_float, x);
  if (xf === xf) {
    return Curry._1(F32.of_float, xf);
  }
  var nan64bits = Curry._1(F64.to_bits, x);
  var sign_field = Caml_int64.lsl_(Caml_int64.lsr_(nan64bits, 63), 31);
  var significand_field = Caml_int64.lsr_(Caml_int64.lsl_(nan64bits, 12), 41);
  var fields = Caml_int64.or_(sign_field, significand_field);
  return Curry._1(F32.of_bits, 2143289344 | I32_convert.wrap_i64(fields));
}

function convert_i32_s(x) {
  return Curry._1(F32.of_float, x);
}

function convert_i32_u(x) {
  return Curry._1(F32.of_float, x >= Int32.zero ? x : ((x >>> 1) | x & 1) * 2.0);
}

function convert_i64_s(x) {
  var tmp;
  if (Caml.i64_lt(Int64.abs(x), [
          1048576,
          0
        ])) {
    tmp = Caml_int64.to_float(x);
  } else {
    var r = Caml.i64_eq(Caml_int64.and_(x, [
              0,
              4095
            ]), Caml_int64.zero) ? Caml_int64.zero : Caml_int64.one;
    tmp = Caml_int64.to_float(Caml_int64.or_(Caml_int64.asr_(x, 12), r)) * 4096;
  }
  return Curry._1(F32.of_float, tmp);
}

function convert_i64_u(x) {
  var tmp;
  if (Curry._2(I64.lt_u, x, [
          1048576,
          0
        ])) {
    tmp = Caml_int64.to_float(x);
  } else {
    var r = Caml.i64_eq(Caml_int64.and_(x, [
              0,
              4095
            ]), Caml_int64.zero) ? Caml_int64.zero : Caml_int64.one;
    tmp = Caml_int64.to_float(Caml_int64.or_(Caml_int64.lsr_(x, 12), r)) * 4096;
  }
  return Curry._1(F32.of_float, tmp);
}

var reinterpret_i32 = F32.of_bits;

exports.demote_f64 = demote_f64;
exports.convert_i32_s = convert_i32_s;
exports.convert_i32_u = convert_i32_u;
exports.convert_i64_s = convert_i64_s;
exports.convert_i64_u = convert_i64_u;
exports.reinterpret_i32 = reinterpret_i32;
/* F32 Not a pure module */
