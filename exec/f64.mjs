// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fxx from "./fxx.mjs";
import * as Int64 from "rescript/lib/es6/int64.js";
import * as Printf from "rescript/lib/es6/printf.js";
import * as Caml_int64 from "rescript/lib/es6/caml_int64.js";
import * as Caml_format from "rescript/lib/es6/caml_format.js";

var to_hex_string = Printf.sprintf(/* Format */{
      _0: {
        TAG: /* Int64 */7,
        _0: /* Int_x */6,
        _1: /* No_padding */0,
        _2: /* No_precision */0,
        _3: /* End_of_format */0
      },
      _1: "%Lx"
    });

var include = Fxx.Make({
      mantissa: 52,
      zero: Int64.zero,
      min_int: Int64.min_int,
      max_int: Int64.max_int,
      pos_nan: [
        2146959360,
        0
      ],
      neg_nan: [
        -524288,
        0
      ],
      bare_nan: [
        2146435072,
        0
      ],
      bits_of_float: Caml_int64.bits_of_float,
      float_of_bits: Caml_int64.float_of_bits,
      of_string: Caml_format.caml_int64_of_string,
      to_string: Int64.to_string,
      to_hex_string: to_hex_string,
      lognot: Int64.lognot,
      logand: Caml_int64.and_,
      logor: Caml_int64.or_,
      logxor: Caml_int64.xor
    });

var pos_nan = include.pos_nan;

var neg_nan = include.neg_nan;

var is_inf = include.is_inf;

var is_nan = include.is_nan;

var of_float = include.of_float;

var to_float = include.to_float;

var of_string = include.of_string;

var to_string = include.to_string;

var to_hex_string$1 = include.to_hex_string;

var of_bits = include.of_bits;

var to_bits = include.to_bits;

var add = include.add;

var sub = include.sub;

var mul = include.mul;

var div = include.div;

var sqrt = include.sqrt;

var min = include.min;

var max = include.max;

var ceil = include.ceil;

var floor = include.floor;

var trunc = include.trunc;

var nearest = include.nearest;

var abs = include.abs;

var neg = include.neg;

var copysign = include.copysign;

var eq = include.eq;

var ne = include.ne;

var lt = include.lt;

var le = include.le;

var gt = include.gt;

var ge = include.ge;

var zero = include.zero;

export {
  pos_nan ,
  neg_nan ,
  is_inf ,
  is_nan ,
  of_float ,
  to_float ,
  of_string ,
  to_string ,
  to_hex_string$1 as to_hex_string,
  of_bits ,
  to_bits ,
  add ,
  sub ,
  mul ,
  div ,
  sqrt ,
  min ,
  max ,
  ceil ,
  floor ,
  trunc ,
  nearest ,
  abs ,
  neg ,
  copysign ,
  eq ,
  ne ,
  lt ,
  le ,
  gt ,
  ge ,
  zero ,
  
}
/* include Not a pure module */
