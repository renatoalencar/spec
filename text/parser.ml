type token =
  | LPAR
  | RPAR
  | NAT of (string)
  | INT of (string)
  | FLOAT of (string)
  | STRING of (string)
  | VAR of (string)
  | NUM_TYPE of (Types.num_type)
  | VEC_TYPE of (Types.vec_type)
  | VEC_SHAPE of (V128.shape)
  | FUNCREF
  | EXTERNREF
  | EXTERN
  | MUT
  | UNREACHABLE
  | NOP
  | DROP
  | SELECT
  | BLOCK
  | END
  | IF
  | THEN
  | ELSE
  | LOOP
  | BR
  | BR_IF
  | BR_TABLE
  | CALL
  | CALL_INDIRECT
  | RETURN
  | LOCAL_GET
  | LOCAL_SET
  | LOCAL_TEE
  | GLOBAL_GET
  | GLOBAL_SET
  | TABLE_GET
  | TABLE_SET
  | TABLE_SIZE
  | TABLE_GROW
  | TABLE_FILL
  | TABLE_COPY
  | TABLE_INIT
  | ELEM_DROP
  | MEMORY_SIZE
  | MEMORY_GROW
  | MEMORY_FILL
  | MEMORY_COPY
  | MEMORY_INIT
  | DATA_DROP
  | LOAD of (int option -> Memory.offset -> Ast.instr')
  | STORE of (int option -> Memory.offset -> Ast.instr')
  | OFFSET_EQ_NAT of (string)
  | ALIGN_EQ_NAT of (string)
  | CONST of (string Source.phrase -> Ast.instr' * Values.num)
  | UNARY of (Ast.instr')
  | BINARY of (Ast.instr')
  | TEST of (Ast.instr')
  | COMPARE of (Ast.instr')
  | CONVERT of (Ast.instr')
  | REF_NULL
  | REF_FUNC
  | REF_EXTERN
  | REF_IS_NULL
  | VEC_LOAD of (int option -> Memory.offset -> Ast.instr')
  | VEC_STORE of (int option -> Memory.offset -> Ast.instr')
  | VEC_LOAD_LANE of (int option -> Memory.offset -> int -> Ast.instr')
  | VEC_STORE_LANE of (int option -> Memory.offset -> int -> Ast.instr')
  | VEC_CONST of (V128.shape -> string Source.phrase list -> Source.region -> Ast.instr' * Values.vec)
  | VEC_UNARY of (Ast.instr')
  | VEC_BINARY of (Ast.instr')
  | VEC_TERNARY of (Ast.instr')
  | VEC_TEST of (Ast.instr')
  | VEC_SHIFT of (Ast.instr')
  | VEC_BITMASK of (Ast.instr')
  | VEC_SHUFFLE
  | VEC_EXTRACT of (int -> Ast.instr')
  | VEC_REPLACE of (int -> Ast.instr')
  | FUNC
  | START
  | TYPE
  | PARAM
  | RESULT
  | LOCAL
  | GLOBAL
  | TABLE
  | ELEM
  | MEMORY
  | DATA
  | DECLARE
  | OFFSET
  | ITEM
  | IMPORT
  | EXPORT
  | MODULE
  | BIN
  | QUOTE
  | SCRIPT
  | REGISTER
  | INVOKE
  | GET
  | ASSERT_MALFORMED
  | ASSERT_INVALID
  | ASSERT_SOFT_INVALID
  | ASSERT_UNLINKABLE
  | ASSERT_RETURN
  | ASSERT_TRAP
  | ASSERT_EXHAUSTION
  | NAN of (Script.nan)
  | INPUT
  | OUTPUT
  | EOF
  | VEC_SPLAT of (Ast.instr')

open Parsing;;
let _ = parse_error;;
# 2 "text/parser.mly"
open Source
open Types
open Ast
open Operators
open Script


(* Error handling *)

let error at msg = raise (Script.Syntax (at, msg))

let parse_error msg =
  error Source.no_region
    (if msg = "syntax error" then "unexpected token" else msg)


(* Position handling *)

let position_to_pos position =
  { file = position.Lexing.pos_fname;
    line = position.Lexing.pos_lnum;
    column = position.Lexing.pos_cnum - position.Lexing.pos_bol
  }

let positions_to_region position1 position2 =
  { left = position_to_pos position1;
    right = position_to_pos position2
  }

let at () =
  positions_to_region (Parsing.symbol_start_pos ()) (Parsing.symbol_end_pos ())
let ati i =
  positions_to_region (Parsing.rhs_start_pos i) (Parsing.rhs_end_pos i)


(* Literals *)

let num f s =
  try f s with Failure _ -> error s.at "constant out of range"

let vec f shape ss at =
  try f shape ss at with
  | Failure _ -> error at "constant out of range"
  | Invalid_argument _ -> error at "wrong number of lane literals"

let vec_lane_nan shape l at =
  let open Values in
  match shape with
  | V128.F32x4 () -> NanPat (F32 l @@ at)
  | V128.F64x2 () -> NanPat (F64 l @@ at)
  | _ -> error at "invalid vector constant"

let vec_lane_lit shape l at =
  let open Values in
  match shape with
  | V128.I8x16 () -> NumPat (I32 (I8.of_string l) @@ at)
  | V128.I16x8 () -> NumPat (I32 (I16.of_string l) @@ at)
  | V128.I32x4 () -> NumPat (I32 (I32.of_string l) @@ at)
  | V128.I64x2 () -> NumPat (I64 (I64.of_string l) @@ at)
  | V128.F32x4 () -> NumPat (F32 (F32.of_string l) @@ at)
  | V128.F64x2 () -> NumPat (F64 (F64.of_string l) @@ at)

let vec_lane_index s at =
  match int_of_string s with
  | exception Failure _ -> error at "malformed lane index"
  | _ -> error at "malformed lane index"
  | n when 0 <= n && n < 256 -> n

let shuffle_lit ss at =
  if not (List.length ss = 16) then
    error at "invalid lane length";
  List.map (fun s -> vec_lane_index s.it s.at) ss

let nanop f nan =
  let open Source in
  let open Values in
  match snd (f ("0" @@ no_region)) with
  | F32 _ -> F32 nan.it @@ nan.at
  | F64 _ -> F64 nan.it @@ nan.at
  | I32 _ | I64 _ -> error nan.at "NaN pattern with non-float type"

let nat s at =
  try
    let n = int_of_string s in
    if n >= 0 then n else raise (Failure "")
  with Failure _ -> error at "integer constant out of range"

let nat32 s at =
  try I32.of_string_u s with Failure _ -> error at "i32 constant out of range"

let name s at =
  try Utf8.decode s with Utf8.Utf8 -> error at "malformed UTF-8 encoding"


(* Symbolic variables *)

module VarMap = Map.Make(String)

type space = {mutable map : int32 VarMap.t; mutable count : int32}
let empty () = {map = VarMap.empty; count = 0l}

type types = {space : space; mutable list : type_ list}
let empty_types () = {space = empty (); list = []}

type context =
  { types : types; tables : space; memories : space;
    funcs : space; locals : space; globals : space;
    datas : space; elems : space;
    labels : int32 VarMap.t; deferred_locals : (unit -> unit) list ref
  }

let empty_context () =
  { types = empty_types (); tables = empty (); memories = empty ();
    funcs = empty (); locals = empty (); globals = empty ();
    datas = empty (); elems = empty ();
    labels = VarMap.empty; deferred_locals = ref []
  }

external apply : ('a -> 'b) -> 'a -> 'b = "%apply"

let force_locals (c : context) =
  List.fold_right apply !(c.deferred_locals) ();
  c.deferred_locals := []

let enter_func (c : context) =
  {c with labels = VarMap.empty; locals = empty ()}

let lookup category space x =
  try VarMap.find x.it space.map
  with Not_found -> error x.at ("unknown " ^ category ^ " " ^ x.it)

let type_ (c : context) x = lookup "type" c.types.space x
let func (c : context) x = lookup "function" c.funcs x
let local (c : context) x = force_locals c; lookup "local" c.locals x
let global (c : context) x = lookup "global" c.globals x
let table (c : context) x = lookup "table" c.tables x
let memory (c : context) x = lookup "memory" c.memories x
let elem (c : context) x = lookup "elem segment" c.elems x
let data (c : context) x = lookup "data segment" c.datas x
let label (c : context) x =
  try VarMap.find x.it c.labels
  with Not_found -> error x.at ("unknown label " ^ x.it)

let func_type (c : context) x =
  try (Lib.List32.nth c.types.list x.it).it
  with Failure _ -> error x.at ("unknown type " ^ Int32.to_string x.it)


let anon category space n =
  let i = space.count in
  space.count <- Int32.add i n;
  if I32.lt_u space.count n then
    error no_region ("too many " ^ category ^ " bindings");
  i

let bind category space x =
  let i = anon category space 1l in
  if VarMap.mem x.it space.map then
    error x.at ("duplicate " ^ category ^ " " ^ x.it);
  space.map <- VarMap.add x.it i space.map;
  i

let bind_type (c : context) x ty =
  c.types.list <- c.types.list @ [ty];
  bind "type" c.types.space x
let bind_func (c : context) x = bind "function" c.funcs x
let bind_local (c : context) x = force_locals c; bind "local" c.locals x
let bind_global (c : context) x = bind "global" c.globals x
let bind_table (c : context) x = bind "table" c.tables x
let bind_memory (c : context) x = bind "memory" c.memories x
let bind_elem (c : context) x = bind "elem segment" c.elems x
let bind_data (c : context) x = bind "data segment" c.datas x
let bind_label (c : context) x =
  {c with labels = VarMap.add x.it 0l (VarMap.map (Int32.add 1l) c.labels)}

let anon_type (c : context) ty =
  c.types.list <- c.types.list @ [ty];
  anon "type" c.types.space 1l
let anon_func (c : context) = anon "function" c.funcs 1l
let anon_locals (c : context) lazy_ts =
  let f () =
    ignore (anon "local" c.locals (Lib.List32.length (Lazy.force lazy_ts)))
  in c.deferred_locals := f :: !(c.deferred_locals)
let anon_global (c : context) = anon "global" c.globals 1l
let anon_table (c : context) = anon "table" c.tables 1l
let anon_memory (c : context) = anon "memory" c.memories 1l
let anon_elem (c : context) = anon "elem segment" c.elems 1l
let anon_data (c : context) = anon "data segment" c.datas 1l
let anon_label (c : context) =
  {c with labels = VarMap.map (Int32.add 1l) c.labels}


let inline_type (c : context) ft at =
  match Lib.List.index_where (fun ty -> ty.it = ft) c.types.list with
  | Some i -> Int32.of_int i @@ at
  | None -> anon_type c (ft @@ at) @@ at

let inline_type_explicit (c : context) x ft at =
  if ft = FuncType ([], []) then
    (* Laziness ensures that type lookup is only triggered when
       symbolic identifiers are used, and not for desugared functions *)
    anon_locals c (lazy (let FuncType (ts, _) = func_type c x in ts))
  else if ft <> func_type c x then
    error at "inline function type does not match explicit type";
  x

# 322 "text/parser.ml"
let yytransl_const = [|
  257 (* LPAR *);
  258 (* RPAR *);
  267 (* FUNCREF *);
  268 (* EXTERNREF *);
  269 (* EXTERN *);
  270 (* MUT *);
  271 (* UNREACHABLE *);
  272 (* NOP *);
  273 (* DROP *);
  274 (* SELECT *);
  275 (* BLOCK *);
  276 (* END *);
  277 (* IF *);
  278 (* THEN *);
  279 (* ELSE *);
  280 (* LOOP *);
  281 (* BR *);
  282 (* BR_IF *);
  283 (* BR_TABLE *);
  284 (* CALL *);
  285 (* CALL_INDIRECT *);
  286 (* RETURN *);
  287 (* LOCAL_GET *);
  288 (* LOCAL_SET *);
  289 (* LOCAL_TEE *);
  290 (* GLOBAL_GET *);
  291 (* GLOBAL_SET *);
  292 (* TABLE_GET *);
  293 (* TABLE_SET *);
  294 (* TABLE_SIZE *);
  295 (* TABLE_GROW *);
  296 (* TABLE_FILL *);
  297 (* TABLE_COPY *);
  298 (* TABLE_INIT *);
  299 (* ELEM_DROP *);
  300 (* MEMORY_SIZE *);
  301 (* MEMORY_GROW *);
  302 (* MEMORY_FILL *);
  303 (* MEMORY_COPY *);
  304 (* MEMORY_INIT *);
  305 (* DATA_DROP *);
  316 (* REF_NULL *);
  317 (* REF_FUNC *);
  318 (* REF_EXTERN *);
  319 (* REF_IS_NULL *);
  331 (* VEC_SHUFFLE *);
  334 (* FUNC *);
  335 (* START *);
  336 (* TYPE *);
  337 (* PARAM *);
  338 (* RESULT *);
  339 (* LOCAL *);
  340 (* GLOBAL *);
  341 (* TABLE *);
  342 (* ELEM *);
  343 (* MEMORY *);
  344 (* DATA *);
  345 (* DECLARE *);
  346 (* OFFSET *);
  347 (* ITEM *);
  348 (* IMPORT *);
  349 (* EXPORT *);
  350 (* MODULE *);
  351 (* BIN *);
  352 (* QUOTE *);
  353 (* SCRIPT *);
  354 (* REGISTER *);
  355 (* INVOKE *);
  356 (* GET *);
  357 (* ASSERT_MALFORMED *);
  358 (* ASSERT_INVALID *);
  359 (* ASSERT_SOFT_INVALID *);
  360 (* ASSERT_UNLINKABLE *);
  361 (* ASSERT_RETURN *);
  362 (* ASSERT_TRAP *);
  363 (* ASSERT_EXHAUSTION *);
  365 (* INPUT *);
  366 (* OUTPUT *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  259 (* NAT *);
  260 (* INT *);
  261 (* FLOAT *);
  262 (* STRING *);
  263 (* VAR *);
  264 (* NUM_TYPE *);
  265 (* VEC_TYPE *);
  266 (* VEC_SHAPE *);
  306 (* LOAD *);
  307 (* STORE *);
  308 (* OFFSET_EQ_NAT *);
  309 (* ALIGN_EQ_NAT *);
  310 (* CONST *);
  311 (* UNARY *);
  312 (* BINARY *);
  313 (* TEST *);
  314 (* COMPARE *);
  315 (* CONVERT *);
  320 (* VEC_LOAD *);
  321 (* VEC_STORE *);
  322 (* VEC_LOAD_LANE *);
  323 (* VEC_STORE_LANE *);
  324 (* VEC_CONST *);
  325 (* VEC_UNARY *);
  326 (* VEC_BINARY *);
  327 (* VEC_TERNARY *);
  328 (* VEC_TEST *);
  329 (* VEC_SHIFT *);
  330 (* VEC_BITMASK *);
  332 (* VEC_EXTRACT *);
  333 (* VEC_REPLACE *);
  364 (* NAN *);
  367 (* VEC_SPLAT *);
    0|]

let yylhs = "\255\255\
\004\000\005\000\005\000\006\000\006\000\007\000\007\000\008\000\
\008\000\008\000\009\000\009\000\010\000\010\000\011\000\012\000\
\012\000\012\000\013\000\013\000\015\000\017\000\016\000\016\000\
\018\000\020\000\020\000\020\000\021\000\021\000\019\000\019\000\
\022\000\022\000\023\000\023\000\014\000\024\000\024\000\025\000\
\025\000\026\000\026\000\027\000\027\000\028\000\028\000\028\000\
\028\000\028\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\034\000\035\000\
\035\000\030\000\036\000\036\000\037\000\037\000\038\000\038\000\
\039\000\039\000\040\000\040\000\031\000\031\000\041\000\041\000\
\042\000\042\000\043\000\043\000\032\000\032\000\032\000\032\000\
\044\000\044\000\046\000\046\000\047\000\047\000\033\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\050\000\050\000\
\051\000\051\000\053\000\053\000\054\000\054\000\052\000\052\000\
\055\000\055\000\056\000\056\000\057\000\057\000\057\000\045\000\
\045\000\045\000\045\000\049\000\049\000\058\000\059\000\060\000\
\060\000\060\000\060\000\060\000\063\000\063\000\063\000\065\000\
\065\000\061\000\061\000\061\000\066\000\066\000\067\000\067\000\
\067\000\068\000\069\000\070\000\070\000\071\000\072\000\072\000\
\073\000\073\000\074\000\075\000\075\000\076\000\076\000\076\000\
\076\000\076\000\077\000\078\000\078\000\078\000\078\000\078\000\
\079\000\079\000\079\000\080\000\081\000\081\000\081\000\081\000\
\082\000\083\000\083\000\083\000\084\000\084\000\084\000\084\000\
\084\000\085\000\062\000\086\000\086\000\086\000\086\000\087\000\
\064\000\088\000\089\000\089\000\090\000\091\000\091\000\092\000\
\092\000\092\000\092\000\092\000\092\000\092\000\092\000\092\000\
\092\000\093\000\093\000\094\000\095\000\096\000\097\000\097\000\
\098\000\098\000\098\000\099\000\099\000\101\000\101\000\101\000\
\101\000\101\000\101\000\101\000\103\000\103\000\103\000\103\000\
\103\000\105\000\105\000\104\000\104\000\104\000\104\000\106\000\
\107\000\108\000\108\000\109\000\109\000\109\000\100\000\100\000\
\110\000\110\000\111\000\111\000\112\000\112\000\112\000\112\000\
\112\000\112\000\102\000\102\000\001\000\001\000\002\000\003\000\
\003\000\000\000\000\000\000\000"

let yylen = "\002\000\
\001\000\000\000\002\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\000\000\002\000\001\000\004\000\004\000\001\000\
\005\000\006\000\000\000\005\000\002\000\001\000\001\000\002\000\
\004\000\001\000\001\000\001\000\000\000\002\000\001\000\001\000\
\000\000\002\000\000\000\001\000\001\000\000\000\001\000\000\000\
\001\000\000\000\001\000\000\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\002\000\002\000\003\000\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\003\000\003\000\001\000\001\000\
\001\000\001\000\001\000\001\000\002\000\002\000\003\000\003\000\
\003\000\003\000\004\000\004\000\001\000\001\000\001\000\001\000\
\002\000\002\000\002\000\001\000\002\000\002\000\001\000\001\000\
\001\000\001\000\001\000\003\000\001\000\001\000\001\000\001\000\
\001\000\001\000\002\000\001\000\002\000\002\000\002\000\005\000\
\000\000\002\000\005\000\001\000\003\000\002\000\002\000\001\000\
\005\000\001\000\005\000\000\000\003\000\002\000\002\000\001\000\
\005\000\001\000\005\000\001\000\005\000\005\000\005\000\008\000\
\002\000\001\000\001\000\005\000\001\000\005\000\003\000\002\000\
\002\000\003\000\002\000\003\000\003\000\003\000\005\000\001\000\
\002\000\001\000\005\000\001\000\005\000\001\000\002\000\001\000\
\001\000\005\000\001\000\005\000\002\000\008\000\004\000\000\000\
\001\000\001\000\002\000\000\000\002\000\001\000\005\000\002\000\
\001\000\003\000\002\000\002\000\001\000\005\000\006\000\000\000\
\005\000\001\000\005\000\006\000\001\000\005\000\001\000\005\000\
\006\000\004\000\004\000\004\000\001\000\001\000\004\000\001\000\
\000\000\002\000\001\000\002\000\002\000\005\000\007\000\006\000\
\006\000\006\000\005\000\001\000\002\000\002\000\005\000\006\000\
\005\000\007\000\006\000\005\000\001\000\002\000\002\000\004\000\
\005\000\002\000\002\000\002\000\005\000\005\000\005\000\005\000\
\005\000\006\000\005\000\004\000\004\000\004\000\004\000\005\000\
\004\000\001\000\004\000\005\000\004\000\000\000\001\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\000\000\001\000\005\000\001\000\001\000\000\000\001\000\
\001\000\006\000\006\000\006\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\001\000\001\000\001\000\005\000\
\001\000\000\000\002\000\005\000\005\000\005\000\004\000\004\000\
\005\000\004\000\004\000\001\000\001\000\001\000\000\000\002\000\
\001\000\001\000\000\000\002\000\001\000\004\000\001\000\003\000\
\003\000\005\000\000\000\002\000\002\000\002\000\001\000\002\000\
\002\000\002\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\058\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\006\001\009\001\000\000\023\001\021\001\022\001\000\000\025\001\
\000\000\000\000\059\001\055\001\000\000\060\001\005\001\247\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\252\000\253\000\250\000\254\000\251\000\249\000\
\000\001\001\001\248\000\255\000\054\001\027\001\053\001\000\000\
\056\001\057\001\037\000\036\000\000\000\031\000\032\000\000\000\
\000\000\242\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\001\000\000\000\000\000\003\001\000\000\008\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\051\000\052\000\053\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\057\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\085\000\086\000\087\000\088\000\000\000\
\000\000\000\000\000\000\000\000\097\000\098\000\095\000\096\000\
\099\000\000\000\000\000\092\000\000\000\000\000\000\000\000\000\
\000\000\101\000\102\000\103\000\104\000\105\000\106\000\000\000\
\000\000\000\000\108\000\000\000\000\000\046\000\047\000\048\000\
\049\000\050\000\169\000\170\000\191\000\000\000\177\000\000\000\
\000\000\186\000\189\000\245\000\000\000\000\000\243\000\000\000\
\008\000\009\000\006\000\007\000\010\000\013\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\212\000\000\000\000\000\
\000\000\000\000\000\000\198\000\000\000\000\000\197\000\000\000\
\000\000\000\000\000\000\000\000\022\000\221\000\000\000\000\000\
\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\
\002\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\045\001\047\001\000\000\000\000\
\000\000\000\000\000\000\031\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\116\000\111\000\114\000\
\039\000\000\000\000\000\000\000\054\000\055\000\000\000\058\000\
\000\000\000\000\000\000\132\000\118\000\120\000\122\000\126\000\
\128\000\130\000\059\000\060\000\061\000\062\000\063\000\064\000\
\065\000\066\000\067\000\068\000\000\000\000\000\078\000\089\000\
\090\000\043\000\000\000\000\000\026\000\027\000\028\000\094\000\
\005\000\004\000\091\000\093\000\000\000\000\000\000\000\000\000\
\000\000\000\000\107\000\109\000\110\000\000\000\176\000\000\000\
\171\000\175\000\000\000\000\000\179\000\181\000\180\000\000\000\
\000\000\016\000\244\000\000\000\174\000\226\000\000\000\227\000\
\228\000\225\000\024\000\000\000\021\000\213\000\214\000\211\000\
\000\000\000\000\000\000\000\000\200\000\000\000\205\000\000\000\
\000\000\000\000\203\000\000\000\000\000\204\000\206\000\002\000\
\222\000\223\000\220\000\000\000\217\000\003\000\002\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\240\000\000\000\
\000\000\004\001\028\001\024\001\000\000\000\000\036\001\037\001\
\038\001\000\000\013\001\014\001\015\001\016\001\000\000\000\000\
\000\000\000\000\000\000\018\001\052\001\017\001\019\001\020\001\
\029\001\030\001\000\000\000\000\152\000\145\000\000\000\000\000\
\000\000\000\000\000\000\000\000\158\000\147\000\154\000\156\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\144\000\143\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\141\000\138\000\139\000\000\000\000\000\
\056\000\000\000\000\000\000\000\119\000\127\000\117\000\125\000\
\069\000\070\000\045\000\079\000\080\000\081\000\082\000\000\000\
\000\000\100\000\030\000\000\000\000\000\000\000\178\000\000\000\
\000\000\015\000\000\000\000\000\000\000\000\000\208\000\000\000\
\202\000\000\000\034\000\210\000\209\000\000\000\000\000\000\000\
\219\000\000\000\000\000\000\000\000\000\234\000\000\000\000\000\
\000\000\000\000\010\001\011\001\000\000\000\000\000\000\012\001\
\040\001\000\000\000\000\000\000\048\001\049\001\000\000\000\000\
\000\000\173\000\148\000\000\000\000\000\000\000\150\000\160\000\
\161\000\163\000\149\000\000\000\000\000\000\000\153\000\146\000\
\025\000\012\000\000\000\000\000\000\000\000\000\000\000\000\000\
\241\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\137\000\000\000\000\000\000\000\000\000\000\000\000\000\
\083\000\084\000\000\000\000\000\000\000\000\000\000\000\000\000\
\014\000\000\000\000\000\194\000\196\000\000\000\207\000\224\000\
\195\000\218\000\000\000\000\000\000\000\000\000\236\000\239\000\
\237\000\238\000\000\000\046\001\032\001\034\001\035\001\042\001\
\041\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\159\000\000\000\165\000\000\000\000\000\187\000\000\000\000\000\
\190\000\000\000\192\000\000\000\235\000\000\000\000\000\000\000\
\000\000\000\000\000\000\041\000\133\000\135\000\000\000\134\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\215\000\199\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\044\001\050\001\000\000\000\000\000\000\000\000\
\000\000\000\000\188\000\193\000\112\000\115\000\000\000\000\000\
\000\000\000\000\000\000\000\000\121\000\129\000\000\000\123\000\
\131\000\182\000\000\000\000\000\185\000\017\000\000\000\000\000\
\020\000\216\000\230\000\229\000\233\000\231\000\232\000\033\001\
\151\000\000\000\000\000\000\000\155\000\000\000\157\000\000\000\
\140\000\000\000\142\000\000\000\183\000\018\000\000\000\162\000\
\000\000\164\000\136\000\000\000\000\000\166\000"

let yydgoto = "\004\000\
\006\000\027\000\030\000\091\000\227\000\059\001\197\000\170\001\
\171\001\199\000\082\000\081\001\082\001\076\000\206\000\207\000\
\222\000\186\001\106\001\066\001\067\001\107\001\077\000\018\001\
\101\002\051\001\204\001\173\000\174\000\175\000\176\000\177\000\
\178\000\179\000\015\001\016\001\180\000\029\001\030\001\031\001\
\032\001\033\001\034\001\187\001\181\000\189\001\190\001\010\001\
\165\001\158\001\166\001\007\002\167\001\168\001\008\002\009\002\
\010\002\086\001\007\000\182\000\183\000\184\000\077\001\185\000\
\078\001\186\000\187\000\216\000\228\000\217\000\218\000\102\001\
\103\001\108\001\219\000\008\000\009\000\210\000\010\000\011\000\
\225\000\012\000\202\000\122\001\013\000\232\000\014\000\084\000\
\015\000\016\000\235\000\032\000\094\000\018\000\034\000\019\000\
\096\000\020\000\021\000\134\001\022\000\244\000\023\000\024\000\
\025\000\245\000\136\001\246\000\138\001\074\002\075\002\247\000"

let yysindex = "\100\001\
\090\255\113\255\176\255\000\000\046\001\000\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\000\000\000\000\191\000\000\000\000\000\000\000\113\255\000\000\
\010\001\196\255\000\000\000\000\053\000\000\000\000\000\000\000\
\012\001\020\001\036\000\135\255\254\255\036\000\036\000\036\000\
\036\000\036\000\045\000\045\000\060\000\084\000\045\000\060\000\
\060\000\031\000\031\000\031\000\058\000\092\000\058\000\084\000\
\084\000\070\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\060\000\
\000\000\000\000\000\000\000\000\151\008\000\000\000\000\112\000\
\044\000\000\000\133\000\134\000\010\000\012\000\116\255\086\255\
\150\000\000\000\045\000\152\000\000\000\041\255\000\000\113\255\
\060\000\045\000\045\000\065\000\158\000\160\000\176\000\007\255\
\173\000\021\255\202\000\204\000\225\000\227\000\173\255\002\000\
\023\014\000\000\000\000\000\000\239\008\036\000\036\000\036\000\
\135\255\135\255\135\255\135\255\046\006\000\000\135\255\135\255\
\135\255\135\255\135\255\135\255\135\255\135\255\135\255\135\255\
\135\255\135\255\135\255\000\000\000\000\000\000\000\000\135\255\
\135\255\182\000\182\000\168\000\000\000\000\000\000\000\000\000\
\000\000\052\255\135\255\000\000\182\000\182\000\182\000\182\000\
\231\000\000\000\000\000\000\000\000\000\000\000\000\000\168\000\
\234\000\239\000\000\000\071\009\159\009\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\243\000\000\000\246\000\
\151\008\000\000\000\000\000\000\248\000\251\000\000\000\042\255\
\000\000\000\000\000\000\000\000\000\000\000\000\159\009\052\000\
\010\000\000\001\129\255\001\001\002\001\000\000\218\255\003\001\
\012\000\005\001\215\016\000\000\083\255\004\001\000\000\008\001\
\085\255\135\255\009\001\243\254\000\000\000\000\003\001\086\255\
\011\001\047\017\211\255\008\001\000\000\013\001\255\255\014\001\
\000\000\000\000\015\001\016\001\017\001\019\001\021\001\025\001\
\026\001\027\001\190\255\028\001\000\000\000\000\173\000\029\001\
\030\001\031\001\032\001\000\000\033\001\035\001\036\000\036\000\
\036\000\146\255\135\255\108\000\172\000\108\000\045\000\045\000\
\036\001\037\001\151\019\247\009\134\006\000\000\000\000\000\000\
\000\000\079\010\079\010\079\010\000\000\000\000\135\255\000\000\
\199\014\167\010\255\010\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\135\255\135\255\000\000\000\000\
\000\000\000\000\213\000\213\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\213\000\213\000\213\000\213\000\
\168\000\168\000\000\000\000\000\000\000\031\015\000\000\095\023\
\000\000\000\000\047\000\040\001\000\000\000\000\000\000\061\000\
\044\001\000\000\000\000\172\000\000\000\000\000\254\000\000\000\
\000\000\000\000\000\000\185\000\000\000\000\000\000\000\000\000\
\135\255\159\009\045\001\239\019\000\000\004\001\000\000\071\020\
\083\255\135\255\000\000\047\001\048\001\000\000\000\000\000\000\
\000\000\000\000\000\000\135\255\000\000\000\000\000\000\025\000\
\021\000\049\001\135\255\135\255\135\255\135\255\000\000\068\000\
\074\000\000\000\000\000\000\000\056\255\050\001\000\000\000\000\
\000\000\019\001\000\000\000\000\000\000\000\000\066\255\052\255\
\051\001\027\000\038\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\159\020\036\001\000\000\000\000\079\010\041\001\
\079\010\119\015\053\001\054\001\000\000\000\000\000\000\000\000\
\055\001\172\000\056\001\172\000\057\001\058\001\172\000\045\000\
\059\001\000\000\000\000\172\000\247\020\207\015\087\011\175\011\
\039\016\007\012\018\001\000\000\000\000\000\000\131\255\042\001\
\000\000\172\000\172\000\135\017\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\060\001\
\061\001\000\000\000\000\108\000\172\000\109\000\000\000\108\000\
\172\000\000\000\063\001\232\255\065\001\067\001\000\000\159\009\
\000\000\069\001\000\000\000\000\000\000\107\000\070\001\163\000\
\000\000\036\000\036\000\036\000\036\000\000\000\071\001\072\001\
\073\001\078\001\000\000\000\000\168\000\099\001\093\001\000\000\
\000\000\104\001\105\001\106\001\000\000\000\000\107\001\081\255\
\172\000\000\000\000\000\111\014\109\001\110\001\000\000\000\000\
\000\000\000\000\000\000\172\000\172\000\223\017\000\000\000\000\
\000\000\000\000\071\009\111\001\095\012\183\012\112\001\114\001\
\000\000\115\001\172\000\172\000\172\000\055\018\172\000\172\000\
\143\018\000\000\036\000\036\000\036\000\036\000\118\001\119\001\
\000\000\000\000\125\001\172\000\126\001\127\001\172\000\134\001\
\000\000\004\001\135\001\000\000\000\000\139\001\000\000\000\000\
\000\000\000\000\141\001\052\000\003\001\003\001\000\000\000\000\
\000\000\000\000\168\000\000\000\000\000\000\000\000\000\000\000\
\000\000\081\255\147\001\155\001\159\009\172\000\172\000\127\016\
\000\000\079\021\000\000\156\001\157\001\000\000\071\009\231\018\
\000\000\167\021\000\000\183\012\000\000\239\008\158\001\159\001\
\160\001\162\001\163\001\000\000\000\000\000\000\159\009\000\000\
\167\010\015\013\040\001\164\001\153\001\248\000\165\001\167\001\
\168\001\000\000\000\000\138\000\169\001\170\001\174\001\175\001\
\176\001\177\001\000\000\000\000\035\001\178\001\179\001\180\001\
\053\001\172\001\000\000\000\000\000\000\000\000\247\009\087\011\
\103\013\007\012\191\013\092\001\000\000\000\000\255\021\000\000\
\000\000\000\000\040\001\195\000\000\000\000\000\248\000\196\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\182\001\109\001\183\001\000\000\087\022\000\000\175\022\
\000\000\007\023\000\000\036\000\000\000\000\000\146\001\000\000\
\063\019\000\000\000\000\159\009\184\001\000\000"

let yyrindex = "\000\000\
\056\002\000\000\185\002\000\000\000\000\000\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\000\000\000\000\000\000\000\000\000\000\000\000\026\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\055\007\000\000\000\000\057\000\086\000\203\255\
\237\255\124\000\000\000\000\000\107\255\055\000\000\000\181\001\
\181\001\000\000\000\000\000\000\000\000\000\000\000\000\186\001\
\203\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\211\000\
\000\000\000\000\000\000\000\000\193\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\205\000\000\000\000\000\000\000\000\000\194\001\000\000\195\001\
\196\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\197\001\000\000\000\000\000\000\000\000\000\000\000\000\194\001\
\000\000\000\000\000\000\000\000\099\255\143\007\223\006\143\007\
\000\000\000\000\000\000\000\000\204\255\000\000\000\000\000\000\
\000\000\000\000\000\000\092\002\181\002\014\003\103\003\192\003\
\025\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\251\001\251\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\251\001\251\001\087\255\087\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\114\004\
\000\000\000\000\000\000\193\001\214\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\198\001\
\193\001\000\000\000\000\000\000\199\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\193\001\000\000\
\000\000\000\000\000\000\153\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\200\001\000\000\000\000\
\201\001\201\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\202\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\197\001\000\000\
\000\000\000\000\000\000\000\000\000\000\203\001\231\007\187\001\
\231\007\203\001\000\000\204\001\204\001\204\001\000\000\000\000\
\203\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\188\001\139\255\188\001\000\000\000\000\203\004\000\000\
\000\000\204\255\204\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\036\005\000\000\000\000\
\000\000\000\000\125\005\125\005\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\125\005\125\005\206\001\206\001\
\114\004\114\004\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\198\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\193\001\000\000\000\000\000\000\200\001\000\000\000\000\
\000\000\203\004\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\202\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\203\001\000\000\000\000\193\001\000\000\
\193\001\000\000\203\001\203\001\000\000\000\000\000\000\000\000\
\000\000\204\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\204\001\000\000\000\000\000\000\000\000\
\000\000\214\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\204\001\204\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\204\001\204\001\000\000\000\000\204\001\
\204\001\000\000\000\000\201\001\000\000\000\000\000\000\193\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\226\000\057\000\207\001\207\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\205\001\
\204\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\204\001\204\001\000\000\000\000\000\000\
\000\000\000\000\193\001\000\000\193\001\193\001\000\000\000\000\
\000\000\000\000\204\001\204\001\204\001\000\000\204\001\204\001\
\000\000\000\000\214\005\214\005\063\008\214\005\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\200\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\199\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\209\001\000\000\000\000\000\000\000\000\000\000\
\000\000\205\001\000\000\000\000\193\001\204\001\204\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\193\001\000\000\
\000\000\000\000\000\000\193\001\000\000\099\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\188\001\000\000\
\204\255\204\255\198\001\000\000\198\001\199\001\000\000\199\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\203\001\000\000\000\000\000\000\
\203\001\203\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\214\255\214\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\198\001\000\000\000\000\000\000\199\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\210\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\214\005\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\193\001\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\224\255\073\255\076\001\199\255\188\255\
\162\000\064\255\000\000\244\253\101\000\219\255\057\255\178\255\
\061\255\184\255\216\001\111\255\222\254\035\255\236\255\209\255\
\040\254\089\000\201\255\145\255\156\255\000\000\000\000\000\000\
\171\255\000\000\120\000\226\253\000\000\189\001\246\254\111\000\
\014\255\241\254\212\253\029\255\084\255\104\254\076\000\000\000\
\027\255\096\000\062\001\000\000\128\254\093\000\033\254\063\000\
\216\000\198\254\000\000\039\002\091\255\225\255\203\254\231\255\
\116\000\207\000\052\254\000\000\000\000\235\255\000\000\022\001\
\191\254\071\255\082\255\000\000\000\000\021\002\000\000\000\000\
\007\002\000\000\031\002\000\000\000\000\000\000\000\000\150\002\
\000\000\000\000\185\001\233\002\051\000\232\002\000\000\000\000\
\173\001\152\001\171\001\098\001\000\000\246\001\236\002\000\000\
\029\000\062\255\000\000\063\255\000\000\000\000\165\000\000\000"

let yytablesize = 6350
let yytable = "\083\000\
\073\001\215\000\056\001\215\000\172\000\014\001\071\001\088\001\
\094\001\221\000\198\001\092\000\009\001\028\001\097\000\197\001\
\198\000\085\000\086\000\087\000\088\000\089\000\215\001\246\000\
\157\001\026\001\085\001\113\001\205\000\214\000\210\001\211\001\
\110\001\034\002\015\002\178\001\225\001\081\002\099\001\222\001\
\200\001\058\000\109\001\135\001\137\001\120\001\117\002\191\001\
\192\001\128\001\129\001\070\000\026\001\200\000\208\000\084\001\
\223\000\193\001\230\000\201\000\209\000\145\002\224\000\134\002\
\057\001\238\000\239\000\229\000\053\001\054\001\055\001\019\001\
\020\001\091\002\112\001\102\002\103\002\104\002\007\001\008\001\
\017\001\017\001\017\001\053\001\054\001\055\001\220\000\078\000\
\204\000\042\000\005\000\079\000\145\002\195\000\196\000\195\000\
\196\000\150\002\098\000\099\000\113\000\188\001\188\001\188\001\
\134\002\048\000\049\000\002\001\002\001\245\001\009\001\076\001\
\172\000\026\000\045\000\144\001\211\000\246\001\113\000\048\000\
\049\000\113\000\112\000\247\001\236\000\009\001\195\000\196\000\
\101\001\058\001\215\000\198\000\198\000\007\001\008\001\233\000\
\234\000\078\000\174\002\042\000\227\001\079\000\215\000\132\002\
\221\000\221\000\162\001\237\000\078\000\093\001\036\002\205\000\
\079\000\037\002\023\000\214\000\014\001\028\001\168\000\214\000\
\212\000\168\000\212\000\023\000\023\000\054\002\009\001\198\001\
\156\001\200\000\028\001\028\001\156\001\250\001\252\000\201\000\
\029\000\208\000\253\000\156\001\009\001\085\001\002\002\209\000\
\230\001\163\001\226\001\003\002\072\002\011\002\069\000\232\001\
\223\000\212\000\105\001\176\002\183\001\200\001\224\000\135\001\
\137\001\002\001\002\001\035\000\213\000\124\000\119\001\159\001\
\160\001\161\001\026\001\179\002\117\001\035\000\035\000\168\000\
\118\001\017\001\017\001\017\001\007\001\008\001\172\001\124\000\
\175\001\009\001\124\000\009\001\195\000\196\000\176\001\177\001\
\100\001\168\000\078\000\052\001\168\000\035\000\079\000\035\000\
\113\002\169\002\188\001\143\001\188\001\061\001\062\001\063\001\
\064\001\144\001\145\001\146\001\205\001\251\001\081\000\009\001\
\165\002\147\001\058\000\009\001\075\000\206\001\207\001\208\001\
\209\001\071\000\192\000\073\000\203\000\188\001\204\000\219\001\
\101\001\193\000\194\000\074\000\195\000\196\000\195\000\196\000\
\035\000\246\000\233\001\026\001\254\001\255\001\118\001\100\000\
\122\002\045\000\051\002\035\000\046\000\047\000\048\000\049\000\
\050\000\051\000\075\000\052\000\053\000\054\000\055\000\214\000\
\056\000\057\000\090\000\085\001\087\001\146\002\009\001\007\001\
\007\001\035\000\104\000\193\000\194\000\009\001\195\000\196\000\
\035\000\035\000\093\000\035\000\035\000\243\001\156\001\028\001\
\028\001\118\001\006\002\244\001\123\001\156\001\156\001\118\001\
\009\001\009\001\124\001\125\001\009\001\126\001\035\000\005\002\
\035\000\142\002\095\000\163\001\106\000\173\002\141\002\009\001\
\035\000\035\000\234\001\251\001\001\000\002\000\003\000\020\002\
\235\001\236\001\023\002\237\001\056\002\086\002\073\002\183\001\
\118\001\188\000\075\000\193\000\194\000\120\002\195\000\196\000\
\142\002\189\000\121\002\119\002\035\000\035\000\003\001\212\001\
\213\001\035\000\035\000\036\000\037\000\081\000\101\001\191\000\
\038\000\039\000\040\000\041\000\042\000\216\001\217\001\024\002\
\043\000\044\000\072\000\035\000\036\000\037\000\226\000\157\001\
\231\000\038\000\039\000\040\000\041\000\042\000\045\000\009\001\
\126\002\043\000\044\000\240\000\058\002\241\000\173\001\174\001\
\118\001\009\001\053\001\054\001\055\001\243\000\044\002\006\002\
\006\002\131\002\047\002\193\000\194\000\242\000\195\000\196\000\
\073\002\009\001\140\002\031\000\009\001\212\001\213\001\059\000\
\060\000\061\000\062\000\063\000\064\000\065\000\066\000\067\000\
\068\000\101\000\102\000\103\000\007\001\107\000\002\000\248\000\
\007\001\249\000\002\000\002\001\002\001\059\002\060\002\061\002\
\062\002\003\001\216\001\217\001\101\001\188\001\188\001\105\000\
\108\000\109\000\035\000\035\000\110\000\111\000\250\000\108\002\
\251\000\050\001\111\002\009\001\068\001\009\001\014\001\221\000\
\065\001\069\001\118\002\009\001\074\001\009\001\075\001\198\000\
\080\001\028\001\028\001\080\000\083\001\100\002\100\002\100\002\
\100\002\090\001\092\001\091\001\100\001\204\000\096\001\181\002\
\104\001\203\001\111\001\084\001\115\001\121\001\220\001\127\001\
\130\001\131\001\132\001\133\001\213\001\217\001\139\001\014\001\
\028\001\028\001\140\001\141\001\142\001\148\001\150\001\151\001\
\152\001\153\001\154\001\155\001\072\001\035\002\179\001\156\001\
\214\001\004\002\009\001\156\001\156\001\218\001\223\001\000\002\
\228\001\229\001\238\001\248\001\253\001\014\002\162\001\026\001\
\017\002\019\002\021\002\022\002\025\002\038\002\041\002\042\002\
\049\002\009\001\052\002\009\001\053\002\009\001\055\002\057\002\
\063\002\064\002\065\002\018\002\009\001\006\002\006\002\066\002\
\021\001\022\001\023\001\024\001\027\001\026\002\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\039\002\040\002\255\001\067\002\048\001\
\049\001\068\002\069\002\070\002\071\002\080\002\082\002\172\002\
\087\002\092\002\060\001\093\002\094\002\043\002\045\002\105\002\
\106\002\046\002\048\002\035\000\036\000\037\000\107\002\109\002\
\110\002\038\000\039\000\040\000\041\000\042\000\100\002\112\002\
\114\002\043\000\044\000\045\000\115\002\116\002\046\000\047\000\
\048\000\049\000\050\000\051\000\124\002\052\000\053\000\054\000\
\055\000\148\002\056\000\057\000\125\002\129\002\130\002\135\002\
\136\002\137\002\076\002\138\002\139\002\147\002\151\002\152\002\
\180\002\154\002\155\002\156\002\166\002\084\002\085\002\157\002\
\158\002\159\002\160\002\162\002\163\002\164\002\175\002\177\002\
\246\000\182\002\002\001\038\000\095\002\096\002\097\002\007\001\
\098\002\099\002\168\000\246\000\026\001\002\001\051\001\184\000\
\019\000\201\000\033\000\039\001\172\000\011\000\043\001\168\000\
\044\000\035\000\029\000\167\000\153\002\133\002\171\002\199\001\
\144\002\164\001\169\001\252\001\161\002\083\002\167\002\079\001\
\149\002\016\002\178\002\089\002\184\001\095\001\114\001\089\001\
\190\000\017\000\033\000\249\001\149\001\028\000\123\002\127\002\
\128\002\050\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\042\000\042\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\201\001\202\001\000\000\000\000\
\000\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\000\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\000\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\221\001\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\000\000\000\000\000\000\231\001\000\000\000\000\000\000\000\000\
\000\000\000\000\239\001\240\001\241\001\242\001\000\000\000\000\
\000\000\000\000\000\000\000\000\071\000\071\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\042\000\071\000\071\000\071\000\071\000\071\000\071\000\
\071\000\000\000\071\000\071\000\071\000\071\000\071\000\071\000\
\071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
\071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
\071\000\071\000\071\000\071\000\071\000\071\000\071\000\000\000\
\000\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
\071\000\000\000\071\000\071\000\071\000\071\000\071\000\071\000\
\071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
\071\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\072\000\072\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\072\000\072\000\072\000\072\000\072\000\
\072\000\072\000\071\000\072\000\072\000\072\000\072\000\072\000\
\072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
\072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
\072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
\000\000\000\000\072\000\072\000\072\000\072\000\072\000\072\000\
\072\000\072\000\000\000\072\000\072\000\072\000\072\000\072\000\
\072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
\072\000\072\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\073\000\073\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\073\000\073\000\073\000\073\000\
\073\000\073\000\073\000\072\000\073\000\073\000\073\000\073\000\
\073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
\073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
\073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
\073\000\000\000\000\000\073\000\073\000\073\000\073\000\073\000\
\073\000\073\000\073\000\000\000\073\000\073\000\073\000\073\000\
\073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
\073\000\073\000\073\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\074\000\
\074\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\074\000\074\000\074\000\
\074\000\074\000\074\000\074\000\073\000\074\000\074\000\074\000\
\074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
\074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
\074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
\074\000\074\000\000\000\000\000\074\000\074\000\074\000\074\000\
\074\000\074\000\074\000\074\000\000\000\074\000\074\000\074\000\
\074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
\074\000\074\000\074\000\074\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\075\000\075\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\075\000\075\000\
\075\000\075\000\075\000\075\000\075\000\074\000\075\000\075\000\
\075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
\075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
\075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
\075\000\075\000\075\000\000\000\000\000\075\000\075\000\075\000\
\075\000\075\000\075\000\075\000\075\000\000\000\075\000\075\000\
\075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
\075\000\075\000\075\000\075\000\075\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\076\000\076\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\076\000\
\076\000\076\000\076\000\076\000\076\000\076\000\075\000\076\000\
\076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
\076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
\076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
\076\000\076\000\076\000\076\000\000\000\000\000\076\000\076\000\
\076\000\076\000\076\000\076\000\076\000\076\000\000\000\076\000\
\076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
\076\000\076\000\076\000\076\000\076\000\076\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\029\000\029\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\076\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\000\000\000\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\000\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\033\000\033\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
\029\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
\033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
\033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
\033\000\033\000\033\000\033\000\033\000\033\000\000\000\000\000\
\033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
\000\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
\033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\077\000\077\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\077\000\077\000\077\000\077\000\077\000\077\000\
\077\000\033\000\077\000\077\000\077\000\077\000\077\000\077\000\
\077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
\077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
\077\000\077\000\077\000\077\000\077\000\077\000\077\000\000\000\
\000\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
\077\000\000\000\077\000\077\000\077\000\077\000\077\000\077\000\
\077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
\077\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\044\000\044\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\077\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\000\000\000\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\000\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\040\000\040\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\044\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\000\000\000\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\000\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\025\001\000\000\
\078\000\000\000\000\000\000\000\079\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\114\000\115\000\116\000\012\001\
\118\000\000\000\119\000\000\000\040\000\120\000\121\000\122\000\
\123\000\124\000\013\001\126\000\127\000\128\000\129\000\130\000\
\131\000\132\000\133\000\134\000\135\000\136\000\137\000\138\000\
\139\000\140\000\141\000\142\000\143\000\144\000\145\000\146\000\
\147\000\000\000\000\000\148\000\149\000\150\000\151\000\152\000\
\153\000\154\000\155\000\000\000\156\000\157\000\158\000\159\000\
\160\000\161\000\162\000\163\000\164\000\165\000\166\000\167\000\
\168\000\169\000\170\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\182\001\000\000\
\078\000\000\000\000\000\000\000\079\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\114\000\115\000\116\000\012\001\
\118\000\000\000\119\000\000\000\171\000\120\000\121\000\122\000\
\123\000\124\000\013\001\126\000\127\000\128\000\129\000\130\000\
\131\000\132\000\133\000\134\000\135\000\136\000\137\000\138\000\
\139\000\140\000\141\000\142\000\143\000\144\000\145\000\146\000\
\147\000\000\000\000\000\148\000\149\000\150\000\151\000\152\000\
\153\000\154\000\155\000\000\000\156\000\157\000\158\000\159\000\
\160\000\161\000\162\000\163\000\164\000\165\000\166\000\167\000\
\168\000\169\000\170\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\038\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\171\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\000\000\000\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\000\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\035\000\
\035\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\035\000\035\000\035\000\
\035\000\035\000\000\000\035\000\000\000\038\000\035\000\035\000\
\035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
\035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
\035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
\035\000\035\000\000\000\000\000\035\000\035\000\035\000\035\000\
\035\000\035\000\035\000\035\000\000\000\035\000\035\000\035\000\
\035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
\035\000\035\000\035\000\035\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\038\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\000\000\035\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\000\000\000\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\000\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\038\000\
\038\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\038\000\038\000\038\000\
\038\000\038\000\000\000\038\000\000\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\000\000\000\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\000\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\040\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\000\000\038\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\000\000\000\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\000\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\113\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\115\000\116\000\
\117\000\118\000\000\000\119\000\000\000\040\000\120\000\121\000\
\122\000\123\000\124\000\125\000\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\000\000\000\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\000\000\156\000\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\115\000\116\000\
\012\001\118\000\000\000\119\000\000\000\171\000\120\000\121\000\
\122\000\123\000\124\000\013\001\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\000\000\000\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\000\000\156\000\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\070\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\115\000\116\000\
\117\000\118\000\000\000\119\000\000\000\171\000\120\000\121\000\
\122\000\123\000\124\000\125\000\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\000\000\000\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\000\000\156\000\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\072\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\115\000\116\000\
\117\000\118\000\000\000\119\000\000\000\171\000\120\000\121\000\
\122\000\123\000\124\000\125\000\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\000\000\000\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\000\000\156\000\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\181\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\115\000\116\000\
\012\001\118\000\000\000\119\000\000\000\171\000\120\000\121\000\
\122\000\123\000\124\000\013\001\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\000\000\000\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\000\000\156\000\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\185\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\115\000\116\000\
\117\000\118\000\000\000\119\000\000\000\171\000\120\000\121\000\
\122\000\123\000\124\000\125\000\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\000\000\000\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\000\000\156\000\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\196\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\115\000\116\000\
\012\001\118\000\000\000\119\000\000\000\171\000\120\000\121\000\
\122\000\123\000\124\000\013\001\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\000\000\000\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\000\000\156\000\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\025\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\115\000\116\000\
\012\001\118\000\000\000\119\000\000\000\171\000\120\000\121\000\
\122\000\123\000\124\000\013\001\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\000\000\000\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\000\000\156\000\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\030\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\115\000\116\000\
\012\001\118\000\000\000\119\000\000\000\171\000\120\000\121\000\
\122\000\123\000\124\000\013\001\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\000\000\000\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\000\000\156\000\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\182\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\115\000\116\000\
\012\001\118\000\000\000\119\000\000\000\171\000\120\000\121\000\
\122\000\123\000\124\000\013\001\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\000\000\000\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\000\000\156\000\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\033\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\115\000\116\000\
\117\000\118\000\000\000\119\000\000\000\171\000\120\000\121\000\
\122\000\123\000\124\000\125\000\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\000\000\000\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\000\000\156\000\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\088\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\115\000\116\000\
\117\000\118\000\000\000\119\000\000\000\171\000\120\000\121\000\
\122\000\123\000\124\000\125\000\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\000\000\000\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\000\000\156\000\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\090\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\115\000\116\000\
\117\000\118\000\000\000\119\000\000\000\171\000\120\000\121\000\
\122\000\123\000\124\000\125\000\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\000\000\000\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\000\000\156\000\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\143\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\115\000\116\000\
\012\001\118\000\000\000\119\000\000\000\171\000\120\000\121\000\
\122\000\123\000\124\000\013\001\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\000\000\000\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\000\000\156\000\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\168\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\115\000\116\000\
\012\001\118\000\000\000\119\000\000\000\171\000\120\000\121\000\
\122\000\123\000\124\000\013\001\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\000\000\000\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\000\000\156\000\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\170\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\115\000\116\000\
\117\000\118\000\000\000\119\000\000\000\171\000\120\000\121\000\
\122\000\123\000\124\000\125\000\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\000\000\000\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\000\000\156\000\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\115\000\116\000\
\254\000\255\000\000\000\000\001\000\000\171\000\001\001\121\000\
\122\000\123\000\124\000\002\001\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\000\000\000\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\000\000\156\000\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\000\000\000\000\003\001\004\001\
\005\001\006\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\007\001\008\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\115\000\116\000\
\254\000\255\000\000\000\000\001\077\002\171\000\001\001\121\000\
\122\000\123\000\124\000\002\001\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\000\000\000\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\000\000\156\000\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\000\000\000\000\003\001\078\002\
\079\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\115\000\116\000\
\254\000\255\000\000\000\000\001\000\000\171\000\001\001\121\000\
\122\000\123\000\124\000\002\001\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\000\000\000\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\000\000\156\000\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\000\000\000\000\003\001\194\001\
\195\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\115\000\116\000\
\254\000\255\000\000\000\000\001\000\000\171\000\001\001\121\000\
\122\000\123\000\124\000\002\001\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\000\000\000\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\000\000\156\000\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\000\000\000\000\000\000\004\001\
\005\001\006\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\115\000\116\000\
\254\000\255\000\000\000\000\001\000\000\171\000\001\001\121\000\
\122\000\123\000\124\000\002\001\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\000\000\000\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\000\000\156\000\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\000\000\000\000\003\001\012\002\
\013\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\115\000\116\000\
\254\000\255\000\000\000\000\001\000\000\171\000\001\001\121\000\
\122\000\123\000\124\000\002\001\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\000\000\000\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\000\000\156\000\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\000\000\000\000\003\001\028\002\
\029\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\115\000\116\000\
\254\000\255\000\000\000\000\001\000\000\171\000\001\001\121\000\
\122\000\123\000\124\000\002\001\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\000\000\000\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\000\000\156\000\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\000\000\000\000\003\001\031\002\
\032\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\115\000\116\000\
\254\000\255\000\000\000\000\001\077\002\171\000\001\001\121\000\
\122\000\123\000\124\000\002\001\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\000\000\000\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\000\000\156\000\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\000\000\000\000\000\000\078\002\
\079\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\115\000\116\000\
\254\000\255\000\000\000\000\001\000\000\171\000\001\001\121\000\
\122\000\123\000\124\000\002\001\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\000\000\000\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\000\000\156\000\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\097\001\000\000\000\000\000\000\000\000\
\098\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\115\000\116\000\
\254\000\255\000\000\000\000\001\000\000\171\000\001\001\121\000\
\122\000\123\000\124\000\002\001\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\000\000\000\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\000\000\156\000\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\116\001\000\000\000\000\
\098\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\115\000\116\000\
\254\000\255\000\000\000\000\001\000\000\171\000\001\001\121\000\
\122\000\123\000\124\000\002\001\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\000\000\000\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\000\000\156\000\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\000\000\000\000\000\000\194\001\
\195\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\115\000\116\000\
\254\000\255\000\000\000\000\001\000\000\171\000\001\001\121\000\
\122\000\123\000\124\000\002\001\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\000\000\000\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\000\000\156\000\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\000\000\000\000\000\000\012\002\
\013\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\115\000\116\000\
\254\000\255\000\000\000\000\001\000\000\171\000\001\001\121\000\
\122\000\123\000\124\000\002\001\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\000\000\000\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\000\000\156\000\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\000\000\000\000\000\000\028\002\
\029\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\115\000\116\000\
\254\000\255\000\000\000\000\001\000\000\171\000\001\001\121\000\
\122\000\123\000\124\000\002\001\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\000\000\000\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\000\000\156\000\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\000\000\000\000\000\000\031\002\
\032\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\115\000\116\000\
\254\000\255\000\000\000\000\001\000\000\171\000\001\001\121\000\
\122\000\123\000\124\000\002\001\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\000\000\000\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\000\000\156\000\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\000\000\000\000\000\000\000\000\
\005\001\006\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\115\000\116\000\
\254\000\255\000\000\000\000\001\077\002\171\000\001\001\121\000\
\122\000\123\000\124\000\002\001\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\000\000\000\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\000\000\156\000\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\000\000\000\000\000\000\000\000\
\079\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\115\000\116\000\
\254\000\255\000\000\000\000\001\000\000\171\000\001\001\121\000\
\122\000\123\000\124\000\002\001\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\000\000\000\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\000\000\156\000\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\000\000\000\000\000\000\000\000\
\180\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\115\000\116\000\
\254\000\255\000\000\000\000\001\000\000\171\000\001\001\121\000\
\122\000\123\000\124\000\002\001\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\000\000\000\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\000\000\156\000\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\224\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\115\000\116\000\
\254\000\255\000\000\000\000\001\000\000\171\000\001\001\121\000\
\122\000\123\000\124\000\002\001\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\000\000\000\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\000\000\156\000\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\098\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\115\000\116\000\
\254\000\255\000\000\000\000\001\000\000\171\000\001\001\121\000\
\122\000\123\000\124\000\002\001\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\000\000\000\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\000\000\156\000\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\000\000\000\000\000\000\000\000\
\001\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\115\000\116\000\
\254\000\255\000\000\000\000\001\000\000\171\000\001\001\121\000\
\122\000\123\000\124\000\002\001\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\000\000\000\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\000\000\156\000\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\000\000\000\000\000\000\000\000\
\027\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\115\000\116\000\
\254\000\255\000\000\000\000\001\077\002\171\000\001\001\121\000\
\122\000\123\000\124\000\002\001\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\000\000\000\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\000\000\156\000\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\115\000\116\000\
\254\000\255\000\000\000\000\001\000\000\171\000\001\001\121\000\
\122\000\123\000\124\000\002\001\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\000\000\000\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\000\000\156\000\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\000\000\000\000\000\000\000\000\
\000\000\006\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\115\000\116\000\
\254\000\255\000\000\000\000\001\000\000\171\000\001\001\121\000\
\122\000\123\000\124\000\002\001\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\000\000\000\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\000\000\156\000\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\000\000\000\000\000\000\000\000\
\195\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\115\000\116\000\
\254\000\255\000\000\000\000\001\000\000\171\000\001\001\121\000\
\122\000\123\000\124\000\002\001\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\000\000\000\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\000\000\156\000\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\000\000\000\000\000\000\000\000\
\013\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\115\000\116\000\
\254\000\255\000\000\000\000\001\000\000\171\000\001\001\121\000\
\122\000\123\000\124\000\002\001\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\000\000\000\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\000\000\156\000\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\000\000\000\000\000\000\000\000\
\029\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\115\000\116\000\
\254\000\255\000\000\000\000\001\000\000\171\000\001\001\121\000\
\122\000\123\000\124\000\002\001\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\000\000\000\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\000\000\156\000\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\000\000\000\000\000\000\000\000\
\032\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\115\000\116\000\
\254\000\255\000\000\000\000\001\000\000\171\000\001\001\121\000\
\122\000\123\000\124\000\002\001\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\000\000\000\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\000\000\156\000\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\171\000"

let yycheck = "\037\000\
\173\000\087\000\148\000\089\000\077\000\117\000\172\000\200\000\
\208\000\088\000\026\001\044\000\113\000\125\000\047\000\026\001\
\085\000\038\000\039\000\040\000\041\000\042\000\076\001\000\000\
\254\000\000\000\199\000\223\000\086\000\087\000\065\001\066\001\
\218\000\186\001\163\001\009\001\102\001\005\002\213\000\098\001\
\027\001\001\001\217\000\238\000\238\000\229\000\059\002\019\001\
\020\001\233\000\234\000\023\000\125\000\085\000\086\000\014\001\
\088\000\023\001\091\000\085\000\086\000\106\002\088\000\094\002\
\013\001\098\000\099\000\089\000\003\001\004\001\005\001\119\000\
\120\000\022\002\088\001\036\002\037\002\038\002\092\001\093\001\
\118\000\119\000\120\000\003\001\004\001\005\001\001\001\003\001\
\003\001\003\001\001\001\007\001\137\002\011\001\012\001\011\001\
\012\001\110\002\048\000\049\000\002\001\018\001\019\001\020\001\
\135\002\099\001\100\001\001\001\002\001\054\001\211\000\184\000\
\185\000\001\001\094\001\060\001\001\001\062\001\020\001\099\001\
\100\001\023\001\072\000\068\001\096\000\226\000\011\001\012\001\
\214\000\078\001\216\000\200\000\201\000\092\001\093\001\095\001\
\096\001\003\001\151\002\053\001\106\001\007\001\228\000\092\002\
\223\000\224\000\001\001\097\000\003\001\207\000\020\001\209\000\
\007\001\023\001\002\001\213\000\012\001\013\001\020\001\217\000\
\078\001\023\001\078\001\011\001\012\001\224\001\011\001\183\001\
\254\000\201\000\026\001\027\001\002\001\108\001\002\001\201\000\
\001\001\209\000\006\001\009\001\025\001\098\001\156\001\209\000\
\112\001\002\001\105\001\159\001\108\001\161\001\000\000\119\001\
\224\000\078\001\216\000\163\002\013\001\184\001\224\000\138\001\
\138\001\095\001\096\001\001\001\089\001\002\001\228\000\255\000\
\000\001\001\001\027\001\172\002\002\001\011\001\012\001\002\001\
\006\001\255\000\000\001\001\001\092\001\093\001\004\001\020\001\
\006\001\070\001\023\001\072\001\011\001\012\001\007\001\008\001\
\001\001\020\001\003\001\147\000\023\001\001\001\007\001\003\001\
\050\002\138\002\159\001\054\001\161\001\157\000\158\000\159\000\
\160\000\060\001\061\001\062\001\052\001\143\001\001\001\100\001\
\129\002\068\001\001\001\104\001\007\001\061\001\062\001\063\001\
\064\001\000\000\001\001\000\000\001\001\186\001\003\001\084\001\
\102\001\008\001\009\001\000\000\011\001\012\001\011\001\012\001\
\078\001\002\001\002\001\002\001\002\001\003\001\006\001\001\001\
\067\002\094\001\220\001\089\001\097\001\098\001\099\001\100\001\
\101\001\102\001\007\001\104\001\105\001\106\001\107\001\105\001\
\109\001\110\001\006\001\224\001\001\001\107\002\155\001\001\001\
\002\001\001\001\001\001\008\001\009\001\162\001\011\001\012\001\
\008\001\009\001\007\001\011\001\012\001\002\001\156\001\183\001\
\184\001\006\001\160\001\002\001\078\001\163\001\164\001\006\001\
\181\001\182\001\084\001\085\001\185\001\087\001\001\001\160\001\
\003\001\105\002\007\001\164\001\001\001\147\002\105\002\196\001\
\011\001\012\001\078\001\245\001\001\000\002\000\003\000\172\001\
\084\001\085\001\175\001\087\001\002\001\019\002\000\002\184\001\
\006\001\002\001\007\001\008\001\009\001\061\002\011\001\012\001\
\136\002\078\001\062\002\060\002\001\001\002\001\080\001\081\001\
\082\001\006\001\078\001\079\001\080\001\001\001\220\001\002\001\
\084\001\085\001\086\001\087\001\088\001\081\001\082\001\176\001\
\092\001\093\001\094\001\078\001\079\001\080\001\001\001\125\002\
\001\001\084\001\085\001\086\001\087\001\088\001\094\001\004\002\
\077\002\092\001\093\001\006\001\002\001\006\001\005\001\006\001\
\006\001\014\002\003\001\004\001\005\001\001\001\212\001\005\002\
\006\002\087\002\216\001\008\001\009\001\006\001\011\001\012\001\
\074\002\030\002\103\002\003\000\033\002\081\001\082\001\007\000\
\008\000\009\000\010\000\011\000\012\000\013\000\014\000\015\000\
\016\000\050\000\051\000\052\000\002\001\054\000\002\001\006\001\
\006\001\006\001\006\001\001\001\002\001\234\001\235\001\236\001\
\237\001\080\001\081\001\082\001\050\002\138\002\139\002\053\000\
\054\000\055\000\001\001\002\001\056\000\057\000\006\001\044\002\
\006\001\052\001\047\002\080\002\003\001\082\002\094\002\062\002\
\010\001\003\001\059\002\088\002\002\001\090\002\001\001\060\002\
\001\001\105\002\106\002\036\000\002\001\035\002\036\002\037\002\
\038\002\002\001\001\001\003\001\001\001\003\001\002\001\180\002\
\001\001\053\001\002\001\014\001\002\001\001\001\086\001\002\001\
\002\001\002\001\002\001\001\001\082\001\082\001\002\001\135\002\
\136\002\137\002\002\001\002\001\002\001\002\001\002\001\002\001\
\002\001\002\001\002\001\001\001\001\001\020\001\002\001\125\002\
\001\001\001\001\143\002\129\002\130\002\002\001\002\001\010\001\
\002\001\002\001\002\001\002\001\002\001\001\001\001\001\000\000\
\002\001\002\001\002\001\002\001\002\001\020\001\003\001\003\001\
\002\001\166\002\002\001\168\002\002\001\170\002\002\001\002\001\
\002\001\002\001\002\001\170\001\177\002\163\002\164\002\002\001\
\121\000\122\000\123\000\124\000\125\000\180\001\127\000\128\000\
\129\000\130\000\131\000\132\000\133\000\134\000\135\000\136\000\
\137\000\138\000\139\000\194\001\195\001\003\001\010\001\144\000\
\145\000\002\001\002\001\002\001\002\001\001\001\001\001\020\001\
\002\001\002\001\155\000\002\001\002\001\212\001\213\001\002\001\
\002\001\216\001\217\001\078\001\079\001\080\001\002\001\002\001\
\002\001\084\001\085\001\086\001\087\001\088\001\172\002\002\001\
\002\001\092\001\093\001\094\001\002\001\001\001\097\001\098\001\
\099\001\100\001\101\001\102\001\002\001\104\001\105\001\106\001\
\107\001\001\001\109\001\110\001\002\001\002\001\002\001\002\001\
\002\001\002\001\001\002\002\001\002\001\002\001\002\001\001\001\
\023\001\002\001\002\001\002\001\001\001\012\002\013\002\002\001\
\002\001\002\001\002\001\002\001\002\001\002\001\001\001\001\001\
\000\000\002\001\006\001\001\001\027\002\028\002\029\002\006\001\
\031\002\032\002\002\001\002\001\002\001\002\001\002\001\002\001\
\002\001\002\001\002\001\002\001\002\001\002\001\002\001\020\001\
\003\001\003\001\002\001\002\001\112\002\094\002\139\002\027\001\
\106\002\002\001\003\001\144\001\125\002\006\002\130\002\185\000\
\109\002\164\001\164\002\021\002\013\001\209\000\224\000\201\000\
\083\000\001\000\003\000\138\001\247\000\002\000\074\002\078\002\
\079\002\220\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\001\001\002\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\045\001\046\001\255\255\255\255\
\255\255\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\255\255\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\255\255\053\001\
\054\001\055\001\056\001\057\001\058\001\059\001\060\001\061\001\
\097\001\063\001\064\001\065\001\066\001\067\001\068\001\069\001\
\070\001\071\001\072\001\073\001\074\001\075\001\076\001\077\001\
\255\255\255\255\255\255\116\001\255\255\255\255\255\255\255\255\
\255\255\255\255\123\001\124\001\125\001\126\001\255\255\255\255\
\255\255\255\255\255\255\255\255\001\001\002\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\111\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\255\255\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\255\255\
\255\255\054\001\055\001\056\001\057\001\058\001\059\001\060\001\
\061\001\255\255\063\001\064\001\065\001\066\001\067\001\068\001\
\069\001\070\001\071\001\072\001\073\001\074\001\075\001\076\001\
\077\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\001\001\002\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\111\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\255\255\255\255\054\001\055\001\056\001\057\001\058\001\059\001\
\060\001\061\001\255\255\063\001\064\001\065\001\066\001\067\001\
\068\001\069\001\070\001\071\001\072\001\073\001\074\001\075\001\
\076\001\077\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\001\001\002\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\111\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\255\255\255\255\054\001\055\001\056\001\057\001\058\001\
\059\001\060\001\061\001\255\255\063\001\064\001\065\001\066\001\
\067\001\068\001\069\001\070\001\071\001\072\001\073\001\074\001\
\075\001\076\001\077\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\001\
\002\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\111\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\001\001\002\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\111\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\255\255\255\255\054\001\055\001\056\001\
\057\001\058\001\059\001\060\001\061\001\255\255\063\001\064\001\
\065\001\066\001\067\001\068\001\069\001\070\001\071\001\072\001\
\073\001\074\001\075\001\076\001\077\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\111\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\255\255\255\255\054\001\055\001\
\056\001\057\001\058\001\059\001\060\001\061\001\255\255\063\001\
\064\001\065\001\066\001\067\001\068\001\069\001\070\001\071\001\
\072\001\073\001\074\001\075\001\076\001\077\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\001\001\002\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\111\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\255\255\255\255\054\001\
\055\001\056\001\057\001\058\001\059\001\060\001\061\001\255\255\
\063\001\064\001\065\001\066\001\067\001\068\001\069\001\070\001\
\071\001\072\001\073\001\074\001\075\001\076\001\077\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\001\001\002\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\111\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\255\255\255\255\
\054\001\055\001\056\001\057\001\058\001\059\001\060\001\061\001\
\255\255\063\001\064\001\065\001\066\001\067\001\068\001\069\001\
\070\001\071\001\072\001\073\001\074\001\075\001\076\001\077\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\001\001\002\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\111\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\255\255\
\255\255\054\001\055\001\056\001\057\001\058\001\059\001\060\001\
\061\001\255\255\063\001\064\001\065\001\066\001\067\001\068\001\
\069\001\070\001\071\001\072\001\073\001\074\001\075\001\076\001\
\077\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\001\001\002\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\111\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\255\255\255\255\054\001\055\001\056\001\057\001\058\001\059\001\
\060\001\061\001\255\255\063\001\064\001\065\001\066\001\067\001\
\068\001\069\001\070\001\071\001\072\001\073\001\074\001\075\001\
\076\001\077\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\001\001\002\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\111\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\255\255\255\255\054\001\055\001\056\001\057\001\058\001\
\059\001\060\001\061\001\255\255\063\001\064\001\065\001\066\001\
\067\001\068\001\069\001\070\001\071\001\072\001\073\001\074\001\
\075\001\076\001\077\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\001\001\255\255\
\003\001\255\255\255\255\255\255\007\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\015\001\016\001\017\001\018\001\
\019\001\255\255\021\001\255\255\111\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\255\255\255\255\054\001\055\001\056\001\057\001\058\001\
\059\001\060\001\061\001\255\255\063\001\064\001\065\001\066\001\
\067\001\068\001\069\001\070\001\071\001\072\001\073\001\074\001\
\075\001\076\001\077\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\001\001\255\255\
\003\001\255\255\255\255\255\255\007\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\015\001\016\001\017\001\018\001\
\019\001\255\255\021\001\255\255\111\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\255\255\255\255\054\001\055\001\056\001\057\001\058\001\
\059\001\060\001\061\001\255\255\063\001\064\001\065\001\066\001\
\067\001\068\001\069\001\070\001\071\001\072\001\073\001\074\001\
\075\001\076\001\077\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\111\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\001\
\002\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\255\255\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\001\
\002\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\255\255\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\080\001\081\001\
\082\001\083\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\092\001\093\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\022\001\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\080\001\081\001\
\082\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\080\001\081\001\
\082\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\255\255\081\001\
\082\001\083\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\080\001\081\001\
\082\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\080\001\081\001\
\082\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\080\001\081\001\
\082\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\022\001\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\255\255\081\001\
\082\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\085\001\255\255\255\255\255\255\255\255\
\090\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\087\001\255\255\255\255\
\090\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\255\255\081\001\
\082\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\255\255\081\001\
\082\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\255\255\081\001\
\082\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\255\255\081\001\
\082\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\255\255\255\255\
\082\001\083\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\022\001\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\255\255\255\255\
\082\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\255\255\255\255\
\082\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\091\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\090\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\255\255\255\255\
\082\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\255\255\255\255\
\082\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\022\001\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\255\255\255\255\
\255\255\083\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\255\255\255\255\
\082\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\255\255\255\255\
\082\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\255\255\255\255\
\082\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\255\255\255\255\
\082\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\111\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\111\001"

let yynames_const = "\
  LPAR\000\
  RPAR\000\
  FUNCREF\000\
  EXTERNREF\000\
  EXTERN\000\
  MUT\000\
  UNREACHABLE\000\
  NOP\000\
  DROP\000\
  SELECT\000\
  BLOCK\000\
  END\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LOOP\000\
  BR\000\
  BR_IF\000\
  BR_TABLE\000\
  CALL\000\
  CALL_INDIRECT\000\
  RETURN\000\
  LOCAL_GET\000\
  LOCAL_SET\000\
  LOCAL_TEE\000\
  GLOBAL_GET\000\
  GLOBAL_SET\000\
  TABLE_GET\000\
  TABLE_SET\000\
  TABLE_SIZE\000\
  TABLE_GROW\000\
  TABLE_FILL\000\
  TABLE_COPY\000\
  TABLE_INIT\000\
  ELEM_DROP\000\
  MEMORY_SIZE\000\
  MEMORY_GROW\000\
  MEMORY_FILL\000\
  MEMORY_COPY\000\
  MEMORY_INIT\000\
  DATA_DROP\000\
  REF_NULL\000\
  REF_FUNC\000\
  REF_EXTERN\000\
  REF_IS_NULL\000\
  VEC_SHUFFLE\000\
  FUNC\000\
  START\000\
  TYPE\000\
  PARAM\000\
  RESULT\000\
  LOCAL\000\
  GLOBAL\000\
  TABLE\000\
  ELEM\000\
  MEMORY\000\
  DATA\000\
  DECLARE\000\
  OFFSET\000\
  ITEM\000\
  IMPORT\000\
  EXPORT\000\
  MODULE\000\
  BIN\000\
  QUOTE\000\
  SCRIPT\000\
  REGISTER\000\
  INVOKE\000\
  GET\000\
  ASSERT_MALFORMED\000\
  ASSERT_INVALID\000\
  ASSERT_SOFT_INVALID\000\
  ASSERT_UNLINKABLE\000\
  ASSERT_RETURN\000\
  ASSERT_TRAP\000\
  ASSERT_EXHAUSTION\000\
  INPUT\000\
  OUTPUT\000\
  EOF\000\
  "

let yynames_block = "\
  NAT\000\
  INT\000\
  FLOAT\000\
  STRING\000\
  VAR\000\
  NUM_TYPE\000\
  VEC_TYPE\000\
  VEC_SHAPE\000\
  LOAD\000\
  STORE\000\
  OFFSET_EQ_NAT\000\
  ALIGN_EQ_NAT\000\
  CONST\000\
  UNARY\000\
  BINARY\000\
  TEST\000\
  COMPARE\000\
  CONVERT\000\
  VEC_LOAD\000\
  VEC_STORE\000\
  VEC_LOAD_LANE\000\
  VEC_STORE_LANE\000\
  VEC_CONST\000\
  VEC_UNARY\000\
  VEC_BINARY\000\
  VEC_TERNARY\000\
  VEC_TEST\000\
  VEC_SHIFT\000\
  VEC_BITMASK\000\
  VEC_EXTRACT\000\
  VEC_REPLACE\000\
  NAN\000\
  VEC_SPLAT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 282 "text/parser.mly"
           ( name _1 (at ()) )
# 2542 "text/parser.ml"
               : 'name))
; (fun __caml_parser_env ->
    Obj.repr(
# 285 "text/parser.mly"
                ( "" )
# 2548 "text/parser.ml"
               : 'string_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'string_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 286 "text/parser.mly"
                       ( _1 ^ _2 )
# 2556 "text/parser.ml"
               : 'string_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 292 "text/parser.mly"
         ( FuncRefType )
# 2562 "text/parser.ml"
               : 'ref_kind))
; (fun __caml_parser_env ->
    Obj.repr(
# 293 "text/parser.mly"
           ( ExternRefType )
# 2568 "text/parser.ml"
               : 'ref_kind))
; (fun __caml_parser_env ->
    Obj.repr(
# 296 "text/parser.mly"
            ( FuncRefType )
# 2574 "text/parser.ml"
               : 'ref_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 297 "text/parser.mly"
              ( ExternRefType )
# 2580 "text/parser.ml"
               : 'ref_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Types.num_type) in
    Obj.repr(
# 300 "text/parser.mly"
             ( NumType _1 )
# 2587 "text/parser.ml"
               : 'value_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Types.vec_type) in
    Obj.repr(
# 301 "text/parser.mly"
             ( VecType _1 )
# 2594 "text/parser.ml"
               : 'value_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ref_type) in
    Obj.repr(
# 302 "text/parser.mly"
             ( RefType _1 )
# 2601 "text/parser.ml"
               : 'value_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 305 "text/parser.mly"
                ( [] )
# 2607 "text/parser.ml"
               : 'value_type_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'value_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'value_type_list) in
    Obj.repr(
# 306 "text/parser.mly"
                               ( _1 :: _2 )
# 2615 "text/parser.ml"
               : 'value_type_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'value_type) in
    Obj.repr(
# 309 "text/parser.mly"
               ( GlobalType (_1, Immutable) )
# 2622 "text/parser.ml"
               : 'global_type))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'value_type) in
    Obj.repr(
# 310 "text/parser.mly"
                             ( GlobalType (_3, Mutable) )
# 2629 "text/parser.ml"
               : 'global_type))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'func_type) in
    Obj.repr(
# 313 "text/parser.mly"
                             ( _3 )
# 2636 "text/parser.ml"
               : 'def_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'func_type_result) in
    Obj.repr(
# 317 "text/parser.mly"
    ( FuncType ([], _1) )
# 2643 "text/parser.ml"
               : 'func_type))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'value_type_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'func_type) in
    Obj.repr(
# 319 "text/parser.mly"
    ( let FuncType (ins, out) = _5 in FuncType (_3 @ ins, out) )
# 2651 "text/parser.ml"
               : 'func_type))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'bind_var) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'value_type) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'func_type) in
    Obj.repr(
# 321 "text/parser.mly"
    ( let FuncType (ins, out) = _6 in FuncType (_4 :: ins, out) )
# 2660 "text/parser.ml"
               : 'func_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 325 "text/parser.mly"
    ( [] )
# 2666 "text/parser.ml"
               : 'func_type_result))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'value_type_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'func_type_result) in
    Obj.repr(
# 327 "text/parser.mly"
    ( _3 @ _5 )
# 2674 "text/parser.ml"
               : 'func_type_result))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'limits) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ref_type) in
    Obj.repr(
# 330 "text/parser.mly"
                    ( TableType (_1, _2) )
# 2682 "text/parser.ml"
               : 'table_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'limits) in
    Obj.repr(
# 333 "text/parser.mly"
           ( MemoryType _1 )
# 2689 "text/parser.ml"
               : 'memory_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 336 "text/parser.mly"
        ( {min = nat32 _1 (ati 1); max = None} )
# 2696 "text/parser.ml"
               : 'limits))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 337 "text/parser.mly"
            ( {min = nat32 _1 (ati 1); max = Some (nat32 _2 (ati 2))} )
# 2704 "text/parser.ml"
               : 'limits))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'var) in
    Obj.repr(
# 340 "text/parser.mly"
                       ( _3 )
# 2711 "text/parser.ml"
               : 'type_use))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 346 "text/parser.mly"
        ( _1 @@ at () )
# 2718 "text/parser.ml"
               : 'num))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 347 "text/parser.mly"
        ( _1 @@ at () )
# 2725 "text/parser.ml"
               : 'num))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 348 "text/parser.mly"
          ( _1 @@ at () )
# 2732 "text/parser.ml"
               : 'num))
; (fun __caml_parser_env ->
    Obj.repr(
# 351 "text/parser.mly"
                ( [] )
# 2738 "text/parser.ml"
               : 'num_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'num) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'num_list) in
    Obj.repr(
# 352 "text/parser.mly"
                 ( _1 :: _2 )
# 2746 "text/parser.ml"
               : 'num_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 355 "text/parser.mly"
        ( let at = at () in fun c lookup -> nat32 _1 at @@ at )
# 2753 "text/parser.ml"
               : 'var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 356 "text/parser.mly"
        ( let at = at () in fun c lookup -> lookup c (_1 @@ at) @@ at )
# 2760 "text/parser.ml"
               : 'var))
; (fun __caml_parser_env ->
    Obj.repr(
# 359 "text/parser.mly"
                ( fun c lookup -> [] )
# 2766 "text/parser.ml"
               : 'var_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'var) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var_list) in
    Obj.repr(
# 360 "text/parser.mly"
                 ( fun c lookup -> _1 c lookup :: _2 c lookup )
# 2774 "text/parser.ml"
               : 'var_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 363 "text/parser.mly"
                ( fun c anon bind -> anon c )
# 2780 "text/parser.ml"
               : 'bind_var_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bind_var) in
    Obj.repr(
# 364 "text/parser.mly"
             ( fun c anon bind -> bind c _1 )
# 2787 "text/parser.ml"
               : 'bind_var_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 367 "text/parser.mly"
        ( _1 @@ at () )
# 2794 "text/parser.ml"
               : 'bind_var))
; (fun __caml_parser_env ->
    Obj.repr(
# 371 "text/parser.mly"
    ( fun c xs ->
      List.iter (fun x -> error x.at "mismatching label") xs;
      anon_label c )
# 2802 "text/parser.ml"
               : 'labeling_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bind_var) in
    Obj.repr(
# 375 "text/parser.mly"
    ( fun c xs ->
      List.iter
        (fun x -> if x.it <> _1.it then error x.at "mismatching label") xs;
      bind_label c _1 )
# 2812 "text/parser.ml"
               : 'labeling_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 381 "text/parser.mly"
                          ( [] )
# 2818 "text/parser.ml"
               : 'labeling_end_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bind_var) in
    Obj.repr(
# 382 "text/parser.mly"
             ( [_1] )
# 2825 "text/parser.ml"
               : 'labeling_end_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 385 "text/parser.mly"
                ( 0l )
# 2831 "text/parser.ml"
               : 'offset_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 386 "text/parser.mly"
                  ( nat32 _1 (at ()) )
# 2838 "text/parser.ml"
               : 'offset_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 389 "text/parser.mly"
                ( None )
# 2844 "text/parser.ml"
               : 'align_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 391 "text/parser.mly"
    ( let n = nat _1 (at ()) in
      if not (Lib.Int.is_power_of_two n) then
        error (at ()) "alignment must be a power of two";
      Some (Lib.Int.log2 n) )
# 2854 "text/parser.ml"
               : 'align_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'plain_instr) in
    Obj.repr(
# 400 "text/parser.mly"
                ( let at = at () in fun c -> [_1 c @@ at] )
# 2861 "text/parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'select_instr_instr) in
    Obj.repr(
# 401 "text/parser.mly"
                       ( fun c -> let e, es = _1 c in e :: es )
# 2868 "text/parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'call_instr_instr) in
    Obj.repr(
# 402 "text/parser.mly"
                     ( fun c -> let e, es = _1 c in e :: es )
# 2875 "text/parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'block_instr) in
    Obj.repr(
# 403 "text/parser.mly"
                ( let at = at () in fun c -> [_1 c @@ at] )
# 2882 "text/parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 404 "text/parser.mly"
         ( _1 )
# 2889 "text/parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    Obj.repr(
# 407 "text/parser.mly"
                ( fun c -> unreachable )
# 2895 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    Obj.repr(
# 408 "text/parser.mly"
        ( fun c -> nop )
# 2901 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    Obj.repr(
# 409 "text/parser.mly"
         ( fun c -> drop )
# 2907 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var) in
    Obj.repr(
# 410 "text/parser.mly"
           ( fun c -> br (_2 c label) )
# 2914 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var) in
    Obj.repr(
# 411 "text/parser.mly"
              ( fun c -> br_if (_2 c label) )
# 2921 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'var) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'var_list) in
    Obj.repr(
# 413 "text/parser.mly"
    ( fun c -> let xs, x = Lib.List.split_last (_2 c label :: _3 c label) in
      br_table xs x )
# 2930 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    Obj.repr(
# 415 "text/parser.mly"
           ( fun c -> return )
# 2936 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var) in
    Obj.repr(
# 416 "text/parser.mly"
             ( fun c -> call (_2 c func) )
# 2943 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var) in
    Obj.repr(
# 417 "text/parser.mly"
                  ( fun c -> local_get (_2 c local) )
# 2950 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var) in
    Obj.repr(
# 418 "text/parser.mly"
                  ( fun c -> local_set (_2 c local) )
# 2957 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var) in
    Obj.repr(
# 419 "text/parser.mly"
                  ( fun c -> local_tee (_2 c local) )
# 2964 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var) in
    Obj.repr(
# 420 "text/parser.mly"
                   ( fun c -> global_get (_2 c global) )
# 2971 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var) in
    Obj.repr(
# 421 "text/parser.mly"
                   ( fun c -> global_set (_2 c global) )
# 2978 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var) in
    Obj.repr(
# 422 "text/parser.mly"
                  ( fun c -> table_get (_2 c table) )
# 2985 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var) in
    Obj.repr(
# 423 "text/parser.mly"
                  ( fun c -> table_set (_2 c table) )
# 2992 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var) in
    Obj.repr(
# 424 "text/parser.mly"
                   ( fun c -> table_size (_2 c table) )
# 2999 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var) in
    Obj.repr(
# 425 "text/parser.mly"
                   ( fun c -> table_grow (_2 c table) )
# 3006 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var) in
    Obj.repr(
# 426 "text/parser.mly"
                   ( fun c -> table_fill (_2 c table) )
# 3013 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'var) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'var) in
    Obj.repr(
# 427 "text/parser.mly"
                       ( fun c -> table_copy (_2 c table) (_3 c table) )
# 3021 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'var) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'var) in
    Obj.repr(
# 428 "text/parser.mly"
                       ( fun c -> table_init (_2 c table) (_3 c elem) )
# 3029 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    Obj.repr(
# 429 "text/parser.mly"
              ( let at = at () in fun c -> table_get (0l @@ at) )
# 3035 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    Obj.repr(
# 430 "text/parser.mly"
              ( let at = at () in fun c -> table_set (0l @@ at) )
# 3041 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    Obj.repr(
# 431 "text/parser.mly"
               ( let at = at () in fun c -> table_size (0l @@ at) )
# 3047 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    Obj.repr(
# 432 "text/parser.mly"
               ( let at = at () in fun c -> table_grow (0l @@ at) )
# 3053 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    Obj.repr(
# 433 "text/parser.mly"
               ( let at = at () in fun c -> table_fill (0l @@ at) )
# 3059 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    Obj.repr(
# 435 "text/parser.mly"
    ( let at = at () in fun c -> table_copy (0l @@ at) (0l @@ at) )
# 3065 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var) in
    Obj.repr(
# 437 "text/parser.mly"
    ( let at = at () in fun c -> table_init (0l @@ at) (_2 c elem) )
# 3072 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var) in
    Obj.repr(
# 438 "text/parser.mly"
                  ( fun c -> elem_drop (_2 c elem) )
# 3079 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : int option -> Memory.offset -> Ast.instr') in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'offset_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'align_opt) in
    Obj.repr(
# 439 "text/parser.mly"
                              ( fun c -> _1 _3 _2 )
# 3088 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : int option -> Memory.offset -> Ast.instr') in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'offset_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'align_opt) in
    Obj.repr(
# 440 "text/parser.mly"
                               ( fun c -> _1 _3 _2 )
# 3097 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : int option -> Memory.offset -> Ast.instr') in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'offset_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'align_opt) in
    Obj.repr(
# 441 "text/parser.mly"
                                  ( fun c -> _1 _3 _2 )
# 3106 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : int option -> Memory.offset -> Ast.instr') in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'offset_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'align_opt) in
    Obj.repr(
# 442 "text/parser.mly"
                                   ( fun c -> _1 _3 _2 )
# 3115 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : int option -> Memory.offset -> int -> Ast.instr') in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'offset_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'align_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 444 "text/parser.mly"
    ( let at = at () in fun c -> _1 _3 _2 (vec_lane_index _4 at) )
# 3125 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : int option -> Memory.offset -> int -> Ast.instr') in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'offset_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'align_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 446 "text/parser.mly"
    ( let at = at () in fun c -> _1 _3 _2 (vec_lane_index _4 at) )
# 3135 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    Obj.repr(
# 447 "text/parser.mly"
                ( fun c -> memory_size )
# 3141 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    Obj.repr(
# 448 "text/parser.mly"
                ( fun c -> memory_grow )
# 3147 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    Obj.repr(
# 449 "text/parser.mly"
                ( fun c -> memory_fill )
# 3153 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    Obj.repr(
# 450 "text/parser.mly"
                ( fun c -> memory_copy )
# 3159 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var) in
    Obj.repr(
# 451 "text/parser.mly"
                    ( fun c -> memory_init (_2 c data) )
# 3166 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var) in
    Obj.repr(
# 452 "text/parser.mly"
                  ( fun c -> data_drop (_2 c data) )
# 3173 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ref_kind) in
    Obj.repr(
# 453 "text/parser.mly"
                      ( fun c -> ref_null _2 )
# 3180 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    Obj.repr(
# 454 "text/parser.mly"
                ( fun c -> ref_is_null )
# 3186 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var) in
    Obj.repr(
# 455 "text/parser.mly"
                 ( fun c -> ref_func (_2 c func) )
# 3193 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string Source.phrase -> Ast.instr' * Values.num) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'num) in
    Obj.repr(
# 456 "text/parser.mly"
              ( fun c -> fst (num _1 _2) )
# 3201 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.instr') in
    Obj.repr(
# 457 "text/parser.mly"
         ( fun c -> _1 )
# 3208 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.instr') in
    Obj.repr(
# 458 "text/parser.mly"
            ( fun c -> _1 )
# 3215 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.instr') in
    Obj.repr(
# 459 "text/parser.mly"
          ( fun c -> _1 )
# 3222 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.instr') in
    Obj.repr(
# 460 "text/parser.mly"
           ( fun c -> _1 )
# 3229 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.instr') in
    Obj.repr(
# 461 "text/parser.mly"
            ( fun c -> _1 )
# 3236 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : V128.shape -> string Source.phrase list -> Source.region -> Ast.instr' * Values.vec) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : V128.shape) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'num_list) in
    Obj.repr(
# 462 "text/parser.mly"
                                 ( let at = at () in fun c -> fst (vec _1 _2 _3 at) )
# 3245 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.instr') in
    Obj.repr(
# 463 "text/parser.mly"
              ( fun c -> _1 )
# 3252 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.instr') in
    Obj.repr(
# 464 "text/parser.mly"
               ( fun c -> _1 )
# 3259 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.instr') in
    Obj.repr(
# 465 "text/parser.mly"
                ( fun c -> _1 )
# 3266 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.instr') in
    Obj.repr(
# 466 "text/parser.mly"
             ( fun c -> _1 )
# 3273 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.instr') in
    Obj.repr(
# 467 "text/parser.mly"
              ( fun c -> _1 )
# 3280 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.instr') in
    Obj.repr(
# 468 "text/parser.mly"
                ( fun c -> _1 )
# 3287 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'num_list) in
    Obj.repr(
# 469 "text/parser.mly"
                         ( let at = at () in fun c -> i8x16_shuffle (shuffle_lit _2 at) )
# 3294 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.instr') in
    Obj.repr(
# 470 "text/parser.mly"
              ( fun c -> _1 )
# 3301 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int -> Ast.instr') in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 471 "text/parser.mly"
                    ( let at = at () in fun c -> _1 (vec_lane_index _2 at) )
# 3309 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int -> Ast.instr') in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 472 "text/parser.mly"
                    ( let at = at () in fun c -> _1 (vec_lane_index _2 at) )
# 3317 "text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'select_instr_results) in
    Obj.repr(
# 477 "text/parser.mly"
    ( let at = at () in fun c -> let b, ts = _2 in
      select (if b then (Some ts) else None) @@ at )
# 3325 "text/parser.ml"
               : 'select_instr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'value_type_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'select_instr_results) in
    Obj.repr(
# 482 "text/parser.mly"
    ( let _, ts = _5 in true, _3 @ ts )
# 3333 "text/parser.ml"
               : 'select_instr_results))
; (fun __caml_parser_env ->
    Obj.repr(
# 484 "text/parser.mly"
    ( false, [] )
# 3339 "text/parser.ml"
               : 'select_instr_results))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'select_instr_results_instr) in
    Obj.repr(
# 488 "text/parser.mly"
    ( let at1 = ati 1 in
      fun c -> let b, ts, es = _2 c in
      select (if b then (Some ts) else None) @@ at1, es )
# 3348 "text/parser.ml"
               : 'select_instr_instr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'value_type_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'select_instr_results_instr) in
    Obj.repr(
# 494 "text/parser.mly"
    ( fun c -> let _, ts, es = _5 c in true, _3 @ ts, es )
# 3356 "text/parser.ml"
               : 'select_instr_results_instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'instr) in
    Obj.repr(
# 496 "text/parser.mly"
    ( fun c -> false, [], _1 c )
# 3363 "text/parser.ml"
               : 'select_instr_results_instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'var) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'call_instr_type) in
    Obj.repr(
# 501 "text/parser.mly"
    ( let at = at () in fun c -> call_indirect (_2 c table) (_3 c) @@ at )
# 3371 "text/parser.ml"
               : 'call_instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'call_instr_type) in
    Obj.repr(
# 503 "text/parser.mly"
    ( let at = at () in fun c -> call_indirect (0l @@ at) (_2 c) @@ at )
# 3378 "text/parser.ml"
               : 'call_instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'type_use) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'call_instr_params) in
    Obj.repr(
# 507 "text/parser.mly"
    ( let at1 = ati 1 in
      fun c ->
      match _2 c with
      | FuncType ([], []) -> _1 c type_
      | ft -> inline_type_explicit c (_1 c type_) ft at1 )
# 3390 "text/parser.ml"
               : 'call_instr_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'call_instr_params) in
    Obj.repr(
# 513 "text/parser.mly"
    ( let at = at () in fun c -> inline_type c (_1 c) at )
# 3397 "text/parser.ml"
               : 'call_instr_type))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'value_type_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'call_instr_params) in
    Obj.repr(
# 517 "text/parser.mly"
    ( fun c -> let FuncType (ts1, ts2) = _5 c in FuncType (_3 @ ts1, ts2) )
# 3405 "text/parser.ml"
               : 'call_instr_params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'call_instr_results) in
    Obj.repr(
# 519 "text/parser.mly"
    ( fun c -> FuncType ([], _1 c) )
# 3412 "text/parser.ml"
               : 'call_instr_params))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'value_type_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'call_instr_results) in
    Obj.repr(
# 523 "text/parser.mly"
    ( fun c -> _3 @ _5 c )
# 3420 "text/parser.ml"
               : 'call_instr_results))
; (fun __caml_parser_env ->
    Obj.repr(
# 525 "text/parser.mly"
    ( fun c -> [] )
# 3426 "text/parser.ml"
               : 'call_instr_results))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'var) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'call_instr_type_instr) in
    Obj.repr(
# 530 "text/parser.mly"
    ( let at1 = ati 1 in
      fun c -> let x, es = _3 c in call_indirect (_2 c table) x @@ at1, es )
# 3435 "text/parser.ml"
               : 'call_instr_instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'call_instr_type_instr) in
    Obj.repr(
# 533 "text/parser.mly"
    ( let at1 = ati 1 in
      fun c -> let x, es = _2 c in call_indirect (0l @@ at1) x @@ at1, es )
# 3443 "text/parser.ml"
               : 'call_instr_instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'type_use) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'call_instr_params_instr) in
    Obj.repr(
# 538 "text/parser.mly"
    ( let at1 = ati 1 in
      fun c ->
      match _2 c with
      | FuncType ([], []), es -> _1 c type_, es
      | ft, es -> inline_type_explicit c (_1 c type_) ft at1, es )
# 3455 "text/parser.ml"
               : 'call_instr_type_instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'call_instr_params_instr) in
    Obj.repr(
# 544 "text/parser.mly"
    ( let at = at () in
      fun c -> let ft, es = _1 c in inline_type c ft at, es )
# 3463 "text/parser.ml"
               : 'call_instr_type_instr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'value_type_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'call_instr_params_instr) in
    Obj.repr(
# 549 "text/parser.mly"
    ( fun c ->
      let FuncType (ts1, ts2), es = _5 c in FuncType (_3 @ ts1, ts2), es )
# 3472 "text/parser.ml"
               : 'call_instr_params_instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'call_instr_results_instr) in
    Obj.repr(
# 552 "text/parser.mly"
    ( fun c -> let ts, es = _1 c in FuncType ([], ts), es )
# 3479 "text/parser.ml"
               : 'call_instr_params_instr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'value_type_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'call_instr_results_instr) in
    Obj.repr(
# 556 "text/parser.mly"
    ( fun c -> let ts, es = _5 c in _3 @ ts, es )
# 3487 "text/parser.ml"
               : 'call_instr_results_instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'instr) in
    Obj.repr(
# 558 "text/parser.mly"
    ( fun c -> [], _1 c )
# 3494 "text/parser.ml"
               : 'call_instr_results_instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'labeling_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'block) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'labeling_end_opt) in
    Obj.repr(
# 563 "text/parser.mly"
    ( fun c -> let c' = _2 c _5 in let bt, es = _3 c' in block bt es )
# 3503 "text/parser.ml"
               : 'block_instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'labeling_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'block) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'labeling_end_opt) in
    Obj.repr(
# 565 "text/parser.mly"
    ( fun c -> let c' = _2 c _5 in let bt, es = _3 c' in loop bt es )
# 3512 "text/parser.ml"
               : 'block_instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'labeling_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'block) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'labeling_end_opt) in
    Obj.repr(
# 567 "text/parser.mly"
    ( fun c -> let c' = _2 c _5 in let bt, es = _3 c' in if_ bt es [] )
# 3521 "text/parser.ml"
               : 'block_instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'labeling_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'block) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'labeling_end_opt) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'instr_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'labeling_end_opt) in
    Obj.repr(
# 569 "text/parser.mly"
    ( fun c -> let c' = _2 c (_5 @ _8) in
      let ts, es1 = _3 c' in if_ ts es1 (_6 c') )
# 3533 "text/parser.ml"
               : 'block_instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'type_use) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'block_param_body) in
    Obj.repr(
# 574 "text/parser.mly"
    ( let at1 = ati 1 in
      fun c ->
      VarBlockType (inline_type_explicit c (_1 c type_) (fst _2) at1),
      snd _2 c )
# 3544 "text/parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'block_param_body) in
    Obj.repr(
# 579 "text/parser.mly"
    ( let at = at () in
      fun c ->
      let bt =
        match fst _1 with
        | FuncType ([], []) -> ValBlockType None
        | FuncType ([], [t]) -> ValBlockType (Some t)
        | ft ->  VarBlockType (inline_type c ft at)
      in bt, snd _1 c )
# 3558 "text/parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'block_result_body) in
    Obj.repr(
# 589 "text/parser.mly"
                      ( _1 )
# 3565 "text/parser.ml"
               : 'block_param_body))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'value_type_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'block_param_body) in
    Obj.repr(
# 591 "text/parser.mly"
    ( let FuncType (ins, out) = fst _5 in
      FuncType (_3 @ ins, out), snd _5 )
# 3574 "text/parser.ml"
               : 'block_param_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'instr_list) in
    Obj.repr(
# 595 "text/parser.mly"
               ( FuncType ([], []), _1 )
# 3581 "text/parser.ml"
               : 'block_result_body))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'value_type_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'block_result_body) in
    Obj.repr(
# 597 "text/parser.mly"
    ( let FuncType (ins, out) = fst _5 in
      FuncType (ins, _3 @ out), snd _5 )
# 3590 "text/parser.ml"
               : 'block_result_body))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr1) in
    Obj.repr(
# 603 "text/parser.mly"
    ( let at = at () in fun c -> let es, e' = _2 c in es @ [e' @@ at] )
# 3597 "text/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'plain_instr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr_list) in
    Obj.repr(
# 606 "text/parser.mly"
                          ( fun c -> _2 c, _1 c )
# 3605 "text/parser.ml"
               : 'expr1))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'select_expr_results) in
    Obj.repr(
# 608 "text/parser.mly"
    ( fun c -> let b, ts, es = _2 c in es, select (if b then (Some ts) else None) )
# 3612 "text/parser.ml"
               : 'expr1))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'var) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'call_expr_type) in
    Obj.repr(
# 610 "text/parser.mly"
    ( fun c -> let x, es = _3 c in es, call_indirect (_2 c table) x )
# 3620 "text/parser.ml"
               : 'expr1))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'call_expr_type) in
    Obj.repr(
# 612 "text/parser.mly"
    ( let at1 = ati 1 in
      fun c -> let x, es = _2 c in es, call_indirect (0l @@ at1) x )
# 3628 "text/parser.ml"
               : 'expr1))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'labeling_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 615 "text/parser.mly"
    ( fun c -> let c' = _2 c [] in let bt, es = _3 c' in [], block bt es )
# 3636 "text/parser.ml"
               : 'expr1))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'labeling_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 617 "text/parser.mly"
    ( fun c -> let c' = _2 c [] in let bt, es = _3 c' in [], loop bt es )
# 3644 "text/parser.ml"
               : 'expr1))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'labeling_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'if_block) in
    Obj.repr(
# 619 "text/parser.mly"
    ( fun c -> let c' = _2 c [] in
      let bt, (es, es1, es2) = _3 c c' in es, if_ bt es1 es2 )
# 3653 "text/parser.ml"
               : 'expr1))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'value_type_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'select_expr_results) in
    Obj.repr(
# 624 "text/parser.mly"
    ( fun c -> let _, ts, es = _5 c in true, _3 @ ts, es )
# 3661 "text/parser.ml"
               : 'select_expr_results))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr_list) in
    Obj.repr(
# 626 "text/parser.mly"
    ( fun c -> false, [], _1 c )
# 3668 "text/parser.ml"
               : 'select_expr_results))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'type_use) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'call_expr_params) in
    Obj.repr(
# 630 "text/parser.mly"
    ( let at1 = ati 1 in
      fun c ->
      match _2 c with
      | FuncType ([], []), es -> _1 c type_, es
      | ft, es -> inline_type_explicit c (_1 c type_) ft at1, es )
# 3680 "text/parser.ml"
               : 'call_expr_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'call_expr_params) in
    Obj.repr(
# 636 "text/parser.mly"
    ( let at1 = ati 1 in
      fun c -> let ft, es = _1 c in inline_type c ft at1, es )
# 3688 "text/parser.ml"
               : 'call_expr_type))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'value_type_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'call_expr_params) in
    Obj.repr(
# 641 "text/parser.mly"
    ( fun c ->
      let FuncType (ts1, ts2), es = _5 c in FuncType (_3 @ ts1, ts2), es )
# 3697 "text/parser.ml"
               : 'call_expr_params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'call_expr_results) in
    Obj.repr(
# 644 "text/parser.mly"
    ( fun c -> let ts, es = _1 c in FuncType ([], ts), es )
# 3704 "text/parser.ml"
               : 'call_expr_params))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'value_type_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'call_expr_results) in
    Obj.repr(
# 648 "text/parser.mly"
    ( fun c -> let ts, es = _5 c in _3 @ ts, es )
# 3712 "text/parser.ml"
               : 'call_expr_results))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr_list) in
    Obj.repr(
# 650 "text/parser.mly"
    ( fun c -> [], _1 c )
# 3719 "text/parser.ml"
               : 'call_expr_results))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'type_use) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'if_block_param_body) in
    Obj.repr(
# 655 "text/parser.mly"
    ( let at = at () in
      fun c c' ->
      VarBlockType (inline_type_explicit c (_1 c type_) (fst _2) at),
      snd _2 c c' )
# 3730 "text/parser.ml"
               : 'if_block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'if_block_param_body) in
    Obj.repr(
# 660 "text/parser.mly"
    ( let at = at () in
      fun c c' ->
      let bt =
        match fst _1 with
        | FuncType ([], []) -> ValBlockType None
        | FuncType ([], [t]) -> ValBlockType (Some t)
        | ft ->  VarBlockType (inline_type c ft at)
      in bt, snd _1 c c' )
# 3744 "text/parser.ml"
               : 'if_block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'if_block_result_body) in
    Obj.repr(
# 670 "text/parser.mly"
                         ( _1 )
# 3751 "text/parser.ml"
               : 'if_block_param_body))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'value_type_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'if_block_param_body) in
    Obj.repr(
# 672 "text/parser.mly"
    ( let FuncType (ins, out) = fst _5 in
      FuncType (_3 @ ins, out), snd _5 )
# 3760 "text/parser.ml"
               : 'if_block_param_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'if_) in
    Obj.repr(
# 676 "text/parser.mly"
        ( FuncType ([], []), _1 )
# 3767 "text/parser.ml"
               : 'if_block_result_body))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'value_type_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'if_block_result_body) in
    Obj.repr(
# 678 "text/parser.mly"
    ( let FuncType (ins, out) = fst _5 in
      FuncType (ins, _3 @ out), snd _5 )
# 3776 "text/parser.ml"
               : 'if_block_result_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'if_) in
    Obj.repr(
# 683 "text/parser.mly"
    ( fun c c' -> let es = _1 c in let es0, es1, es2 = _2 c c' in
      es @ es0, es1, es2 )
# 3785 "text/parser.ml"
               : 'if_))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'instr_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'instr_list) in
    Obj.repr(
# 686 "text/parser.mly"
    ( fun c c' -> [], _3 c', _7 c' )
# 3793 "text/parser.ml"
               : 'if_))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'instr_list) in
    Obj.repr(
# 688 "text/parser.mly"
    ( fun c c' -> [], _3 c', [] )
# 3800 "text/parser.ml"
               : 'if_))
; (fun __caml_parser_env ->
    Obj.repr(
# 691 "text/parser.mly"
                ( fun c -> [] )
# 3806 "text/parser.ml"
               : 'instr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'select_instr) in
    Obj.repr(
# 692 "text/parser.mly"
                 ( fun c -> [_1 c] )
# 3813 "text/parser.ml"
               : 'instr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'call_instr) in
    Obj.repr(
# 693 "text/parser.mly"
               ( fun c -> [_1 c] )
# 3820 "text/parser.ml"
               : 'instr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'instr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'instr_list) in
    Obj.repr(
# 694 "text/parser.mly"
                     ( fun c -> _1 c @ _2 c )
# 3828 "text/parser.ml"
               : 'instr_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 697 "text/parser.mly"
                ( fun c -> [] )
# 3834 "text/parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr_list) in
    Obj.repr(
# 698 "text/parser.mly"
                   ( fun c -> _1 c @ _2 c )
# 3842 "text/parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'instr_list) in
    Obj.repr(
# 701 "text/parser.mly"
               ( let at = at () in fun c -> _1 c @@ at )
# 3849 "text/parser.ml"
               : 'const_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'bind_var_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'func_fields) in
    Obj.repr(
# 708 "text/parser.mly"
    ( let at = at () in
      fun c -> let x = _3 c anon_func bind_func @@ at in fun () -> _4 c x at )
# 3858 "text/parser.ml"
               : 'func))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'type_use) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'func_fields_body) in
    Obj.repr(
# 713 "text/parser.mly"
    ( fun c x at ->
      let c' = enter_func c in
      let y = inline_type_explicit c' (_1 c' type_) (fst _2) at in
      [{(snd _2 c') with ftype = y} @@ at], [], [] )
# 3869 "text/parser.ml"
               : 'func_fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'func_fields_body) in
    Obj.repr(
# 718 "text/parser.mly"
    ( fun c x at ->
      let c' = enter_func c in
      let y = inline_type c' (fst _1) at in
      [{(snd _1 c') with ftype = y} @@ at], [], [] )
# 3879 "text/parser.ml"
               : 'func_fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'inline_import) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'type_use) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'func_fields_import) in
    Obj.repr(
# 723 "text/parser.mly"
    ( fun c x at ->
      let y = inline_type_explicit c (_2 c type_) _3 at in
      [],
      [{ module_name = fst _1; item_name = snd _1;
         idesc = FuncImport y @@ at } @@ at ], [] )
# 3892 "text/parser.ml"
               : 'func_fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'inline_import) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'func_fields_import) in
    Obj.repr(
# 729 "text/parser.mly"
    ( fun c x at ->
      let y = inline_type c _2 at in
      [],
      [{ module_name = fst _1; item_name = snd _1;
         idesc = FuncImport y @@ at } @@ at ], [] )
# 3904 "text/parser.ml"
               : 'func_fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'inline_export) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'func_fields) in
    Obj.repr(
# 735 "text/parser.mly"
    ( fun c x at ->
      let fns, ims, exs = _2 c x at in fns, ims, _1 (FuncExport x) c :: exs )
# 3913 "text/parser.ml"
               : 'func_fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'func_fields_import_result) in
    Obj.repr(
# 739 "text/parser.mly"
                              ( _1 )
# 3920 "text/parser.ml"
               : 'func_fields_import))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'value_type_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'func_fields_import) in
    Obj.repr(
# 741 "text/parser.mly"
    ( let FuncType (ins, out) = _5 in FuncType (_3 @ ins, out) )
# 3928 "text/parser.ml"
               : 'func_fields_import))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'bind_var) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'value_type) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'func_fields_import) in
    Obj.repr(
# 743 "text/parser.mly"
    ( let FuncType (ins, out) = _6 in FuncType (_4 :: ins, out) )
# 3937 "text/parser.ml"
               : 'func_fields_import))
; (fun __caml_parser_env ->
    Obj.repr(
# 746 "text/parser.mly"
                ( FuncType ([], []) )
# 3943 "text/parser.ml"
               : 'func_fields_import_result))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'value_type_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'func_fields_import_result) in
    Obj.repr(
# 748 "text/parser.mly"
    ( let FuncType (ins, out) = _5 in FuncType (ins, _3 @ out) )
# 3951 "text/parser.ml"
               : 'func_fields_import_result))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'func_result_body) in
    Obj.repr(
# 751 "text/parser.mly"
                     ( _1 )
# 3958 "text/parser.ml"
               : 'func_fields_body))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'value_type_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'func_fields_body) in
    Obj.repr(
# 753 "text/parser.mly"
    ( let FuncType (ins, out) = fst _5 in
      FuncType (_3 @ ins, out),
      fun c -> anon_locals c (lazy _3); snd _5 c )
# 3968 "text/parser.ml"
               : 'func_fields_body))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'bind_var) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'value_type) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'func_fields_body) in
    Obj.repr(
# 757 "text/parser.mly"
    ( let FuncType (ins, out) = fst _6 in
      FuncType (_4 :: ins, out),
      fun c -> ignore (bind_local c _3); snd _6 c )
# 3979 "text/parser.ml"
               : 'func_fields_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'func_body) in
    Obj.repr(
# 762 "text/parser.mly"
              ( FuncType ([], []), _1 )
# 3986 "text/parser.ml"
               : 'func_result_body))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'value_type_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'func_result_body) in
    Obj.repr(
# 764 "text/parser.mly"
    ( let FuncType (ins, out) = fst _5 in
      FuncType (ins, _3 @ out), snd _5 )
# 3995 "text/parser.ml"
               : 'func_result_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'instr_list) in
    Obj.repr(
# 769 "text/parser.mly"
    ( fun c -> let c' = anon_label c in
      {ftype = -1l @@ at(); locals = []; body = _1 c'} )
# 4003 "text/parser.ml"
               : 'func_body))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'value_type_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'func_body) in
    Obj.repr(
# 772 "text/parser.mly"
    ( fun c -> anon_locals c (lazy _3); let f = _5 c in
      {f with locals = _3 @ f.locals} )
# 4012 "text/parser.ml"
               : 'func_body))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'bind_var) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'value_type) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'func_body) in
    Obj.repr(
# 775 "text/parser.mly"
    ( fun c -> ignore (bind_local c _3); let f = _6 c in
      {f with locals = _4 :: f.locals} )
# 4022 "text/parser.ml"
               : 'func_body))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'var) in
    Obj.repr(
# 782 "text/parser.mly"
                        ( fun c -> _3 c )
# 4029 "text/parser.ml"
               : 'table_use))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'var) in
    Obj.repr(
# 785 "text/parser.mly"
                         ( fun c -> _3 c )
# 4036 "text/parser.ml"
               : 'memory_use))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'const_expr) in
    Obj.repr(
# 788 "text/parser.mly"
                                ( _3 )
# 4043 "text/parser.ml"
               : 'offset))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 789 "text/parser.mly"
         ( let at = at () in fun c -> _1 c @@ at )
# 4050 "text/parser.ml"
               : 'offset))
; (fun __caml_parser_env ->
    Obj.repr(
# 792 "text/parser.mly"
         ( FuncRefType )
# 4056 "text/parser.ml"
               : 'elem_kind))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'const_expr) in
    Obj.repr(
# 795 "text/parser.mly"
                              ( _3 )
# 4063 "text/parser.ml"
               : 'elem_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 796 "text/parser.mly"
         ( let at = at () in fun c -> _1 c @@ at )
# 4070 "text/parser.ml"
               : 'elem_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 799 "text/parser.mly"
                ( fun c -> [] )
# 4076 "text/parser.ml"
               : 'elem_expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'elem_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'elem_expr_list) in
    Obj.repr(
# 800 "text/parser.mly"
                             ( fun c -> _1 c :: _2 c )
# 4084 "text/parser.ml"
               : 'elem_expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_list) in
    Obj.repr(
# 804 "text/parser.mly"
    ( let f = function {at; _} as x -> [ref_func x @@ at] @@ at in
      fun c lookup -> List.map f (_1 c lookup) )
# 4092 "text/parser.ml"
               : 'elem_var_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'elem_kind) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'elem_var_list) in
    Obj.repr(
# 809 "text/parser.mly"
    ( (_1, fun c -> _2 c func) )
# 4100 "text/parser.ml"
               : 'elem_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'ref_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'elem_expr_list) in
    Obj.repr(
# 811 "text/parser.mly"
    ( (_1, fun c -> _2 c) )
# 4108 "text/parser.ml"
               : 'elem_list))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'bind_var_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'elem_list) in
    Obj.repr(
# 816 "text/parser.mly"
    ( let at = at () in
      fun c -> ignore (_3 c anon_elem bind_elem);
      fun () ->
      { etype = (fst _4); einit = (snd _4) c; emode = Passive @@ at } @@ at )
# 4119 "text/parser.ml"
               : 'elem))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'bind_var_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'table_use) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'offset) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'elem_list) in
    Obj.repr(
# 821 "text/parser.mly"
    ( let at = at () in
      fun c -> ignore (_3 c anon_elem bind_elem);
      fun () ->
      { etype = (fst _6); einit = (snd _6) c;
        emode = Active {index = _4 c table; offset = _5 c} @@ at } @@ at )
# 4133 "text/parser.ml"
               : 'elem))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'bind_var_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'elem_list) in
    Obj.repr(
# 827 "text/parser.mly"
    ( let at = at () in
      fun c -> ignore (_3 c anon_elem bind_elem);
      fun () ->
      { etype = (fst _5); einit = (snd _5) c; emode = Declarative @@ at } @@ at )
# 4144 "text/parser.ml"
               : 'elem))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'bind_var_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'offset) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'elem_list) in
    Obj.repr(
# 832 "text/parser.mly"
    ( let at = at () in
      fun c -> ignore (_3 c anon_elem bind_elem);
      fun () ->
      { etype = (fst _5); einit = (snd _5) c;
        emode = Active {index = 0l @@ at; offset = _4 c} @@ at } @@ at )
# 4157 "text/parser.ml"
               : 'elem))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'bind_var_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'offset) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'elem_var_list) in
    Obj.repr(
# 838 "text/parser.mly"
    ( let at = at () in
      fun c -> ignore (_3 c anon_elem bind_elem);
      fun () ->
      { etype = FuncRefType; einit = _5 c func;
        emode = Active {index = 0l @@ at; offset = _4 c} @@ at } @@ at )
# 4170 "text/parser.ml"
               : 'elem))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'bind_var_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'table_fields) in
    Obj.repr(
# 846 "text/parser.mly"
    ( let at = at () in
      fun c -> let x = _3 c anon_table bind_table @@ at in
      fun () -> _4 c x at )
# 4180 "text/parser.ml"
               : 'table))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'table_type) in
    Obj.repr(
# 852 "text/parser.mly"
    ( fun c x at -> [{ttype = _1} @@ at], [], [], [] )
# 4187 "text/parser.ml"
               : 'table_fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'inline_import) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'table_type) in
    Obj.repr(
# 854 "text/parser.mly"
    ( fun c x at ->
      [], [],
      [{ module_name = fst _1; item_name = snd _1;
        idesc = TableImport _2 @@ at } @@ at], [] )
# 4198 "text/parser.ml"
               : 'table_fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'inline_export) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'table_fields) in
    Obj.repr(
# 859 "text/parser.mly"
    ( fun c x at -> let tabs, elems, ims, exs = _2 c x at in
      tabs, elems, ims, _1 (TableExport x) c :: exs )
# 4207 "text/parser.ml"
               : 'table_fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'ref_type) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'elem_var_list) in
    Obj.repr(
# 862 "text/parser.mly"
    ( fun c x at ->
      let offset = [i32_const (0l @@ at) @@ at] @@ at in
      let einit = _4 c func in
      let size = Lib.List32.length einit in
      let emode = Active {index = x; offset} @@ at in
      [{ttype = TableType ({min = size; max = Some size}, _1)} @@ at],
      [{etype = FuncRefType; einit; emode} @@ at],
      [], [] )
# 4222 "text/parser.ml"
               : 'table_fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'ref_type) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'elem_expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'elem_expr_list) in
    Obj.repr(
# 871 "text/parser.mly"
    ( fun c x at ->
      let offset = [i32_const (0l @@ at) @@ at] @@ at in
      let einit = (fun c -> _4 c :: _5 c) c in
      let size = Lib.List32.length einit in
      let emode = Active {index = x; offset} @@ at in
      [{ttype = TableType ({min = size; max = Some size}, _1)} @@ at],
      [{etype = FuncRefType; einit; emode} @@ at],
      [], [] )
# 4238 "text/parser.ml"
               : 'table_fields))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'bind_var_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'string_list) in
    Obj.repr(
# 882 "text/parser.mly"
    ( let at = at () in
      fun c -> ignore (_3 c anon_data bind_data);
      fun () -> {dinit = _4; dmode = Passive @@ at} @@ at )
# 4248 "text/parser.ml"
               : 'data))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'bind_var_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'memory_use) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'offset) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'string_list) in
    Obj.repr(
# 886 "text/parser.mly"
    ( let at = at () in
      fun c -> ignore (_3 c anon_data bind_data);
      fun () ->
      {dinit = _6; dmode = Active {index = _4 c memory; offset = _5 c} @@ at} @@ at )
# 4261 "text/parser.ml"
               : 'data))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'bind_var_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'offset) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'string_list) in
    Obj.repr(
# 891 "text/parser.mly"
    ( let at = at () in
      fun c -> ignore (_3 c anon_data bind_data);
      fun () ->
      {dinit = _5; dmode = Active {index = 0l @@ at; offset = _4 c} @@ at} @@ at )
# 4273 "text/parser.ml"
               : 'data))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'bind_var_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'memory_fields) in
    Obj.repr(
# 898 "text/parser.mly"
    ( let at = at () in
      fun c -> let x = _3 c anon_memory bind_memory @@ at in
      fun () -> _4 c x at )
# 4283 "text/parser.ml"
               : 'memory))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'memory_type) in
    Obj.repr(
# 904 "text/parser.mly"
    ( fun c x at -> [{mtype = _1} @@ at], [], [], [] )
# 4290 "text/parser.ml"
               : 'memory_fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'inline_import) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'memory_type) in
    Obj.repr(
# 906 "text/parser.mly"
    ( fun c x at ->
      [], [],
      [{ module_name = fst _1; item_name = snd _1;
         idesc = MemoryImport _2 @@ at } @@ at], [] )
# 4301 "text/parser.ml"
               : 'memory_fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'inline_export) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'memory_fields) in
    Obj.repr(
# 911 "text/parser.mly"
    ( fun c x at -> let mems, data, ims, exs = _2 c x at in
      mems, data, ims, _1 (MemoryExport x) c :: exs )
# 4310 "text/parser.ml"
               : 'memory_fields))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'string_list) in
    Obj.repr(
# 914 "text/parser.mly"
    ( fun c x at ->
      let offset = [i32_const (0l @@ at) @@ at] @@ at in
      let size = Int32.(div (add (of_int (String.length _3)) 65535l) 65536l) in
      [{mtype = MemoryType {min = size; max = Some size}} @@ at],
      [{dinit = _3; dmode = Active {index = x; offset} @@ at} @@ at],
      [], [] )
# 4322 "text/parser.ml"
               : 'memory_fields))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'bind_var_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'global_fields) in
    Obj.repr(
# 923 "text/parser.mly"
    ( let at = at () in
      fun c -> let x = _3 c anon_global bind_global @@ at in
      fun () -> _4 c x at )
# 4332 "text/parser.ml"
               : 'global))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'global_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'const_expr) in
    Obj.repr(
# 929 "text/parser.mly"
    ( fun c x at -> [{gtype = _1; ginit = _2 c} @@ at], [], [] )
# 4340 "text/parser.ml"
               : 'global_fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'inline_import) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'global_type) in
    Obj.repr(
# 931 "text/parser.mly"
    ( fun c x at ->
      [],
      [{ module_name = fst _1; item_name = snd _1;
         idesc = GlobalImport _2 @@ at } @@ at], [] )
# 4351 "text/parser.ml"
               : 'global_fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'inline_export) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'global_fields) in
    Obj.repr(
# 936 "text/parser.mly"
    ( fun c x at -> let globs, ims, exs = _2 c x at in
      globs, ims, _1 (GlobalExport x) c :: exs )
# 4360 "text/parser.ml"
               : 'global_fields))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'bind_var_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'type_use) in
    Obj.repr(
# 944 "text/parser.mly"
    ( fun c -> ignore (_3 c anon_func bind_func);
      fun () -> FuncImport (_4 c type_) )
# 4369 "text/parser.ml"
               : 'import_desc))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'bind_var_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'func_type) in
    Obj.repr(
# 947 "text/parser.mly"
    ( let at4 = ati 4 in
      fun c -> ignore (_3 c anon_func bind_func);
      fun () -> FuncImport (inline_type c _4 at4) )
# 4379 "text/parser.ml"
               : 'import_desc))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'bind_var_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'table_type) in
    Obj.repr(
# 951 "text/parser.mly"
    ( fun c -> ignore (_3 c anon_table bind_table);
      fun () -> TableImport _4 )
# 4388 "text/parser.ml"
               : 'import_desc))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'bind_var_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'memory_type) in
    Obj.repr(
# 954 "text/parser.mly"
    ( fun c -> ignore (_3 c anon_memory bind_memory);
      fun () -> MemoryImport _4 )
# 4397 "text/parser.ml"
               : 'import_desc))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'bind_var_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'global_type) in
    Obj.repr(
# 957 "text/parser.mly"
    ( fun c -> ignore (_3 c anon_global bind_global);
      fun () -> GlobalImport _4 )
# 4406 "text/parser.ml"
               : 'import_desc))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'name) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'name) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'import_desc) in
    Obj.repr(
# 962 "text/parser.mly"
    ( let at = at () and at5 = ati 5 in
      fun c -> let df = _5 c in
      fun () -> {module_name = _3; item_name = _4; idesc = df () @@ at5} @@ at )
# 4417 "text/parser.ml"
               : 'import))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'name) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'name) in
    Obj.repr(
# 967 "text/parser.mly"
                               ( _3, _4 )
# 4425 "text/parser.ml"
               : 'inline_import))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'var) in
    Obj.repr(
# 970 "text/parser.mly"
                       ( fun c -> FuncExport (_3 c func) )
# 4432 "text/parser.ml"
               : 'export_desc))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'var) in
    Obj.repr(
# 971 "text/parser.mly"
                        ( fun c -> TableExport (_3 c table) )
# 4439 "text/parser.ml"
               : 'export_desc))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'var) in
    Obj.repr(
# 972 "text/parser.mly"
                         ( fun c -> MemoryExport (_3 c memory) )
# 4446 "text/parser.ml"
               : 'export_desc))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'var) in
    Obj.repr(
# 973 "text/parser.mly"
                         ( fun c -> GlobalExport (_3 c global) )
# 4453 "text/parser.ml"
               : 'export_desc))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'name) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'export_desc) in
    Obj.repr(
# 977 "text/parser.mly"
    ( let at = at () and at4 = ati 4 in
      fun c -> {name = _3; edesc = _4 c @@ at4} @@ at )
# 4462 "text/parser.ml"
               : 'export))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'name) in
    Obj.repr(
# 982 "text/parser.mly"
    ( let at = at () in fun d c -> {name = _3; edesc = d @@ at} @@ at )
# 4469 "text/parser.ml"
               : 'inline_export))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'def_type) in
    Obj.repr(
# 988 "text/parser.mly"
             ( _1 @@ at () )
# 4476 "text/parser.ml"
               : 'type_))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'type_) in
    Obj.repr(
# 992 "text/parser.mly"
    ( fun c -> anon_type c _3 )
# 4483 "text/parser.ml"
               : 'type_def))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'bind_var) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'type_) in
    Obj.repr(
# 994 "text/parser.mly"
    ( fun c -> bind_type c _3 _4 )
# 4491 "text/parser.ml"
               : 'type_def))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'var) in
    Obj.repr(
# 998 "text/parser.mly"
    ( let at = at () in fun c -> {sfunc = _3 c func} @@ at )
# 4498 "text/parser.ml"
               : 'start))
; (fun __caml_parser_env ->
    Obj.repr(
# 1002 "text/parser.mly"
    ( fun (c : context) () -> {empty_module with types = c.types.list} )
# 4504 "text/parser.ml"
               : 'module_fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'module_fields1) in
    Obj.repr(
# 1003 "text/parser.mly"
                   ( _1 )
# 4511 "text/parser.ml"
               : 'module_fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'type_def) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'module_fields) in
    Obj.repr(
# 1007 "text/parser.mly"
    ( fun c -> ignore (_1 c); _2 c )
# 4519 "text/parser.ml"
               : 'module_fields1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'global) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'module_fields) in
    Obj.repr(
# 1009 "text/parser.mly"
    ( fun c -> let gf = _1 c in let mf = _2 c in
      fun () -> let globs, ims, exs = gf () in let m = mf () in
      if globs <> [] && m.imports <> [] then
        error (List.hd m.imports).at "import after global definition";
      { m with globals = globs @ m.globals;
        imports = ims @ m.imports; exports = exs @ m.exports } )
# 4532 "text/parser.ml"
               : 'module_fields1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'table) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'module_fields) in
    Obj.repr(
# 1016 "text/parser.mly"
    ( fun c -> let tf = _1 c in let mf = _2 c in
      fun () -> let tabs, elems, ims, exs = tf () in let m = mf () in
      if tabs <> [] && m.imports <> [] then
        error (List.hd m.imports).at "import after table definition";
      { m with tables = tabs @ m.tables; elems = elems @ m.elems;
        imports = ims @ m.imports; exports = exs @ m.exports } )
# 4545 "text/parser.ml"
               : 'module_fields1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'memory) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'module_fields) in
    Obj.repr(
# 1023 "text/parser.mly"
    ( fun c -> let mmf = _1 c in let mf = _2 c in
      fun () -> let mems, data, ims, exs = mmf () in let m = mf () in
      if mems <> [] && m.imports <> [] then
        error (List.hd m.imports).at "import after memory definition";
      { m with memories = mems @ m.memories; datas = data @ m.datas;
        imports = ims @ m.imports; exports = exs @ m.exports } )
# 4558 "text/parser.ml"
               : 'module_fields1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'func) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'module_fields) in
    Obj.repr(
# 1030 "text/parser.mly"
    ( fun c -> let ff = _1 c in let mf = _2 c in
      fun () -> let funcs, ims, exs = ff () in let m = mf () in
      if funcs <> [] && m.imports <> [] then
        error (List.hd m.imports).at "import after function definition";
      { m with funcs = funcs @ m.funcs;
        imports = ims @ m.imports; exports = exs @ m.exports } )
# 4571 "text/parser.ml"
               : 'module_fields1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'elem) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'module_fields) in
    Obj.repr(
# 1037 "text/parser.mly"
    ( fun c -> let ef = _1 c in let mf = _2 c in
      fun () -> let elems = ef () in let m = mf () in
      {m with elems = elems :: m.elems} )
# 4581 "text/parser.ml"
               : 'module_fields1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'data) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'module_fields) in
    Obj.repr(
# 1041 "text/parser.mly"
    ( fun c -> let df = _1 c in let mf = _2 c in
      fun () -> let data = df () in let m = mf () in
      {m with datas = data :: m.datas} )
# 4591 "text/parser.ml"
               : 'module_fields1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'start) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'module_fields) in
    Obj.repr(
# 1045 "text/parser.mly"
    ( fun c -> let mf = _2 c in
      fun () -> let m = mf () in let x = _1 c in
      match m.start with
      | Some _ -> error x.at "multiple start sections"
      | None -> {m with start = Some x} )
# 4603 "text/parser.ml"
               : 'module_fields1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'import) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'module_fields) in
    Obj.repr(
# 1051 "text/parser.mly"
    ( fun c -> let imf = _1 c in let mf = _2 c in
      fun () -> let im = imf () in let m = mf () in
      {m with imports = im :: m.imports} )
# 4613 "text/parser.ml"
               : 'module_fields1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'export) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'module_fields) in
    Obj.repr(
# 1055 "text/parser.mly"
    ( fun c -> let mf = _2 c in
      fun () -> let m = mf () in
      {m with exports = _1 c :: m.exports} )
# 4623 "text/parser.ml"
               : 'module_fields1))
; (fun __caml_parser_env ->
    Obj.repr(
# 1060 "text/parser.mly"
                ( None )
# 4629 "text/parser.ml"
               : 'module_var_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1061 "text/parser.mly"
        ( Some (_1 @@ at ()) )
# 4636 "text/parser.ml"
               : 'module_var_opt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'module_var_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'module_fields) in
    Obj.repr(
# 1065 "text/parser.mly"
    ( _3, Textual (_4 (empty_context ()) () @@ at ()) @@ at () )
# 4644 "text/parser.ml"
               : 'module_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'module_fields) in
    Obj.repr(
# 1068 "text/parser.mly"
                  ( Textual (_1 (empty_context ()) () @@ at ()) @@ at () )
# 4651 "text/parser.ml"
               : 'inline_module))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'module_fields1) in
    Obj.repr(
# 1071 "text/parser.mly"
                   ( Textual (_1 (empty_context ()) () @@ at ()) @@ at () )
# 4658 "text/parser.ml"
               : 'inline_module1))
; (fun __caml_parser_env ->
    Obj.repr(
# 1077 "text/parser.mly"
                ( None )
# 4664 "text/parser.ml"
               : 'script_var_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1078 "text/parser.mly"
        ( Some (_1 @@ at ()) )
# 4671 "text/parser.ml"
               : 'script_var_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'module_) in
    Obj.repr(
# 1081 "text/parser.mly"
            ( _1 )
# 4678 "text/parser.ml"
               : 'script_module))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'module_var_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'string_list) in
    Obj.repr(
# 1083 "text/parser.mly"
    ( _3, Encoded ("binary:" ^ string_of_pos (at()).left, _5) @@ at() )
# 4686 "text/parser.ml"
               : 'script_module))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'module_var_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'string_list) in
    Obj.repr(
# 1085 "text/parser.mly"
    ( _3, Quoted ("quote:" ^ string_of_pos (at()).left, _5) @@ at() )
# 4694 "text/parser.ml"
               : 'script_module))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'module_var_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'name) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'literal_list) in
    Obj.repr(
# 1089 "text/parser.mly"
    ( Invoke (_3, _4, _5) @@ at () )
# 4703 "text/parser.ml"
               : 'action))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'module_var_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'name) in
    Obj.repr(
# 1091 "text/parser.mly"
    ( Get (_3, _4) @@ at() )
# 4711 "text/parser.ml"
               : 'action))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'script_module) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 1095 "text/parser.mly"
    ( AssertMalformed (snd _3, _4) @@ at () )
# 4719 "text/parser.ml"
               : 'assertion))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'script_module) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 1097 "text/parser.mly"
    ( AssertInvalid (snd _3, _4) @@ at () )
# 4727 "text/parser.ml"
               : 'assertion))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'script_module) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 1099 "text/parser.mly"
    ( AssertUnlinkable (snd _3, _4) @@ at () )
# 4735 "text/parser.ml"
               : 'assertion))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'script_module) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 1101 "text/parser.mly"
    ( AssertUninstantiable (snd _3, _4) @@ at () )
# 4743 "text/parser.ml"
               : 'assertion))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'action) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'result_list) in
    Obj.repr(
# 1102 "text/parser.mly"
                                               ( AssertReturn (_3, _4) @@ at () )
# 4751 "text/parser.ml"
               : 'assertion))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'action) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 1103 "text/parser.mly"
                                        ( AssertTrap (_3, _4) @@ at () )
# 4759 "text/parser.ml"
               : 'assertion))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'action) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 1104 "text/parser.mly"
                                              ( AssertExhaustion (_3, _4) @@ at () )
# 4767 "text/parser.ml"
               : 'assertion))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'action) in
    Obj.repr(
# 1107 "text/parser.mly"
           ( Action _1 @@ at () )
# 4774 "text/parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assertion) in
    Obj.repr(
# 1108 "text/parser.mly"
              ( Assertion _1 @@ at () )
# 4781 "text/parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'script_module) in
    Obj.repr(
# 1109 "text/parser.mly"
                  ( Module (fst _1, snd _1) @@ at () )
# 4788 "text/parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'name) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'module_var_opt) in
    Obj.repr(
# 1110 "text/parser.mly"
                                           ( Register (_3, _4) @@ at () )
# 4796 "text/parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'meta) in
    Obj.repr(
# 1111 "text/parser.mly"
         ( Meta _1 @@ at () )
# 4803 "text/parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    Obj.repr(
# 1114 "text/parser.mly"
                ( [] )
# 4809 "text/parser.ml"
               : 'cmd_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'cmd) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cmd_list) in
    Obj.repr(
# 1115 "text/parser.mly"
                 ( _1 :: _2 )
# 4817 "text/parser.ml"
               : 'cmd_list))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'script_var_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'cmd_list) in
    Obj.repr(
# 1118 "text/parser.mly"
                                             ( Script (_3, _4) @@ at () )
# 4825 "text/parser.ml"
               : 'meta))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'script_var_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 1119 "text/parser.mly"
                                          ( Input (_3, _4) @@ at () )
# 4833 "text/parser.ml"
               : 'meta))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'script_var_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 1120 "text/parser.mly"
                                           ( Output (_3, Some _4) @@ at () )
# 4841 "text/parser.ml"
               : 'meta))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'script_var_opt) in
    Obj.repr(
# 1121 "text/parser.mly"
                                    ( Output (_3, None) @@ at () )
# 4848 "text/parser.ml"
               : 'meta))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string Source.phrase -> Ast.instr' * Values.num) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'num) in
    Obj.repr(
# 1124 "text/parser.mly"
                        ( snd (num _2 _3) )
# 4856 "text/parser.ml"
               : 'literal_num))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : V128.shape -> string Source.phrase list -> Source.region -> Ast.instr' * Values.vec) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : V128.shape) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'num_list) in
    Obj.repr(
# 1127 "text/parser.mly"
                                           ( snd (vec _2 _3 _4 (at ())) )
# 4865 "text/parser.ml"
               : 'literal_vec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ref_kind) in
    Obj.repr(
# 1130 "text/parser.mly"
                                ( Values.NullRef _3 )
# 4872 "text/parser.ml"
               : 'literal_ref))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 1131 "text/parser.mly"
                             ( ExternRef (nat32 _3 (ati 3)) )
# 4879 "text/parser.ml"
               : 'literal_ref))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literal_num) in
    Obj.repr(
# 1134 "text/parser.mly"
                ( Values.Num _1 @@ at () )
# 4886 "text/parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literal_vec) in
    Obj.repr(
# 1135 "text/parser.mly"
                ( Values.Vec _1 @@ at () )
# 4893 "text/parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literal_ref) in
    Obj.repr(
# 1136 "text/parser.mly"
                ( Values.Ref _1 @@ at () )
# 4900 "text/parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    Obj.repr(
# 1139 "text/parser.mly"
                ( [] )
# 4906 "text/parser.ml"
               : 'literal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'literal) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'literal_list) in
    Obj.repr(
# 1140 "text/parser.mly"
                         ( _1 :: _2 )
# 4914 "text/parser.ml"
               : 'literal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'num) in
    Obj.repr(
# 1143 "text/parser.mly"
        ( fun sh -> vec_lane_lit sh _1.it _1.at )
# 4921 "text/parser.ml"
               : 'numpat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Script.nan) in
    Obj.repr(
# 1144 "text/parser.mly"
        ( fun sh -> vec_lane_nan sh _1 (ati 3) )
# 4928 "text/parser.ml"
               : 'numpat))
; (fun __caml_parser_env ->
    Obj.repr(
# 1147 "text/parser.mly"
                ( [] )
# 4934 "text/parser.ml"
               : 'numpat_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'numpat) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'numpat_list) in
    Obj.repr(
# 1148 "text/parser.mly"
                       ( _1 :: _2 )
# 4942 "text/parser.ml"
               : 'numpat_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literal_num) in
    Obj.repr(
# 1151 "text/parser.mly"
                ( NumResult (NumPat (_1 @@ at())) @@ at () )
# 4949 "text/parser.ml"
               : 'result))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string Source.phrase -> Ast.instr' * Values.num) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Script.nan) in
    Obj.repr(
# 1152 "text/parser.mly"
                        ( NumResult (NanPat (nanop _2 (_3 @@ ati 3))) @@ at () )
# 4957 "text/parser.ml"
               : 'result))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literal_ref) in
    Obj.repr(
# 1153 "text/parser.mly"
                ( RefResult (RefPat (_1 @@ at ())) @@ at () )
# 4964 "text/parser.ml"
               : 'result))
; (fun __caml_parser_env ->
    Obj.repr(
# 1154 "text/parser.mly"
                       ( RefResult (RefTypePat FuncRefType) @@ at () )
# 4970 "text/parser.ml"
               : 'result))
; (fun __caml_parser_env ->
    Obj.repr(
# 1155 "text/parser.mly"
                         ( RefResult (RefTypePat ExternRefType) @@ at () )
# 4976 "text/parser.ml"
               : 'result))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : V128.shape -> string Source.phrase list -> Source.region -> Ast.instr' * Values.vec) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : V128.shape) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'numpat_list) in
    Obj.repr(
# 1156 "text/parser.mly"
                                              (
    if V128.num_lanes _3 <> List.length _4 then
      error (at ()) "wrong number of lane literals";
    VecResult (VecPat (Values.V128 (_3, List.map (fun lit -> lit _3) _4))) @@ at ()
  )
# 4989 "text/parser.ml"
               : 'result))
; (fun __caml_parser_env ->
    Obj.repr(
# 1163 "text/parser.mly"
                ( [] )
# 4995 "text/parser.ml"
               : 'result_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'result) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'result_list) in
    Obj.repr(
# 1164 "text/parser.mly"
                       ( _1 :: _2 )
# 5003 "text/parser.ml"
               : 'result_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'cmd_list) in
    Obj.repr(
# 1167 "text/parser.mly"
                 ( _1 )
# 5010 "text/parser.ml"
               : Script.script))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'inline_module1) in
    Obj.repr(
# 1168 "text/parser.mly"
                       ( [Module (None, _1) @@ at ()] )
# 5017 "text/parser.ml"
               : Script.script))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 1171 "text/parser.mly"
        ( [_1] )
# 5024 "text/parser.ml"
               : Script.script))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'module_) in
    Obj.repr(
# 1174 "text/parser.mly"
                ( _1 )
# 5031 "text/parser.ml"
               : Script.var option * Script.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'inline_module) in
    Obj.repr(
# 1175 "text/parser.mly"
                      ( None, _1 )
# 5038 "text/parser.ml"
               : Script.var option * Script.definition))
(* Entry script *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry script1 *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry module1 *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let script (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Script.script)
let script1 (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Script.script)
let module1 (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 3 lexfun lexbuf : Script.var option * Script.definition)
;;
