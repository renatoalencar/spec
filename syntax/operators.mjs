// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Source from "../util/source.mjs";

function i32_const(n) {
  return {
          TAG: /* Const */32,
          _0: Source.$at$at({
                TAG: /* I32 */0,
                _0: n.it
              }, n.at)
        };
}

function i64_const(n) {
  return {
          TAG: /* Const */32,
          _0: Source.$at$at({
                TAG: /* I64 */1,
                _0: n.it
              }, n.at)
        };
}

function f32_const(n) {
  return {
          TAG: /* Const */32,
          _0: Source.$at$at({
                TAG: /* F32 */2,
                _0: n.it
              }, n.at)
        };
}

function f64_const(n) {
  return {
          TAG: /* Const */32,
          _0: Source.$at$at({
                TAG: /* F64 */3,
                _0: n.it
              }, n.at)
        };
}

function v128_const(n) {
  return {
          TAG: /* VecConst */38,
          _0: Source.$at$at(/* V128 */{
                _0: n.it
              }, n.at)
        };
}

function ref_null(t) {
  return {
          TAG: /* RefNull */30,
          _0: t
        };
}

function ref_func(x) {
  return {
          TAG: /* RefFunc */31,
          _0: x
        };
}

function select(t) {
  return {
          TAG: /* Select */0,
          _0: t
        };
}

function block(bt, es) {
  return {
          TAG: /* Block */1,
          _0: bt,
          _1: es
        };
}

function loop(bt, es) {
  return {
          TAG: /* Loop */2,
          _0: bt,
          _1: es
        };
}

function if_(bt, es1, es2) {
  return {
          TAG: /* If */3,
          _0: bt,
          _1: es1,
          _2: es2
        };
}

function br(x) {
  return {
          TAG: /* Br */4,
          _0: x
        };
}

function br_if(x) {
  return {
          TAG: /* BrIf */5,
          _0: x
        };
}

function br_table(xs, x) {
  return {
          TAG: /* BrTable */6,
          _0: xs,
          _1: x
        };
}

function call(x) {
  return {
          TAG: /* Call */7,
          _0: x
        };
}

function call_indirect(x, y) {
  return {
          TAG: /* CallIndirect */8,
          _0: x,
          _1: y
        };
}

function local_get(x) {
  return {
          TAG: /* LocalGet */9,
          _0: x
        };
}

function local_set(x) {
  return {
          TAG: /* LocalSet */10,
          _0: x
        };
}

function local_tee(x) {
  return {
          TAG: /* LocalTee */11,
          _0: x
        };
}

function global_get(x) {
  return {
          TAG: /* GlobalGet */12,
          _0: x
        };
}

function global_set(x) {
  return {
          TAG: /* GlobalSet */13,
          _0: x
        };
}

function table_get(x) {
  return {
          TAG: /* TableGet */14,
          _0: x
        };
}

function table_set(x) {
  return {
          TAG: /* TableSet */15,
          _0: x
        };
}

function table_size(x) {
  return {
          TAG: /* TableSize */16,
          _0: x
        };
}

function table_grow(x) {
  return {
          TAG: /* TableGrow */17,
          _0: x
        };
}

function table_fill(x) {
  return {
          TAG: /* TableFill */18,
          _0: x
        };
}

function table_copy(x, y) {
  return {
          TAG: /* TableCopy */19,
          _0: x,
          _1: y
        };
}

function table_init(x, y) {
  return {
          TAG: /* TableInit */20,
          _0: x,
          _1: y
        };
}

function elem_drop(x) {
  return {
          TAG: /* ElemDrop */21,
          _0: x
        };
}

function i32_load(align, offset) {
  return {
          TAG: /* Load */22,
          _0: {
            ty: /* I32Type */0,
            align: align,
            offset: offset,
            pack: undefined
          }
        };
}

function i64_load(align, offset) {
  return {
          TAG: /* Load */22,
          _0: {
            ty: /* I64Type */1,
            align: align,
            offset: offset,
            pack: undefined
          }
        };
}

function f32_load(align, offset) {
  return {
          TAG: /* Load */22,
          _0: {
            ty: /* F32Type */2,
            align: align,
            offset: offset,
            pack: undefined
          }
        };
}

function f64_load(align, offset) {
  return {
          TAG: /* Load */22,
          _0: {
            ty: /* F64Type */3,
            align: align,
            offset: offset,
            pack: undefined
          }
        };
}

function i32_load8_s(align, offset) {
  return {
          TAG: /* Load */22,
          _0: {
            ty: /* I32Type */0,
            align: align,
            offset: offset,
            pack: [
              /* Pack8 */0,
              /* SX */0
            ]
          }
        };
}

function i32_load8_u(align, offset) {
  return {
          TAG: /* Load */22,
          _0: {
            ty: /* I32Type */0,
            align: align,
            offset: offset,
            pack: [
              /* Pack8 */0,
              /* ZX */1
            ]
          }
        };
}

function i32_load16_s(align, offset) {
  return {
          TAG: /* Load */22,
          _0: {
            ty: /* I32Type */0,
            align: align,
            offset: offset,
            pack: [
              /* Pack16 */1,
              /* SX */0
            ]
          }
        };
}

function i32_load16_u(align, offset) {
  return {
          TAG: /* Load */22,
          _0: {
            ty: /* I32Type */0,
            align: align,
            offset: offset,
            pack: [
              /* Pack16 */1,
              /* ZX */1
            ]
          }
        };
}

function i64_load8_s(align, offset) {
  return {
          TAG: /* Load */22,
          _0: {
            ty: /* I64Type */1,
            align: align,
            offset: offset,
            pack: [
              /* Pack8 */0,
              /* SX */0
            ]
          }
        };
}

function i64_load8_u(align, offset) {
  return {
          TAG: /* Load */22,
          _0: {
            ty: /* I64Type */1,
            align: align,
            offset: offset,
            pack: [
              /* Pack8 */0,
              /* ZX */1
            ]
          }
        };
}

function i64_load16_s(align, offset) {
  return {
          TAG: /* Load */22,
          _0: {
            ty: /* I64Type */1,
            align: align,
            offset: offset,
            pack: [
              /* Pack16 */1,
              /* SX */0
            ]
          }
        };
}

function i64_load16_u(align, offset) {
  return {
          TAG: /* Load */22,
          _0: {
            ty: /* I64Type */1,
            align: align,
            offset: offset,
            pack: [
              /* Pack16 */1,
              /* ZX */1
            ]
          }
        };
}

function i64_load32_s(align, offset) {
  return {
          TAG: /* Load */22,
          _0: {
            ty: /* I64Type */1,
            align: align,
            offset: offset,
            pack: [
              /* Pack32 */2,
              /* SX */0
            ]
          }
        };
}

function i64_load32_u(align, offset) {
  return {
          TAG: /* Load */22,
          _0: {
            ty: /* I64Type */1,
            align: align,
            offset: offset,
            pack: [
              /* Pack32 */2,
              /* ZX */1
            ]
          }
        };
}

function i32_store(align, offset) {
  return {
          TAG: /* Store */23,
          _0: {
            ty: /* I32Type */0,
            align: align,
            offset: offset,
            pack: undefined
          }
        };
}

function i64_store(align, offset) {
  return {
          TAG: /* Store */23,
          _0: {
            ty: /* I64Type */1,
            align: align,
            offset: offset,
            pack: undefined
          }
        };
}

function f32_store(align, offset) {
  return {
          TAG: /* Store */23,
          _0: {
            ty: /* F32Type */2,
            align: align,
            offset: offset,
            pack: undefined
          }
        };
}

function f64_store(align, offset) {
  return {
          TAG: /* Store */23,
          _0: {
            ty: /* F64Type */3,
            align: align,
            offset: offset,
            pack: undefined
          }
        };
}

function i32_store8(align, offset) {
  return {
          TAG: /* Store */23,
          _0: {
            ty: /* I32Type */0,
            align: align,
            offset: offset,
            pack: /* Pack8 */0
          }
        };
}

function i32_store16(align, offset) {
  return {
          TAG: /* Store */23,
          _0: {
            ty: /* I32Type */0,
            align: align,
            offset: offset,
            pack: /* Pack16 */1
          }
        };
}

function i64_store8(align, offset) {
  return {
          TAG: /* Store */23,
          _0: {
            ty: /* I64Type */1,
            align: align,
            offset: offset,
            pack: /* Pack8 */0
          }
        };
}

function i64_store16(align, offset) {
  return {
          TAG: /* Store */23,
          _0: {
            ty: /* I64Type */1,
            align: align,
            offset: offset,
            pack: /* Pack16 */1
          }
        };
}

function i64_store32(align, offset) {
  return {
          TAG: /* Store */23,
          _0: {
            ty: /* I64Type */1,
            align: align,
            offset: offset,
            pack: /* Pack32 */2
          }
        };
}

function memory_init(x) {
  return {
          TAG: /* MemoryInit */28,
          _0: x
        };
}

function data_drop(x) {
  return {
          TAG: /* DataDrop */29,
          _0: x
        };
}

function v128_load(align, offset) {
  return {
          TAG: /* VecLoad */24,
          _0: {
            ty: /* V128Type */0,
            align: align,
            offset: offset,
            pack: undefined
          }
        };
}

function v128_load8x8_s(align, offset) {
  return {
          TAG: /* VecLoad */24,
          _0: {
            ty: /* V128Type */0,
            align: align,
            offset: offset,
            pack: [
              /* Pack64 */3,
              /* ExtLane */{
                _0: /* Pack8x8 */0,
                _1: /* SX */0
              }
            ]
          }
        };
}

function v128_load8x8_u(align, offset) {
  return {
          TAG: /* VecLoad */24,
          _0: {
            ty: /* V128Type */0,
            align: align,
            offset: offset,
            pack: [
              /* Pack64 */3,
              /* ExtLane */{
                _0: /* Pack8x8 */0,
                _1: /* ZX */1
              }
            ]
          }
        };
}

function v128_load16x4_s(align, offset) {
  return {
          TAG: /* VecLoad */24,
          _0: {
            ty: /* V128Type */0,
            align: align,
            offset: offset,
            pack: [
              /* Pack64 */3,
              /* ExtLane */{
                _0: /* Pack16x4 */1,
                _1: /* SX */0
              }
            ]
          }
        };
}

function v128_load16x4_u(align, offset) {
  return {
          TAG: /* VecLoad */24,
          _0: {
            ty: /* V128Type */0,
            align: align,
            offset: offset,
            pack: [
              /* Pack64 */3,
              /* ExtLane */{
                _0: /* Pack16x4 */1,
                _1: /* ZX */1
              }
            ]
          }
        };
}

function v128_load32x2_s(align, offset) {
  return {
          TAG: /* VecLoad */24,
          _0: {
            ty: /* V128Type */0,
            align: align,
            offset: offset,
            pack: [
              /* Pack64 */3,
              /* ExtLane */{
                _0: /* Pack32x2 */2,
                _1: /* SX */0
              }
            ]
          }
        };
}

function v128_load32x2_u(align, offset) {
  return {
          TAG: /* VecLoad */24,
          _0: {
            ty: /* V128Type */0,
            align: align,
            offset: offset,
            pack: [
              /* Pack64 */3,
              /* ExtLane */{
                _0: /* Pack32x2 */2,
                _1: /* ZX */1
              }
            ]
          }
        };
}

function v128_load8_splat(align, offset) {
  return {
          TAG: /* VecLoad */24,
          _0: {
            ty: /* V128Type */0,
            align: align,
            offset: offset,
            pack: [
              /* Pack8 */0,
              /* ExtSplat */0
            ]
          }
        };
}

function v128_load16_splat(align, offset) {
  return {
          TAG: /* VecLoad */24,
          _0: {
            ty: /* V128Type */0,
            align: align,
            offset: offset,
            pack: [
              /* Pack16 */1,
              /* ExtSplat */0
            ]
          }
        };
}

function v128_load32_splat(align, offset) {
  return {
          TAG: /* VecLoad */24,
          _0: {
            ty: /* V128Type */0,
            align: align,
            offset: offset,
            pack: [
              /* Pack32 */2,
              /* ExtSplat */0
            ]
          }
        };
}

function v128_load64_splat(align, offset) {
  return {
          TAG: /* VecLoad */24,
          _0: {
            ty: /* V128Type */0,
            align: align,
            offset: offset,
            pack: [
              /* Pack64 */3,
              /* ExtSplat */0
            ]
          }
        };
}

function v128_load32_zero(align, offset) {
  return {
          TAG: /* VecLoad */24,
          _0: {
            ty: /* V128Type */0,
            align: align,
            offset: offset,
            pack: [
              /* Pack32 */2,
              /* ExtZero */1
            ]
          }
        };
}

function v128_load64_zero(align, offset) {
  return {
          TAG: /* VecLoad */24,
          _0: {
            ty: /* V128Type */0,
            align: align,
            offset: offset,
            pack: [
              /* Pack64 */3,
              /* ExtZero */1
            ]
          }
        };
}

function v128_store(align, offset) {
  return {
          TAG: /* VecStore */25,
          _0: {
            ty: /* V128Type */0,
            align: align,
            offset: offset,
            pack: undefined
          }
        };
}

function v128_load8_lane(align, offset, i) {
  return {
          TAG: /* VecLoadLane */26,
          _0: [
            {
              ty: /* V128Type */0,
              align: align,
              offset: offset,
              pack: /* Pack8 */0
            },
            i
          ]
        };
}

function v128_load16_lane(align, offset, i) {
  return {
          TAG: /* VecLoadLane */26,
          _0: [
            {
              ty: /* V128Type */0,
              align: align,
              offset: offset,
              pack: /* Pack16 */1
            },
            i
          ]
        };
}

function v128_load32_lane(align, offset, i) {
  return {
          TAG: /* VecLoadLane */26,
          _0: [
            {
              ty: /* V128Type */0,
              align: align,
              offset: offset,
              pack: /* Pack32 */2
            },
            i
          ]
        };
}

function v128_load64_lane(align, offset, i) {
  return {
          TAG: /* VecLoadLane */26,
          _0: [
            {
              ty: /* V128Type */0,
              align: align,
              offset: offset,
              pack: /* Pack64 */3
            },
            i
          ]
        };
}

function v128_store8_lane(align, offset, i) {
  return {
          TAG: /* VecStoreLane */27,
          _0: [
            {
              ty: /* V128Type */0,
              align: align,
              offset: offset,
              pack: /* Pack8 */0
            },
            i
          ]
        };
}

function v128_store16_lane(align, offset, i) {
  return {
          TAG: /* VecStoreLane */27,
          _0: [
            {
              ty: /* V128Type */0,
              align: align,
              offset: offset,
              pack: /* Pack16 */1
            },
            i
          ]
        };
}

function v128_store32_lane(align, offset, i) {
  return {
          TAG: /* VecStoreLane */27,
          _0: [
            {
              ty: /* V128Type */0,
              align: align,
              offset: offset,
              pack: /* Pack32 */2
            },
            i
          ]
        };
}

function v128_store64_lane(align, offset, i) {
  return {
          TAG: /* VecStoreLane */27,
          _0: [
            {
              ty: /* V128Type */0,
              align: align,
              offset: offset,
              pack: /* Pack64 */3
            },
            i
          ]
        };
}

function i8x16_shuffle(is) {
  return {
          TAG: /* VecBinary */42,
          _0: /* V128 */{
            _0: {
              TAG: /* I8x16 */0,
              _0: /* Shuffle */{
                _0: is
              }
            }
          }
        };
}

function i8x16_extract_lane_s(i) {
  return {
          TAG: /* VecExtract */51,
          _0: /* V128 */{
            _0: {
              TAG: /* I8x16 */0,
              _0: /* Extract */{
                _0: i,
                _1: /* SX */0
              }
            }
          }
        };
}

function i8x16_extract_lane_u(i) {
  return {
          TAG: /* VecExtract */51,
          _0: /* V128 */{
            _0: {
              TAG: /* I8x16 */0,
              _0: /* Extract */{
                _0: i,
                _1: /* ZX */1
              }
            }
          }
        };
}

function i8x16_replace_lane(i) {
  return {
          TAG: /* VecReplace */52,
          _0: /* V128 */{
            _0: {
              TAG: /* I8x16 */0,
              _0: /* Replace */{
                _0: i
              }
            }
          }
        };
}

function i16x8_extract_lane_s(i) {
  return {
          TAG: /* VecExtract */51,
          _0: /* V128 */{
            _0: {
              TAG: /* I16x8 */1,
              _0: /* Extract */{
                _0: i,
                _1: /* SX */0
              }
            }
          }
        };
}

function i16x8_extract_lane_u(i) {
  return {
          TAG: /* VecExtract */51,
          _0: /* V128 */{
            _0: {
              TAG: /* I16x8 */1,
              _0: /* Extract */{
                _0: i,
                _1: /* ZX */1
              }
            }
          }
        };
}

function i16x8_replace_lane(i) {
  return {
          TAG: /* VecReplace */52,
          _0: /* V128 */{
            _0: {
              TAG: /* I16x8 */1,
              _0: /* Replace */{
                _0: i
              }
            }
          }
        };
}

function i32x4_extract_lane(i) {
  return {
          TAG: /* VecExtract */51,
          _0: /* V128 */{
            _0: {
              TAG: /* I32x4 */2,
              _0: /* Extract */{
                _0: i,
                _1: undefined
              }
            }
          }
        };
}

function i32x4_replace_lane(i) {
  return {
          TAG: /* VecReplace */52,
          _0: /* V128 */{
            _0: {
              TAG: /* I32x4 */2,
              _0: /* Replace */{
                _0: i
              }
            }
          }
        };
}

function i64x2_extract_lane(i) {
  return {
          TAG: /* VecExtract */51,
          _0: /* V128 */{
            _0: {
              TAG: /* I64x2 */3,
              _0: /* Extract */{
                _0: i,
                _1: undefined
              }
            }
          }
        };
}

function i64x2_replace_lane(i) {
  return {
          TAG: /* VecReplace */52,
          _0: /* V128 */{
            _0: {
              TAG: /* I64x2 */3,
              _0: /* Replace */{
                _0: i
              }
            }
          }
        };
}

function f32x4_extract_lane(i) {
  return {
          TAG: /* VecExtract */51,
          _0: /* V128 */{
            _0: {
              TAG: /* F32x4 */4,
              _0: /* Extract */{
                _0: i,
                _1: undefined
              }
            }
          }
        };
}

function f32x4_replace_lane(i) {
  return {
          TAG: /* VecReplace */52,
          _0: /* V128 */{
            _0: {
              TAG: /* F32x4 */4,
              _0: /* Replace */{
                _0: i
              }
            }
          }
        };
}

function f64x2_extract_lane(i) {
  return {
          TAG: /* VecExtract */51,
          _0: /* V128 */{
            _0: {
              TAG: /* F64x2 */5,
              _0: /* Extract */{
                _0: i,
                _1: undefined
              }
            }
          }
        };
}

function f64x2_replace_lane(i) {
  return {
          TAG: /* VecReplace */52,
          _0: /* V128 */{
            _0: {
              TAG: /* F64x2 */5,
              _0: /* Replace */{
                _0: i
              }
            }
          }
        };
}

var unreachable = /* Unreachable */0;

var nop = /* Nop */1;

var drop = /* Drop */2;

var $$return = /* Return */3;

var memory_size = /* MemorySize */4;

var memory_grow = /* MemoryGrow */5;

var memory_fill = /* MemoryFill */6;

var memory_copy = /* MemoryCopy */7;

var ref_is_null = /* RefIsNull */8;

var i32_clz = {
  TAG: /* Unary */35,
  _0: {
    TAG: /* I32 */0,
    _0: /* Clz */0
  }
};

var i32_ctz = {
  TAG: /* Unary */35,
  _0: {
    TAG: /* I32 */0,
    _0: /* Ctz */1
  }
};

var i32_popcnt = {
  TAG: /* Unary */35,
  _0: {
    TAG: /* I32 */0,
    _0: /* Popcnt */2
  }
};

var i64_clz = {
  TAG: /* Unary */35,
  _0: {
    TAG: /* I64 */1,
    _0: /* Clz */0
  }
};

var i64_ctz = {
  TAG: /* Unary */35,
  _0: {
    TAG: /* I64 */1,
    _0: /* Ctz */1
  }
};

var i64_popcnt = {
  TAG: /* Unary */35,
  _0: {
    TAG: /* I64 */1,
    _0: /* Popcnt */2
  }
};

var f32_neg = {
  TAG: /* Unary */35,
  _0: {
    TAG: /* F32 */2,
    _0: /* Neg */0
  }
};

var f32_abs = {
  TAG: /* Unary */35,
  _0: {
    TAG: /* F32 */2,
    _0: /* Abs */1
  }
};

var f32_sqrt = {
  TAG: /* Unary */35,
  _0: {
    TAG: /* F32 */2,
    _0: /* Sqrt */6
  }
};

var f32_ceil = {
  TAG: /* Unary */35,
  _0: {
    TAG: /* F32 */2,
    _0: /* Ceil */2
  }
};

var f32_floor = {
  TAG: /* Unary */35,
  _0: {
    TAG: /* F32 */2,
    _0: /* Floor */3
  }
};

var f32_trunc = {
  TAG: /* Unary */35,
  _0: {
    TAG: /* F32 */2,
    _0: /* Trunc */4
  }
};

var f32_nearest = {
  TAG: /* Unary */35,
  _0: {
    TAG: /* F32 */2,
    _0: /* Nearest */5
  }
};

var f64_neg = {
  TAG: /* Unary */35,
  _0: {
    TAG: /* F64 */3,
    _0: /* Neg */0
  }
};

var f64_abs = {
  TAG: /* Unary */35,
  _0: {
    TAG: /* F64 */3,
    _0: /* Abs */1
  }
};

var f64_sqrt = {
  TAG: /* Unary */35,
  _0: {
    TAG: /* F64 */3,
    _0: /* Sqrt */6
  }
};

var f64_ceil = {
  TAG: /* Unary */35,
  _0: {
    TAG: /* F64 */3,
    _0: /* Ceil */2
  }
};

var f64_floor = {
  TAG: /* Unary */35,
  _0: {
    TAG: /* F64 */3,
    _0: /* Floor */3
  }
};

var f64_trunc = {
  TAG: /* Unary */35,
  _0: {
    TAG: /* F64 */3,
    _0: /* Trunc */4
  }
};

var f64_nearest = {
  TAG: /* Unary */35,
  _0: {
    TAG: /* F64 */3,
    _0: /* Nearest */5
  }
};

var i32_add = {
  TAG: /* Binary */36,
  _0: {
    TAG: /* I32 */0,
    _0: /* Add */0
  }
};

var i32_sub = {
  TAG: /* Binary */36,
  _0: {
    TAG: /* I32 */0,
    _0: /* Sub */1
  }
};

var i32_mul = {
  TAG: /* Binary */36,
  _0: {
    TAG: /* I32 */0,
    _0: /* Mul */2
  }
};

var i32_div_s = {
  TAG: /* Binary */36,
  _0: {
    TAG: /* I32 */0,
    _0: /* DivS */3
  }
};

var i32_div_u = {
  TAG: /* Binary */36,
  _0: {
    TAG: /* I32 */0,
    _0: /* DivU */4
  }
};

var i32_rem_s = {
  TAG: /* Binary */36,
  _0: {
    TAG: /* I32 */0,
    _0: /* RemS */5
  }
};

var i32_rem_u = {
  TAG: /* Binary */36,
  _0: {
    TAG: /* I32 */0,
    _0: /* RemU */6
  }
};

var i32_and = {
  TAG: /* Binary */36,
  _0: {
    TAG: /* I32 */0,
    _0: /* And */7
  }
};

var i32_or = {
  TAG: /* Binary */36,
  _0: {
    TAG: /* I32 */0,
    _0: /* Or */8
  }
};

var i32_xor = {
  TAG: /* Binary */36,
  _0: {
    TAG: /* I32 */0,
    _0: /* Xor */9
  }
};

var i32_shl = {
  TAG: /* Binary */36,
  _0: {
    TAG: /* I32 */0,
    _0: /* Shl */10
  }
};

var i32_shr_s = {
  TAG: /* Binary */36,
  _0: {
    TAG: /* I32 */0,
    _0: /* ShrS */11
  }
};

var i32_shr_u = {
  TAG: /* Binary */36,
  _0: {
    TAG: /* I32 */0,
    _0: /* ShrU */12
  }
};

var i32_rotl = {
  TAG: /* Binary */36,
  _0: {
    TAG: /* I32 */0,
    _0: /* Rotl */13
  }
};

var i32_rotr = {
  TAG: /* Binary */36,
  _0: {
    TAG: /* I32 */0,
    _0: /* Rotr */14
  }
};

var i64_add = {
  TAG: /* Binary */36,
  _0: {
    TAG: /* I64 */1,
    _0: /* Add */0
  }
};

var i64_sub = {
  TAG: /* Binary */36,
  _0: {
    TAG: /* I64 */1,
    _0: /* Sub */1
  }
};

var i64_mul = {
  TAG: /* Binary */36,
  _0: {
    TAG: /* I64 */1,
    _0: /* Mul */2
  }
};

var i64_div_s = {
  TAG: /* Binary */36,
  _0: {
    TAG: /* I64 */1,
    _0: /* DivS */3
  }
};

var i64_div_u = {
  TAG: /* Binary */36,
  _0: {
    TAG: /* I64 */1,
    _0: /* DivU */4
  }
};

var i64_rem_s = {
  TAG: /* Binary */36,
  _0: {
    TAG: /* I64 */1,
    _0: /* RemS */5
  }
};

var i64_rem_u = {
  TAG: /* Binary */36,
  _0: {
    TAG: /* I64 */1,
    _0: /* RemU */6
  }
};

var i64_and = {
  TAG: /* Binary */36,
  _0: {
    TAG: /* I64 */1,
    _0: /* And */7
  }
};

var i64_or = {
  TAG: /* Binary */36,
  _0: {
    TAG: /* I64 */1,
    _0: /* Or */8
  }
};

var i64_xor = {
  TAG: /* Binary */36,
  _0: {
    TAG: /* I64 */1,
    _0: /* Xor */9
  }
};

var i64_shl = {
  TAG: /* Binary */36,
  _0: {
    TAG: /* I64 */1,
    _0: /* Shl */10
  }
};

var i64_shr_s = {
  TAG: /* Binary */36,
  _0: {
    TAG: /* I64 */1,
    _0: /* ShrS */11
  }
};

var i64_shr_u = {
  TAG: /* Binary */36,
  _0: {
    TAG: /* I64 */1,
    _0: /* ShrU */12
  }
};

var i64_rotl = {
  TAG: /* Binary */36,
  _0: {
    TAG: /* I64 */1,
    _0: /* Rotl */13
  }
};

var i64_rotr = {
  TAG: /* Binary */36,
  _0: {
    TAG: /* I64 */1,
    _0: /* Rotr */14
  }
};

var f32_add = {
  TAG: /* Binary */36,
  _0: {
    TAG: /* F32 */2,
    _0: /* Add */0
  }
};

var f32_sub = {
  TAG: /* Binary */36,
  _0: {
    TAG: /* F32 */2,
    _0: /* Sub */1
  }
};

var f32_mul = {
  TAG: /* Binary */36,
  _0: {
    TAG: /* F32 */2,
    _0: /* Mul */2
  }
};

var f32_div = {
  TAG: /* Binary */36,
  _0: {
    TAG: /* F32 */2,
    _0: /* Div */3
  }
};

var f32_min = {
  TAG: /* Binary */36,
  _0: {
    TAG: /* F32 */2,
    _0: /* Min */4
  }
};

var f32_max = {
  TAG: /* Binary */36,
  _0: {
    TAG: /* F32 */2,
    _0: /* Max */5
  }
};

var f32_copysign = {
  TAG: /* Binary */36,
  _0: {
    TAG: /* F32 */2,
    _0: /* CopySign */6
  }
};

var f64_add = {
  TAG: /* Binary */36,
  _0: {
    TAG: /* F64 */3,
    _0: /* Add */0
  }
};

var f64_sub = {
  TAG: /* Binary */36,
  _0: {
    TAG: /* F64 */3,
    _0: /* Sub */1
  }
};

var f64_mul = {
  TAG: /* Binary */36,
  _0: {
    TAG: /* F64 */3,
    _0: /* Mul */2
  }
};

var f64_div = {
  TAG: /* Binary */36,
  _0: {
    TAG: /* F64 */3,
    _0: /* Div */3
  }
};

var f64_min = {
  TAG: /* Binary */36,
  _0: {
    TAG: /* F64 */3,
    _0: /* Min */4
  }
};

var f64_max = {
  TAG: /* Binary */36,
  _0: {
    TAG: /* F64 */3,
    _0: /* Max */5
  }
};

var f64_copysign = {
  TAG: /* Binary */36,
  _0: {
    TAG: /* F64 */3,
    _0: /* CopySign */6
  }
};

var i32_eqz = {
  TAG: /* Test */33,
  _0: {
    TAG: /* I32 */0,
    _0: /* Eqz */0
  }
};

var i64_eqz = {
  TAG: /* Test */33,
  _0: {
    TAG: /* I64 */1,
    _0: /* Eqz */0
  }
};

var i32_eq = {
  TAG: /* Compare */34,
  _0: {
    TAG: /* I32 */0,
    _0: /* Eq */0
  }
};

var i32_ne = {
  TAG: /* Compare */34,
  _0: {
    TAG: /* I32 */0,
    _0: /* Ne */1
  }
};

var i32_lt_s = {
  TAG: /* Compare */34,
  _0: {
    TAG: /* I32 */0,
    _0: /* LtS */2
  }
};

var i32_lt_u = {
  TAG: /* Compare */34,
  _0: {
    TAG: /* I32 */0,
    _0: /* LtU */3
  }
};

var i32_le_s = {
  TAG: /* Compare */34,
  _0: {
    TAG: /* I32 */0,
    _0: /* LeS */6
  }
};

var i32_le_u = {
  TAG: /* Compare */34,
  _0: {
    TAG: /* I32 */0,
    _0: /* LeU */7
  }
};

var i32_gt_s = {
  TAG: /* Compare */34,
  _0: {
    TAG: /* I32 */0,
    _0: /* GtS */4
  }
};

var i32_gt_u = {
  TAG: /* Compare */34,
  _0: {
    TAG: /* I32 */0,
    _0: /* GtU */5
  }
};

var i32_ge_s = {
  TAG: /* Compare */34,
  _0: {
    TAG: /* I32 */0,
    _0: /* GeS */8
  }
};

var i32_ge_u = {
  TAG: /* Compare */34,
  _0: {
    TAG: /* I32 */0,
    _0: /* GeU */9
  }
};

var i64_eq = {
  TAG: /* Compare */34,
  _0: {
    TAG: /* I64 */1,
    _0: /* Eq */0
  }
};

var i64_ne = {
  TAG: /* Compare */34,
  _0: {
    TAG: /* I64 */1,
    _0: /* Ne */1
  }
};

var i64_lt_s = {
  TAG: /* Compare */34,
  _0: {
    TAG: /* I64 */1,
    _0: /* LtS */2
  }
};

var i64_lt_u = {
  TAG: /* Compare */34,
  _0: {
    TAG: /* I64 */1,
    _0: /* LtU */3
  }
};

var i64_le_s = {
  TAG: /* Compare */34,
  _0: {
    TAG: /* I64 */1,
    _0: /* LeS */6
  }
};

var i64_le_u = {
  TAG: /* Compare */34,
  _0: {
    TAG: /* I64 */1,
    _0: /* LeU */7
  }
};

var i64_gt_s = {
  TAG: /* Compare */34,
  _0: {
    TAG: /* I64 */1,
    _0: /* GtS */4
  }
};

var i64_gt_u = {
  TAG: /* Compare */34,
  _0: {
    TAG: /* I64 */1,
    _0: /* GtU */5
  }
};

var i64_ge_s = {
  TAG: /* Compare */34,
  _0: {
    TAG: /* I64 */1,
    _0: /* GeS */8
  }
};

var i64_ge_u = {
  TAG: /* Compare */34,
  _0: {
    TAG: /* I64 */1,
    _0: /* GeU */9
  }
};

var f32_eq = {
  TAG: /* Compare */34,
  _0: {
    TAG: /* F32 */2,
    _0: /* Eq */0
  }
};

var f32_ne = {
  TAG: /* Compare */34,
  _0: {
    TAG: /* F32 */2,
    _0: /* Ne */1
  }
};

var f32_lt = {
  TAG: /* Compare */34,
  _0: {
    TAG: /* F32 */2,
    _0: /* Lt */2
  }
};

var f32_le = {
  TAG: /* Compare */34,
  _0: {
    TAG: /* F32 */2,
    _0: /* Le */4
  }
};

var f32_gt = {
  TAG: /* Compare */34,
  _0: {
    TAG: /* F32 */2,
    _0: /* Gt */3
  }
};

var f32_ge = {
  TAG: /* Compare */34,
  _0: {
    TAG: /* F32 */2,
    _0: /* Ge */5
  }
};

var f64_eq = {
  TAG: /* Compare */34,
  _0: {
    TAG: /* F64 */3,
    _0: /* Eq */0
  }
};

var f64_ne = {
  TAG: /* Compare */34,
  _0: {
    TAG: /* F64 */3,
    _0: /* Ne */1
  }
};

var f64_lt = {
  TAG: /* Compare */34,
  _0: {
    TAG: /* F64 */3,
    _0: /* Lt */2
  }
};

var f64_le = {
  TAG: /* Compare */34,
  _0: {
    TAG: /* F64 */3,
    _0: /* Le */4
  }
};

var f64_gt = {
  TAG: /* Compare */34,
  _0: {
    TAG: /* F64 */3,
    _0: /* Gt */3
  }
};

var f64_ge = {
  TAG: /* Compare */34,
  _0: {
    TAG: /* F64 */3,
    _0: /* Ge */5
  }
};

var i32_extend8_s = {
  TAG: /* Unary */35,
  _0: {
    TAG: /* I32 */0,
    _0: /* ExtendS */{
      _0: /* Pack8 */0
    }
  }
};

var i32_extend16_s = {
  TAG: /* Unary */35,
  _0: {
    TAG: /* I32 */0,
    _0: /* ExtendS */{
      _0: /* Pack16 */1
    }
  }
};

var i64_extend8_s = {
  TAG: /* Unary */35,
  _0: {
    TAG: /* I64 */1,
    _0: /* ExtendS */{
      _0: /* Pack8 */0
    }
  }
};

var i64_extend16_s = {
  TAG: /* Unary */35,
  _0: {
    TAG: /* I64 */1,
    _0: /* ExtendS */{
      _0: /* Pack16 */1
    }
  }
};

var i64_extend32_s = {
  TAG: /* Unary */35,
  _0: {
    TAG: /* I64 */1,
    _0: /* ExtendS */{
      _0: /* Pack32 */2
    }
  }
};

var i32_wrap_i64 = {
  TAG: /* Convert */37,
  _0: {
    TAG: /* I32 */0,
    _0: /* WrapI64 */2
  }
};

var i32_trunc_f32_s = {
  TAG: /* Convert */37,
  _0: {
    TAG: /* I32 */0,
    _0: /* TruncSF32 */3
  }
};

var i32_trunc_f32_u = {
  TAG: /* Convert */37,
  _0: {
    TAG: /* I32 */0,
    _0: /* TruncUF32 */4
  }
};

var i32_trunc_f64_s = {
  TAG: /* Convert */37,
  _0: {
    TAG: /* I32 */0,
    _0: /* TruncSF64 */5
  }
};

var i32_trunc_f64_u = {
  TAG: /* Convert */37,
  _0: {
    TAG: /* I32 */0,
    _0: /* TruncUF64 */6
  }
};

var i32_trunc_sat_f32_s = {
  TAG: /* Convert */37,
  _0: {
    TAG: /* I32 */0,
    _0: /* TruncSatSF32 */7
  }
};

var i32_trunc_sat_f32_u = {
  TAG: /* Convert */37,
  _0: {
    TAG: /* I32 */0,
    _0: /* TruncSatUF32 */8
  }
};

var i32_trunc_sat_f64_s = {
  TAG: /* Convert */37,
  _0: {
    TAG: /* I32 */0,
    _0: /* TruncSatSF64 */9
  }
};

var i32_trunc_sat_f64_u = {
  TAG: /* Convert */37,
  _0: {
    TAG: /* I32 */0,
    _0: /* TruncSatUF64 */10
  }
};

var i64_extend_i32_s = {
  TAG: /* Convert */37,
  _0: {
    TAG: /* I64 */1,
    _0: /* ExtendSI32 */0
  }
};

var i64_extend_i32_u = {
  TAG: /* Convert */37,
  _0: {
    TAG: /* I64 */1,
    _0: /* ExtendUI32 */1
  }
};

var i64_trunc_f32_s = {
  TAG: /* Convert */37,
  _0: {
    TAG: /* I64 */1,
    _0: /* TruncSF32 */3
  }
};

var i64_trunc_f32_u = {
  TAG: /* Convert */37,
  _0: {
    TAG: /* I64 */1,
    _0: /* TruncUF32 */4
  }
};

var i64_trunc_f64_s = {
  TAG: /* Convert */37,
  _0: {
    TAG: /* I64 */1,
    _0: /* TruncSF64 */5
  }
};

var i64_trunc_f64_u = {
  TAG: /* Convert */37,
  _0: {
    TAG: /* I64 */1,
    _0: /* TruncUF64 */6
  }
};

var f32_convert_i32_s = {
  TAG: /* Convert */37,
  _0: {
    TAG: /* F32 */2,
    _0: /* ConvertSI32 */0
  }
};

var f32_convert_i32_u = {
  TAG: /* Convert */37,
  _0: {
    TAG: /* F32 */2,
    _0: /* ConvertUI32 */1
  }
};

var f32_convert_i64_s = {
  TAG: /* Convert */37,
  _0: {
    TAG: /* F32 */2,
    _0: /* ConvertSI64 */2
  }
};

var f32_convert_i64_u = {
  TAG: /* Convert */37,
  _0: {
    TAG: /* F32 */2,
    _0: /* ConvertUI64 */3
  }
};

var i64_trunc_sat_f32_s = {
  TAG: /* Convert */37,
  _0: {
    TAG: /* I64 */1,
    _0: /* TruncSatSF32 */7
  }
};

var i64_trunc_sat_f32_u = {
  TAG: /* Convert */37,
  _0: {
    TAG: /* I64 */1,
    _0: /* TruncSatUF32 */8
  }
};

var i64_trunc_sat_f64_s = {
  TAG: /* Convert */37,
  _0: {
    TAG: /* I64 */1,
    _0: /* TruncSatSF64 */9
  }
};

var i64_trunc_sat_f64_u = {
  TAG: /* Convert */37,
  _0: {
    TAG: /* I64 */1,
    _0: /* TruncSatUF64 */10
  }
};

var f32_demote_f64 = {
  TAG: /* Convert */37,
  _0: {
    TAG: /* F32 */2,
    _0: /* DemoteF64 */5
  }
};

var f64_convert_i32_s = {
  TAG: /* Convert */37,
  _0: {
    TAG: /* F64 */3,
    _0: /* ConvertSI32 */0
  }
};

var f64_convert_i32_u = {
  TAG: /* Convert */37,
  _0: {
    TAG: /* F64 */3,
    _0: /* ConvertUI32 */1
  }
};

var f64_convert_i64_s = {
  TAG: /* Convert */37,
  _0: {
    TAG: /* F64 */3,
    _0: /* ConvertSI64 */2
  }
};

var f64_convert_i64_u = {
  TAG: /* Convert */37,
  _0: {
    TAG: /* F64 */3,
    _0: /* ConvertUI64 */3
  }
};

var f64_promote_f32 = {
  TAG: /* Convert */37,
  _0: {
    TAG: /* F64 */3,
    _0: /* PromoteF32 */4
  }
};

var i32_reinterpret_f32 = {
  TAG: /* Convert */37,
  _0: {
    TAG: /* I32 */0,
    _0: /* ReinterpretFloat */11
  }
};

var i64_reinterpret_f64 = {
  TAG: /* Convert */37,
  _0: {
    TAG: /* I64 */1,
    _0: /* ReinterpretFloat */11
  }
};

var f32_reinterpret_i32 = {
  TAG: /* Convert */37,
  _0: {
    TAG: /* F32 */2,
    _0: /* ReinterpretInt */6
  }
};

var f64_reinterpret_i64 = {
  TAG: /* Convert */37,
  _0: {
    TAG: /* F64 */3,
    _0: /* ReinterpretInt */6
  }
};

var v128_not = {
  TAG: /* VecUnaryBits */47,
  _0: /* V128 */{
    _0: /* Not */0
  }
};

var v128_and = {
  TAG: /* VecBinaryBits */48,
  _0: /* V128 */{
    _0: /* And */0
  }
};

var v128_andnot = {
  TAG: /* VecBinaryBits */48,
  _0: /* V128 */{
    _0: /* AndNot */3
  }
};

var v128_or = {
  TAG: /* VecBinaryBits */48,
  _0: /* V128 */{
    _0: /* Or */1
  }
};

var v128_xor = {
  TAG: /* VecBinaryBits */48,
  _0: /* V128 */{
    _0: /* Xor */2
  }
};

var v128_bitselect = {
  TAG: /* VecTernaryBits */49,
  _0: /* V128 */{
    _0: /* Bitselect */0
  }
};

var v128_any_true = {
  TAG: /* VecTestBits */46,
  _0: /* V128 */{
    _0: /* AnyTrue */0
  }
};

var i8x16_swizzle = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I8x16 */0,
      _0: /* Swizzle */18
    }
  }
};

var i8x16_splat = {
  TAG: /* VecSplat */50,
  _0: /* V128 */{
    _0: {
      TAG: /* I8x16 */0,
      _0: /* Splat */0
    }
  }
};

var i8x16_eq = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* I8x16 */0,
      _0: /* Eq */0
    }
  }
};

var i8x16_ne = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* I8x16 */0,
      _0: /* Ne */1
    }
  }
};

var i8x16_lt_s = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* I8x16 */0,
      _0: /* LtS */2
    }
  }
};

var i8x16_lt_u = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* I8x16 */0,
      _0: /* LtU */3
    }
  }
};

var i8x16_le_s = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* I8x16 */0,
      _0: /* LeS */4
    }
  }
};

var i8x16_le_u = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* I8x16 */0,
      _0: /* LeU */5
    }
  }
};

var i8x16_gt_s = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* I8x16 */0,
      _0: /* GtS */6
    }
  }
};

var i8x16_gt_u = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* I8x16 */0,
      _0: /* GtU */7
    }
  }
};

var i8x16_ge_s = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* I8x16 */0,
      _0: /* GeS */8
    }
  }
};

var i8x16_ge_u = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* I8x16 */0,
      _0: /* GeU */9
    }
  }
};

var i8x16_neg = {
  TAG: /* VecUnary */41,
  _0: /* V128 */{
    _0: {
      TAG: /* I8x16 */0,
      _0: /* Neg */1
    }
  }
};

var i8x16_bitmask = {
  TAG: /* VecBitmask */45,
  _0: /* V128 */{
    _0: {
      TAG: /* I8x16 */0,
      _0: /* Bitmask */0
    }
  }
};

var i8x16_all_true = {
  TAG: /* VecTest */39,
  _0: /* V128 */{
    _0: {
      TAG: /* I8x16 */0,
      _0: /* AllTrue */0
    }
  }
};

var i8x16_narrow_i16x8_s = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I8x16 */0,
      _0: /* NarrowS */19
    }
  }
};

var i8x16_narrow_i16x8_u = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I8x16 */0,
      _0: /* NarrowU */20
    }
  }
};

var i16x8_extend_low_i8x16_s = {
  TAG: /* VecConvert */43,
  _0: /* V128 */{
    _0: {
      TAG: /* I16x8 */1,
      _0: /* ExtendLowS */0
    }
  }
};

var i16x8_extend_high_i8x16_s = {
  TAG: /* VecConvert */43,
  _0: /* V128 */{
    _0: {
      TAG: /* I16x8 */1,
      _0: /* ExtendHighS */2
    }
  }
};

var i16x8_extend_low_i8x16_u = {
  TAG: /* VecConvert */43,
  _0: /* V128 */{
    _0: {
      TAG: /* I16x8 */1,
      _0: /* ExtendLowU */1
    }
  }
};

var i16x8_extend_high_i8x16_u = {
  TAG: /* VecConvert */43,
  _0: /* V128 */{
    _0: {
      TAG: /* I16x8 */1,
      _0: /* ExtendHighU */3
    }
  }
};

var i8x16_shl = {
  TAG: /* VecShift */44,
  _0: /* V128 */{
    _0: {
      TAG: /* I8x16 */0,
      _0: /* Shl */0
    }
  }
};

var i8x16_shr_s = {
  TAG: /* VecShift */44,
  _0: /* V128 */{
    _0: {
      TAG: /* I8x16 */0,
      _0: /* ShrS */1
    }
  }
};

var i8x16_shr_u = {
  TAG: /* VecShift */44,
  _0: /* V128 */{
    _0: {
      TAG: /* I8x16 */0,
      _0: /* ShrU */2
    }
  }
};

var i8x16_add = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I8x16 */0,
      _0: /* Add */0
    }
  }
};

var i8x16_add_sat_s = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I8x16 */0,
      _0: /* AddSatS */8
    }
  }
};

var i8x16_add_sat_u = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I8x16 */0,
      _0: /* AddSatU */9
    }
  }
};

var i8x16_sub = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I8x16 */0,
      _0: /* Sub */1
    }
  }
};

var i8x16_sub_sat_s = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I8x16 */0,
      _0: /* SubSatS */10
    }
  }
};

var i8x16_sub_sat_u = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I8x16 */0,
      _0: /* SubSatU */11
    }
  }
};

var i8x16_abs = {
  TAG: /* VecUnary */41,
  _0: /* V128 */{
    _0: {
      TAG: /* I8x16 */0,
      _0: /* Abs */0
    }
  }
};

var i8x16_popcnt = {
  TAG: /* VecUnary */41,
  _0: /* V128 */{
    _0: {
      TAG: /* I8x16 */0,
      _0: /* Popcnt */2
    }
  }
};

var i8x16_min_s = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I8x16 */0,
      _0: /* MinS */3
    }
  }
};

var i8x16_min_u = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I8x16 */0,
      _0: /* MinU */4
    }
  }
};

var i8x16_max_s = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I8x16 */0,
      _0: /* MaxS */5
    }
  }
};

var i8x16_max_u = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I8x16 */0,
      _0: /* MaxU */6
    }
  }
};

var i8x16_avgr_u = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I8x16 */0,
      _0: /* AvgrU */7
    }
  }
};

var i16x8_splat = {
  TAG: /* VecSplat */50,
  _0: /* V128 */{
    _0: {
      TAG: /* I16x8 */1,
      _0: /* Splat */0
    }
  }
};

var i16x8_eq = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* I16x8 */1,
      _0: /* Eq */0
    }
  }
};

var i16x8_ne = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* I16x8 */1,
      _0: /* Ne */1
    }
  }
};

var i16x8_lt_s = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* I16x8 */1,
      _0: /* LtS */2
    }
  }
};

var i16x8_lt_u = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* I16x8 */1,
      _0: /* LtU */3
    }
  }
};

var i16x8_le_s = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* I16x8 */1,
      _0: /* LeS */4
    }
  }
};

var i16x8_le_u = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* I16x8 */1,
      _0: /* LeU */5
    }
  }
};

var i16x8_gt_s = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* I16x8 */1,
      _0: /* GtS */6
    }
  }
};

var i16x8_gt_u = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* I16x8 */1,
      _0: /* GtU */7
    }
  }
};

var i16x8_ge_s = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* I16x8 */1,
      _0: /* GeS */8
    }
  }
};

var i16x8_ge_u = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* I16x8 */1,
      _0: /* GeU */9
    }
  }
};

var i16x8_neg = {
  TAG: /* VecUnary */41,
  _0: /* V128 */{
    _0: {
      TAG: /* I16x8 */1,
      _0: /* Neg */1
    }
  }
};

var i16x8_bitmask = {
  TAG: /* VecBitmask */45,
  _0: /* V128 */{
    _0: {
      TAG: /* I16x8 */1,
      _0: /* Bitmask */0
    }
  }
};

var i16x8_all_true = {
  TAG: /* VecTest */39,
  _0: /* V128 */{
    _0: {
      TAG: /* I16x8 */1,
      _0: /* AllTrue */0
    }
  }
};

var i16x8_narrow_i32x4_s = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I16x8 */1,
      _0: /* NarrowS */19
    }
  }
};

var i16x8_narrow_i32x4_u = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I16x8 */1,
      _0: /* NarrowU */20
    }
  }
};

var i16x8_shl = {
  TAG: /* VecShift */44,
  _0: /* V128 */{
    _0: {
      TAG: /* I16x8 */1,
      _0: /* Shl */0
    }
  }
};

var i16x8_shr_s = {
  TAG: /* VecShift */44,
  _0: /* V128 */{
    _0: {
      TAG: /* I16x8 */1,
      _0: /* ShrS */1
    }
  }
};

var i16x8_shr_u = {
  TAG: /* VecShift */44,
  _0: /* V128 */{
    _0: {
      TAG: /* I16x8 */1,
      _0: /* ShrU */2
    }
  }
};

var i16x8_add = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I16x8 */1,
      _0: /* Add */0
    }
  }
};

var i16x8_add_sat_s = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I16x8 */1,
      _0: /* AddSatS */8
    }
  }
};

var i16x8_add_sat_u = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I16x8 */1,
      _0: /* AddSatU */9
    }
  }
};

var i16x8_sub = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I16x8 */1,
      _0: /* Sub */1
    }
  }
};

var i16x8_sub_sat_s = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I16x8 */1,
      _0: /* SubSatS */10
    }
  }
};

var i16x8_sub_sat_u = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I16x8 */1,
      _0: /* SubSatU */11
    }
  }
};

var i16x8_mul = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I16x8 */1,
      _0: /* Mul */2
    }
  }
};

var i16x8_abs = {
  TAG: /* VecUnary */41,
  _0: /* V128 */{
    _0: {
      TAG: /* I16x8 */1,
      _0: /* Abs */0
    }
  }
};

var i16x8_min_s = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I16x8 */1,
      _0: /* MinS */3
    }
  }
};

var i16x8_min_u = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I16x8 */1,
      _0: /* MinU */4
    }
  }
};

var i16x8_max_s = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I16x8 */1,
      _0: /* MaxS */5
    }
  }
};

var i16x8_max_u = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I16x8 */1,
      _0: /* MaxU */6
    }
  }
};

var i16x8_avgr_u = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I16x8 */1,
      _0: /* AvgrU */7
    }
  }
};

var i16x8_extmul_low_i8x16_s = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I16x8 */1,
      _0: /* ExtMulLowS */14
    }
  }
};

var i16x8_extmul_high_i8x16_s = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I16x8 */1,
      _0: /* ExtMulHighS */15
    }
  }
};

var i16x8_extmul_low_i8x16_u = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I16x8 */1,
      _0: /* ExtMulLowU */16
    }
  }
};

var i16x8_extmul_high_i8x16_u = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I16x8 */1,
      _0: /* ExtMulHighU */17
    }
  }
};

var i16x8_q15mulr_sat_s = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I16x8 */1,
      _0: /* Q15MulRSatS */13
    }
  }
};

var i16x8_extadd_pairwise_i8x16_s = {
  TAG: /* VecConvert */43,
  _0: /* V128 */{
    _0: {
      TAG: /* I16x8 */1,
      _0: /* ExtAddPairwiseS */4
    }
  }
};

var i16x8_extadd_pairwise_i8x16_u = {
  TAG: /* VecConvert */43,
  _0: /* V128 */{
    _0: {
      TAG: /* I16x8 */1,
      _0: /* ExtAddPairwiseU */5
    }
  }
};

var i32x4_splat = {
  TAG: /* VecSplat */50,
  _0: /* V128 */{
    _0: {
      TAG: /* I32x4 */2,
      _0: /* Splat */0
    }
  }
};

var i32x4_eq = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* I32x4 */2,
      _0: /* Eq */0
    }
  }
};

var i32x4_ne = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* I32x4 */2,
      _0: /* Ne */1
    }
  }
};

var i32x4_lt_s = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* I32x4 */2,
      _0: /* LtS */2
    }
  }
};

var i32x4_lt_u = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* I32x4 */2,
      _0: /* LtU */3
    }
  }
};

var i32x4_le_s = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* I32x4 */2,
      _0: /* LeS */4
    }
  }
};

var i32x4_le_u = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* I32x4 */2,
      _0: /* LeU */5
    }
  }
};

var i32x4_gt_s = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* I32x4 */2,
      _0: /* GtS */6
    }
  }
};

var i32x4_gt_u = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* I32x4 */2,
      _0: /* GtU */7
    }
  }
};

var i32x4_ge_s = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* I32x4 */2,
      _0: /* GeS */8
    }
  }
};

var i32x4_ge_u = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* I32x4 */2,
      _0: /* GeU */9
    }
  }
};

var i32x4_abs = {
  TAG: /* VecUnary */41,
  _0: /* V128 */{
    _0: {
      TAG: /* I32x4 */2,
      _0: /* Abs */0
    }
  }
};

var i32x4_neg = {
  TAG: /* VecUnary */41,
  _0: /* V128 */{
    _0: {
      TAG: /* I32x4 */2,
      _0: /* Neg */1
    }
  }
};

var i32x4_bitmask = {
  TAG: /* VecBitmask */45,
  _0: /* V128 */{
    _0: {
      TAG: /* I32x4 */2,
      _0: /* Bitmask */0
    }
  }
};

var i32x4_all_true = {
  TAG: /* VecTest */39,
  _0: /* V128 */{
    _0: {
      TAG: /* I32x4 */2,
      _0: /* AllTrue */0
    }
  }
};

var i32x4_extend_low_i16x8_s = {
  TAG: /* VecConvert */43,
  _0: /* V128 */{
    _0: {
      TAG: /* I32x4 */2,
      _0: /* ExtendLowS */0
    }
  }
};

var i32x4_extend_high_i16x8_s = {
  TAG: /* VecConvert */43,
  _0: /* V128 */{
    _0: {
      TAG: /* I32x4 */2,
      _0: /* ExtendHighS */2
    }
  }
};

var i32x4_extend_low_i16x8_u = {
  TAG: /* VecConvert */43,
  _0: /* V128 */{
    _0: {
      TAG: /* I32x4 */2,
      _0: /* ExtendLowU */1
    }
  }
};

var i32x4_extend_high_i16x8_u = {
  TAG: /* VecConvert */43,
  _0: /* V128 */{
    _0: {
      TAG: /* I32x4 */2,
      _0: /* ExtendHighU */3
    }
  }
};

var i32x4_shl = {
  TAG: /* VecShift */44,
  _0: /* V128 */{
    _0: {
      TAG: /* I32x4 */2,
      _0: /* Shl */0
    }
  }
};

var i32x4_shr_s = {
  TAG: /* VecShift */44,
  _0: /* V128 */{
    _0: {
      TAG: /* I32x4 */2,
      _0: /* ShrS */1
    }
  }
};

var i32x4_shr_u = {
  TAG: /* VecShift */44,
  _0: /* V128 */{
    _0: {
      TAG: /* I32x4 */2,
      _0: /* ShrU */2
    }
  }
};

var i32x4_add = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I32x4 */2,
      _0: /* Add */0
    }
  }
};

var i32x4_sub = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I32x4 */2,
      _0: /* Sub */1
    }
  }
};

var i32x4_min_s = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I32x4 */2,
      _0: /* MinS */3
    }
  }
};

var i32x4_min_u = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I32x4 */2,
      _0: /* MinU */4
    }
  }
};

var i32x4_max_s = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I32x4 */2,
      _0: /* MaxS */5
    }
  }
};

var i32x4_max_u = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I32x4 */2,
      _0: /* MaxU */6
    }
  }
};

var i32x4_mul = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I32x4 */2,
      _0: /* Mul */2
    }
  }
};

var i32x4_dot_i16x8_s = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I32x4 */2,
      _0: /* DotS */12
    }
  }
};

var i32x4_trunc_sat_f32x4_s = {
  TAG: /* VecConvert */43,
  _0: /* V128 */{
    _0: {
      TAG: /* I32x4 */2,
      _0: /* TruncSatSF32x4 */6
    }
  }
};

var i32x4_trunc_sat_f32x4_u = {
  TAG: /* VecConvert */43,
  _0: /* V128 */{
    _0: {
      TAG: /* I32x4 */2,
      _0: /* TruncSatUF32x4 */7
    }
  }
};

var i32x4_trunc_sat_f64x2_s_zero = {
  TAG: /* VecConvert */43,
  _0: /* V128 */{
    _0: {
      TAG: /* I32x4 */2,
      _0: /* TruncSatSZeroF64x2 */8
    }
  }
};

var i32x4_trunc_sat_f64x2_u_zero = {
  TAG: /* VecConvert */43,
  _0: /* V128 */{
    _0: {
      TAG: /* I32x4 */2,
      _0: /* TruncSatUZeroF64x2 */9
    }
  }
};

var i32x4_extmul_low_i16x8_s = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I32x4 */2,
      _0: /* ExtMulLowS */14
    }
  }
};

var i32x4_extmul_high_i16x8_s = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I32x4 */2,
      _0: /* ExtMulHighS */15
    }
  }
};

var i32x4_extmul_low_i16x8_u = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I32x4 */2,
      _0: /* ExtMulLowU */16
    }
  }
};

var i32x4_extmul_high_i16x8_u = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I32x4 */2,
      _0: /* ExtMulHighU */17
    }
  }
};

var i32x4_extadd_pairwise_i16x8_s = {
  TAG: /* VecConvert */43,
  _0: /* V128 */{
    _0: {
      TAG: /* I32x4 */2,
      _0: /* ExtAddPairwiseS */4
    }
  }
};

var i32x4_extadd_pairwise_i16x8_u = {
  TAG: /* VecConvert */43,
  _0: /* V128 */{
    _0: {
      TAG: /* I32x4 */2,
      _0: /* ExtAddPairwiseU */5
    }
  }
};

var i64x2_splat = {
  TAG: /* VecSplat */50,
  _0: /* V128 */{
    _0: {
      TAG: /* I64x2 */3,
      _0: /* Splat */0
    }
  }
};

var i64x2_extend_low_i32x4_s = {
  TAG: /* VecConvert */43,
  _0: /* V128 */{
    _0: {
      TAG: /* I64x2 */3,
      _0: /* ExtendLowS */0
    }
  }
};

var i64x2_extend_high_i32x4_s = {
  TAG: /* VecConvert */43,
  _0: /* V128 */{
    _0: {
      TAG: /* I64x2 */3,
      _0: /* ExtendHighS */2
    }
  }
};

var i64x2_extend_low_i32x4_u = {
  TAG: /* VecConvert */43,
  _0: /* V128 */{
    _0: {
      TAG: /* I64x2 */3,
      _0: /* ExtendLowU */1
    }
  }
};

var i64x2_extend_high_i32x4_u = {
  TAG: /* VecConvert */43,
  _0: /* V128 */{
    _0: {
      TAG: /* I64x2 */3,
      _0: /* ExtendHighU */3
    }
  }
};

var i64x2_eq = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* I64x2 */3,
      _0: /* Eq */0
    }
  }
};

var i64x2_ne = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* I64x2 */3,
      _0: /* Ne */1
    }
  }
};

var i64x2_lt_s = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* I64x2 */3,
      _0: /* LtS */2
    }
  }
};

var i64x2_le_s = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* I64x2 */3,
      _0: /* LeS */4
    }
  }
};

var i64x2_gt_s = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* I64x2 */3,
      _0: /* GtS */6
    }
  }
};

var i64x2_ge_s = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* I64x2 */3,
      _0: /* GeS */8
    }
  }
};

var i64x2_abs = {
  TAG: /* VecUnary */41,
  _0: /* V128 */{
    _0: {
      TAG: /* I64x2 */3,
      _0: /* Abs */0
    }
  }
};

var i64x2_neg = {
  TAG: /* VecUnary */41,
  _0: /* V128 */{
    _0: {
      TAG: /* I64x2 */3,
      _0: /* Neg */1
    }
  }
};

var i64x2_bitmask = {
  TAG: /* VecBitmask */45,
  _0: /* V128 */{
    _0: {
      TAG: /* I64x2 */3,
      _0: /* Bitmask */0
    }
  }
};

var i64x2_all_true = {
  TAG: /* VecTest */39,
  _0: /* V128 */{
    _0: {
      TAG: /* I64x2 */3,
      _0: /* AllTrue */0
    }
  }
};

var i64x2_add = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I64x2 */3,
      _0: /* Add */0
    }
  }
};

var i64x2_sub = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I64x2 */3,
      _0: /* Sub */1
    }
  }
};

var i64x2_mul = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I64x2 */3,
      _0: /* Mul */2
    }
  }
};

var i64x2_shl = {
  TAG: /* VecShift */44,
  _0: /* V128 */{
    _0: {
      TAG: /* I64x2 */3,
      _0: /* Shl */0
    }
  }
};

var i64x2_shr_s = {
  TAG: /* VecShift */44,
  _0: /* V128 */{
    _0: {
      TAG: /* I64x2 */3,
      _0: /* ShrS */1
    }
  }
};

var i64x2_shr_u = {
  TAG: /* VecShift */44,
  _0: /* V128 */{
    _0: {
      TAG: /* I64x2 */3,
      _0: /* ShrU */2
    }
  }
};

var i64x2_extmul_low_i32x4_s = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I64x2 */3,
      _0: /* ExtMulLowS */14
    }
  }
};

var i64x2_extmul_high_i32x4_s = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I64x2 */3,
      _0: /* ExtMulHighS */15
    }
  }
};

var i64x2_extmul_low_i32x4_u = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I64x2 */3,
      _0: /* ExtMulLowU */16
    }
  }
};

var i64x2_extmul_high_i32x4_u = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* I64x2 */3,
      _0: /* ExtMulHighU */17
    }
  }
};

var f32x4_splat = {
  TAG: /* VecSplat */50,
  _0: /* V128 */{
    _0: {
      TAG: /* F32x4 */4,
      _0: /* Splat */0
    }
  }
};

var f32x4_eq = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* F32x4 */4,
      _0: /* Eq */0
    }
  }
};

var f32x4_ne = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* F32x4 */4,
      _0: /* Ne */1
    }
  }
};

var f32x4_lt = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* F32x4 */4,
      _0: /* Lt */2
    }
  }
};

var f32x4_le = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* F32x4 */4,
      _0: /* Le */3
    }
  }
};

var f32x4_gt = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* F32x4 */4,
      _0: /* Gt */4
    }
  }
};

var f32x4_ge = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* F32x4 */4,
      _0: /* Ge */5
    }
  }
};

var f32x4_abs = {
  TAG: /* VecUnary */41,
  _0: /* V128 */{
    _0: {
      TAG: /* F32x4 */4,
      _0: /* Abs */0
    }
  }
};

var f32x4_neg = {
  TAG: /* VecUnary */41,
  _0: /* V128 */{
    _0: {
      TAG: /* F32x4 */4,
      _0: /* Neg */1
    }
  }
};

var f32x4_sqrt = {
  TAG: /* VecUnary */41,
  _0: /* V128 */{
    _0: {
      TAG: /* F32x4 */4,
      _0: /* Sqrt */2
    }
  }
};

var f32x4_ceil = {
  TAG: /* VecUnary */41,
  _0: /* V128 */{
    _0: {
      TAG: /* F32x4 */4,
      _0: /* Ceil */3
    }
  }
};

var f32x4_floor = {
  TAG: /* VecUnary */41,
  _0: /* V128 */{
    _0: {
      TAG: /* F32x4 */4,
      _0: /* Floor */4
    }
  }
};

var f32x4_trunc = {
  TAG: /* VecUnary */41,
  _0: /* V128 */{
    _0: {
      TAG: /* F32x4 */4,
      _0: /* Trunc */5
    }
  }
};

var f32x4_nearest = {
  TAG: /* VecUnary */41,
  _0: /* V128 */{
    _0: {
      TAG: /* F32x4 */4,
      _0: /* Nearest */6
    }
  }
};

var f32x4_add = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* F32x4 */4,
      _0: /* Add */0
    }
  }
};

var f32x4_sub = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* F32x4 */4,
      _0: /* Sub */1
    }
  }
};

var f32x4_mul = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* F32x4 */4,
      _0: /* Mul */2
    }
  }
};

var f32x4_div = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* F32x4 */4,
      _0: /* Div */3
    }
  }
};

var f32x4_min = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* F32x4 */4,
      _0: /* Min */4
    }
  }
};

var f32x4_max = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* F32x4 */4,
      _0: /* Max */5
    }
  }
};

var f32x4_pmin = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* F32x4 */4,
      _0: /* Pmin */6
    }
  }
};

var f32x4_pmax = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* F32x4 */4,
      _0: /* Pmax */7
    }
  }
};

var f32x4_demote_f64x2_zero = {
  TAG: /* VecConvert */43,
  _0: /* V128 */{
    _0: {
      TAG: /* F32x4 */4,
      _0: /* DemoteZeroF64x2 */0
    }
  }
};

var f32x4_convert_i32x4_s = {
  TAG: /* VecConvert */43,
  _0: /* V128 */{
    _0: {
      TAG: /* F32x4 */4,
      _0: /* ConvertSI32x4 */2
    }
  }
};

var f32x4_convert_i32x4_u = {
  TAG: /* VecConvert */43,
  _0: /* V128 */{
    _0: {
      TAG: /* F32x4 */4,
      _0: /* ConvertUI32x4 */3
    }
  }
};

var f64x2_splat = {
  TAG: /* VecSplat */50,
  _0: /* V128 */{
    _0: {
      TAG: /* F64x2 */5,
      _0: /* Splat */0
    }
  }
};

var f64x2_eq = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* F64x2 */5,
      _0: /* Eq */0
    }
  }
};

var f64x2_ne = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* F64x2 */5,
      _0: /* Ne */1
    }
  }
};

var f64x2_lt = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* F64x2 */5,
      _0: /* Lt */2
    }
  }
};

var f64x2_le = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* F64x2 */5,
      _0: /* Le */3
    }
  }
};

var f64x2_gt = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* F64x2 */5,
      _0: /* Gt */4
    }
  }
};

var f64x2_ge = {
  TAG: /* VecCompare */40,
  _0: /* V128 */{
    _0: {
      TAG: /* F64x2 */5,
      _0: /* Ge */5
    }
  }
};

var f64x2_neg = {
  TAG: /* VecUnary */41,
  _0: /* V128 */{
    _0: {
      TAG: /* F64x2 */5,
      _0: /* Neg */1
    }
  }
};

var f64x2_sqrt = {
  TAG: /* VecUnary */41,
  _0: /* V128 */{
    _0: {
      TAG: /* F64x2 */5,
      _0: /* Sqrt */2
    }
  }
};

var f64x2_ceil = {
  TAG: /* VecUnary */41,
  _0: /* V128 */{
    _0: {
      TAG: /* F64x2 */5,
      _0: /* Ceil */3
    }
  }
};

var f64x2_floor = {
  TAG: /* VecUnary */41,
  _0: /* V128 */{
    _0: {
      TAG: /* F64x2 */5,
      _0: /* Floor */4
    }
  }
};

var f64x2_trunc = {
  TAG: /* VecUnary */41,
  _0: /* V128 */{
    _0: {
      TAG: /* F64x2 */5,
      _0: /* Trunc */5
    }
  }
};

var f64x2_nearest = {
  TAG: /* VecUnary */41,
  _0: /* V128 */{
    _0: {
      TAG: /* F64x2 */5,
      _0: /* Nearest */6
    }
  }
};

var f64x2_add = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* F64x2 */5,
      _0: /* Add */0
    }
  }
};

var f64x2_sub = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* F64x2 */5,
      _0: /* Sub */1
    }
  }
};

var f64x2_mul = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* F64x2 */5,
      _0: /* Mul */2
    }
  }
};

var f64x2_div = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* F64x2 */5,
      _0: /* Div */3
    }
  }
};

var f64x2_min = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* F64x2 */5,
      _0: /* Min */4
    }
  }
};

var f64x2_max = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* F64x2 */5,
      _0: /* Max */5
    }
  }
};

var f64x2_abs = {
  TAG: /* VecUnary */41,
  _0: /* V128 */{
    _0: {
      TAG: /* F64x2 */5,
      _0: /* Abs */0
    }
  }
};

var f64x2_pmin = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* F64x2 */5,
      _0: /* Pmin */6
    }
  }
};

var f64x2_pmax = {
  TAG: /* VecBinary */42,
  _0: /* V128 */{
    _0: {
      TAG: /* F64x2 */5,
      _0: /* Pmax */7
    }
  }
};

var f64x2_promote_low_f32x4 = {
  TAG: /* VecConvert */43,
  _0: /* V128 */{
    _0: {
      TAG: /* F64x2 */5,
      _0: /* PromoteLowF32x4 */1
    }
  }
};

var f64x2_convert_low_i32x4_s = {
  TAG: /* VecConvert */43,
  _0: /* V128 */{
    _0: {
      TAG: /* F64x2 */5,
      _0: /* ConvertSI32x4 */2
    }
  }
};

var f64x2_convert_low_i32x4_u = {
  TAG: /* VecConvert */43,
  _0: /* V128 */{
    _0: {
      TAG: /* F64x2 */5,
      _0: /* ConvertUI32x4 */3
    }
  }
};

export {
  i32_const ,
  i64_const ,
  f32_const ,
  f64_const ,
  v128_const ,
  ref_null ,
  ref_func ,
  unreachable ,
  nop ,
  drop ,
  select ,
  block ,
  loop ,
  if_ ,
  br ,
  br_if ,
  br_table ,
  $$return ,
  call ,
  call_indirect ,
  local_get ,
  local_set ,
  local_tee ,
  global_get ,
  global_set ,
  table_get ,
  table_set ,
  table_size ,
  table_grow ,
  table_fill ,
  table_copy ,
  table_init ,
  elem_drop ,
  i32_load ,
  i64_load ,
  f32_load ,
  f64_load ,
  i32_load8_s ,
  i32_load8_u ,
  i32_load16_s ,
  i32_load16_u ,
  i64_load8_s ,
  i64_load8_u ,
  i64_load16_s ,
  i64_load16_u ,
  i64_load32_s ,
  i64_load32_u ,
  i32_store ,
  i64_store ,
  f32_store ,
  f64_store ,
  i32_store8 ,
  i32_store16 ,
  i64_store8 ,
  i64_store16 ,
  i64_store32 ,
  memory_size ,
  memory_grow ,
  memory_fill ,
  memory_copy ,
  memory_init ,
  data_drop ,
  ref_is_null ,
  i32_clz ,
  i32_ctz ,
  i32_popcnt ,
  i64_clz ,
  i64_ctz ,
  i64_popcnt ,
  f32_neg ,
  f32_abs ,
  f32_sqrt ,
  f32_ceil ,
  f32_floor ,
  f32_trunc ,
  f32_nearest ,
  f64_neg ,
  f64_abs ,
  f64_sqrt ,
  f64_ceil ,
  f64_floor ,
  f64_trunc ,
  f64_nearest ,
  i32_add ,
  i32_sub ,
  i32_mul ,
  i32_div_s ,
  i32_div_u ,
  i32_rem_s ,
  i32_rem_u ,
  i32_and ,
  i32_or ,
  i32_xor ,
  i32_shl ,
  i32_shr_s ,
  i32_shr_u ,
  i32_rotl ,
  i32_rotr ,
  i64_add ,
  i64_sub ,
  i64_mul ,
  i64_div_s ,
  i64_div_u ,
  i64_rem_s ,
  i64_rem_u ,
  i64_and ,
  i64_or ,
  i64_xor ,
  i64_shl ,
  i64_shr_s ,
  i64_shr_u ,
  i64_rotl ,
  i64_rotr ,
  f32_add ,
  f32_sub ,
  f32_mul ,
  f32_div ,
  f32_min ,
  f32_max ,
  f32_copysign ,
  f64_add ,
  f64_sub ,
  f64_mul ,
  f64_div ,
  f64_min ,
  f64_max ,
  f64_copysign ,
  i32_eqz ,
  i64_eqz ,
  i32_eq ,
  i32_ne ,
  i32_lt_s ,
  i32_lt_u ,
  i32_le_s ,
  i32_le_u ,
  i32_gt_s ,
  i32_gt_u ,
  i32_ge_s ,
  i32_ge_u ,
  i64_eq ,
  i64_ne ,
  i64_lt_s ,
  i64_lt_u ,
  i64_le_s ,
  i64_le_u ,
  i64_gt_s ,
  i64_gt_u ,
  i64_ge_s ,
  i64_ge_u ,
  f32_eq ,
  f32_ne ,
  f32_lt ,
  f32_le ,
  f32_gt ,
  f32_ge ,
  f64_eq ,
  f64_ne ,
  f64_lt ,
  f64_le ,
  f64_gt ,
  f64_ge ,
  i32_extend8_s ,
  i32_extend16_s ,
  i64_extend8_s ,
  i64_extend16_s ,
  i64_extend32_s ,
  i32_wrap_i64 ,
  i32_trunc_f32_s ,
  i32_trunc_f32_u ,
  i32_trunc_f64_s ,
  i32_trunc_f64_u ,
  i32_trunc_sat_f32_s ,
  i32_trunc_sat_f32_u ,
  i32_trunc_sat_f64_s ,
  i32_trunc_sat_f64_u ,
  i64_extend_i32_s ,
  i64_extend_i32_u ,
  i64_trunc_f32_s ,
  i64_trunc_f32_u ,
  i64_trunc_f64_s ,
  i64_trunc_f64_u ,
  f32_convert_i32_s ,
  f32_convert_i32_u ,
  f32_convert_i64_s ,
  f32_convert_i64_u ,
  i64_trunc_sat_f32_s ,
  i64_trunc_sat_f32_u ,
  i64_trunc_sat_f64_s ,
  i64_trunc_sat_f64_u ,
  f32_demote_f64 ,
  f64_convert_i32_s ,
  f64_convert_i32_u ,
  f64_convert_i64_s ,
  f64_convert_i64_u ,
  f64_promote_f32 ,
  i32_reinterpret_f32 ,
  i64_reinterpret_f64 ,
  f32_reinterpret_i32 ,
  f64_reinterpret_i64 ,
  v128_load ,
  v128_load8x8_s ,
  v128_load8x8_u ,
  v128_load16x4_s ,
  v128_load16x4_u ,
  v128_load32x2_s ,
  v128_load32x2_u ,
  v128_load8_splat ,
  v128_load16_splat ,
  v128_load32_splat ,
  v128_load64_splat ,
  v128_load32_zero ,
  v128_load64_zero ,
  v128_store ,
  v128_load8_lane ,
  v128_load16_lane ,
  v128_load32_lane ,
  v128_load64_lane ,
  v128_store8_lane ,
  v128_store16_lane ,
  v128_store32_lane ,
  v128_store64_lane ,
  v128_not ,
  v128_and ,
  v128_andnot ,
  v128_or ,
  v128_xor ,
  v128_bitselect ,
  v128_any_true ,
  i8x16_swizzle ,
  i8x16_shuffle ,
  i8x16_splat ,
  i8x16_extract_lane_s ,
  i8x16_extract_lane_u ,
  i8x16_replace_lane ,
  i8x16_eq ,
  i8x16_ne ,
  i8x16_lt_s ,
  i8x16_lt_u ,
  i8x16_le_s ,
  i8x16_le_u ,
  i8x16_gt_s ,
  i8x16_gt_u ,
  i8x16_ge_s ,
  i8x16_ge_u ,
  i8x16_neg ,
  i8x16_bitmask ,
  i8x16_all_true ,
  i8x16_narrow_i16x8_s ,
  i8x16_narrow_i16x8_u ,
  i16x8_extend_low_i8x16_s ,
  i16x8_extend_high_i8x16_s ,
  i16x8_extend_low_i8x16_u ,
  i16x8_extend_high_i8x16_u ,
  i8x16_shl ,
  i8x16_shr_s ,
  i8x16_shr_u ,
  i8x16_add ,
  i8x16_add_sat_s ,
  i8x16_add_sat_u ,
  i8x16_sub ,
  i8x16_sub_sat_s ,
  i8x16_sub_sat_u ,
  i8x16_abs ,
  i8x16_popcnt ,
  i8x16_min_s ,
  i8x16_min_u ,
  i8x16_max_s ,
  i8x16_max_u ,
  i8x16_avgr_u ,
  i16x8_splat ,
  i16x8_extract_lane_s ,
  i16x8_extract_lane_u ,
  i16x8_replace_lane ,
  i16x8_eq ,
  i16x8_ne ,
  i16x8_lt_s ,
  i16x8_lt_u ,
  i16x8_le_s ,
  i16x8_le_u ,
  i16x8_gt_s ,
  i16x8_gt_u ,
  i16x8_ge_s ,
  i16x8_ge_u ,
  i16x8_neg ,
  i16x8_bitmask ,
  i16x8_all_true ,
  i16x8_narrow_i32x4_s ,
  i16x8_narrow_i32x4_u ,
  i16x8_shl ,
  i16x8_shr_s ,
  i16x8_shr_u ,
  i16x8_add ,
  i16x8_add_sat_s ,
  i16x8_add_sat_u ,
  i16x8_sub ,
  i16x8_sub_sat_s ,
  i16x8_sub_sat_u ,
  i16x8_mul ,
  i16x8_abs ,
  i16x8_min_s ,
  i16x8_min_u ,
  i16x8_max_s ,
  i16x8_max_u ,
  i16x8_avgr_u ,
  i16x8_extmul_low_i8x16_s ,
  i16x8_extmul_high_i8x16_s ,
  i16x8_extmul_low_i8x16_u ,
  i16x8_extmul_high_i8x16_u ,
  i16x8_q15mulr_sat_s ,
  i16x8_extadd_pairwise_i8x16_s ,
  i16x8_extadd_pairwise_i8x16_u ,
  i32x4_splat ,
  i32x4_extract_lane ,
  i32x4_replace_lane ,
  i32x4_eq ,
  i32x4_ne ,
  i32x4_lt_s ,
  i32x4_lt_u ,
  i32x4_le_s ,
  i32x4_le_u ,
  i32x4_gt_s ,
  i32x4_gt_u ,
  i32x4_ge_s ,
  i32x4_ge_u ,
  i32x4_abs ,
  i32x4_neg ,
  i32x4_bitmask ,
  i32x4_all_true ,
  i32x4_extend_low_i16x8_s ,
  i32x4_extend_high_i16x8_s ,
  i32x4_extend_low_i16x8_u ,
  i32x4_extend_high_i16x8_u ,
  i32x4_shl ,
  i32x4_shr_s ,
  i32x4_shr_u ,
  i32x4_add ,
  i32x4_sub ,
  i32x4_min_s ,
  i32x4_min_u ,
  i32x4_max_s ,
  i32x4_max_u ,
  i32x4_mul ,
  i32x4_dot_i16x8_s ,
  i32x4_trunc_sat_f32x4_s ,
  i32x4_trunc_sat_f32x4_u ,
  i32x4_trunc_sat_f64x2_s_zero ,
  i32x4_trunc_sat_f64x2_u_zero ,
  i32x4_extmul_low_i16x8_s ,
  i32x4_extmul_high_i16x8_s ,
  i32x4_extmul_low_i16x8_u ,
  i32x4_extmul_high_i16x8_u ,
  i32x4_extadd_pairwise_i16x8_s ,
  i32x4_extadd_pairwise_i16x8_u ,
  i64x2_splat ,
  i64x2_extract_lane ,
  i64x2_replace_lane ,
  i64x2_extend_low_i32x4_s ,
  i64x2_extend_high_i32x4_s ,
  i64x2_extend_low_i32x4_u ,
  i64x2_extend_high_i32x4_u ,
  i64x2_eq ,
  i64x2_ne ,
  i64x2_lt_s ,
  i64x2_le_s ,
  i64x2_gt_s ,
  i64x2_ge_s ,
  i64x2_abs ,
  i64x2_neg ,
  i64x2_bitmask ,
  i64x2_all_true ,
  i64x2_add ,
  i64x2_sub ,
  i64x2_mul ,
  i64x2_shl ,
  i64x2_shr_s ,
  i64x2_shr_u ,
  i64x2_extmul_low_i32x4_s ,
  i64x2_extmul_high_i32x4_s ,
  i64x2_extmul_low_i32x4_u ,
  i64x2_extmul_high_i32x4_u ,
  f32x4_splat ,
  f32x4_extract_lane ,
  f32x4_replace_lane ,
  f32x4_eq ,
  f32x4_ne ,
  f32x4_lt ,
  f32x4_le ,
  f32x4_gt ,
  f32x4_ge ,
  f32x4_abs ,
  f32x4_neg ,
  f32x4_sqrt ,
  f32x4_ceil ,
  f32x4_floor ,
  f32x4_trunc ,
  f32x4_nearest ,
  f32x4_add ,
  f32x4_sub ,
  f32x4_mul ,
  f32x4_div ,
  f32x4_min ,
  f32x4_max ,
  f32x4_pmin ,
  f32x4_pmax ,
  f32x4_demote_f64x2_zero ,
  f32x4_convert_i32x4_s ,
  f32x4_convert_i32x4_u ,
  f64x2_splat ,
  f64x2_extract_lane ,
  f64x2_replace_lane ,
  f64x2_eq ,
  f64x2_ne ,
  f64x2_lt ,
  f64x2_le ,
  f64x2_gt ,
  f64x2_ge ,
  f64x2_neg ,
  f64x2_sqrt ,
  f64x2_ceil ,
  f64x2_floor ,
  f64x2_trunc ,
  f64x2_nearest ,
  f64x2_add ,
  f64x2_sub ,
  f64x2_mul ,
  f64x2_div ,
  f64x2_min ,
  f64x2_max ,
  f64x2_abs ,
  f64x2_pmin ,
  f64x2_pmax ,
  f64x2_promote_low_f32x4 ,
  f64x2_convert_low_i32x4_s ,
  f64x2_convert_low_i32x4_u ,
  
}
/* No side effect */
