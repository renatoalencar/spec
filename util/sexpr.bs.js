// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("rescript/lib/js/list.js");
var Curry = require("rescript/lib/js/curry.js");
var $$String = require("rescript/lib/js/string.js");
var Pervasives = require("rescript/lib/js/pervasives.js");

function $caret$plus(s, r) {
  return {
          TAG: /* Concat */1,
          _0: {
            hd: {
              TAG: /* Leaf */0,
              _0: s
            },
            tl: {
              hd: r,
              tl: /* [] */0
            }
          }
        };
}

function $plus$caret(r, s) {
  return {
          TAG: /* Concat */1,
          _0: {
            hd: r,
            tl: {
              hd: {
                TAG: /* Leaf */0,
                _0: s
              },
              tl: /* [] */0
            }
          }
        };
}

function iter(f, s) {
  if (s.TAG === /* Leaf */0) {
    return Curry._1(f, s._0);
  } else {
    return List.iter((function (param) {
                  return iter(f, param);
                }), s._0);
  }
}

function concat(s) {
  if (s.TAG === /* Leaf */0) {
    return s._0;
  } else {
    return $$String.concat("", List.map(concat, s._0));
  }
}

function pp(off, width, s) {
  if (s.TAG === /* Atom */0) {
    var s$1 = s._0;
    return [
            s$1.length,
            {
              TAG: /* Leaf */0,
              _0: s$1
            }
          ];
  }
  var s$2 = s._0;
  var partial_arg = off + 2 | 0;
  var match = List.split(List.map((function (param) {
              return pp(partial_arg, width, param);
            }), s._1));
  var rs = match[1];
  var len = (s$2.length + List.length(rs) | 0) + List.fold_left((function (prim0, prim1) {
          return prim0 + prim1 | 0;
        }), 2, match[0]) | 0;
  var match$1;
  if ((off + len | 0) <= width) {
    match$1 = [
      " ",
      ""
    ];
  } else {
    var indent = $$String.make(off, /* ' ' */32);
    match$1 = [
      "\n  " + indent,
      "\n" + indent
    ];
  }
  var sep = match$1[0];
  return [
          len,
          $caret$plus("(", $caret$plus(s$2, $plus$caret($plus$caret({
                            TAG: /* Concat */1,
                            _0: List.map((function (r) {
                                    return $caret$plus(sep, r);
                                  }), rs)
                          }, match$1[1]), ")")))
        ];
}

function output(oc, width, x) {
  iter((function (param) {
          return Pervasives.output_string(oc, param);
        }), pp(0, width, x)[1]);
  Pervasives.output_string(oc, "\n");
  return Pervasives.flush(oc);
}

function print(param, param$1) {
  return output(Pervasives.stdout, param, param$1);
}

function to_string(width, x) {
  return concat(pp(0, width, x)[1]) + "\n";
}

exports.output = output;
exports.print = print;
exports.to_string = to_string;
/* No side effect */
